/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectDataPolicies;
import com.konfigthis.client.model.WorkspaceDataPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppDataPoliciesEapApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppDataPoliciesEapApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppDataPoliciesEapApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDataPolicyProjectsCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/data-policy/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataPolicyProjectsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        return getDataPolicyProjectsCall(ids, _callback);

    }


    private ApiResponse<ProjectDataPolicies> getDataPolicyProjectsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = getDataPolicyProjectsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<ProjectDataPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataPolicyProjectsAsync(String ids, final ApiCallback<ProjectDataPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataPolicyProjectsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<ProjectDataPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataPolicyProjectsRequestBuilder {
        private String ids;

        private GetDataPolicyProjectsRequestBuilder() {
        }

        /**
         * Set ids
         * @param ids A list of project identifiers. This parameter accepts a comma-separated list. (optional)
         * @return GetDataPolicyProjectsRequestBuilder
         */
        public GetDataPolicyProjectsRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for getDataPolicyProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataPolicyProjectsCall(ids, _callback);
        }


        /**
         * Execute getDataPolicyProjects request
         * @return ProjectDataPolicies
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectDataPolicies execute() throws ApiException {
            ApiResponse<ProjectDataPolicies> localVarResp = getDataPolicyProjectsWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataPolicyProjects request with HTTP info returned
         * @return ApiResponse&lt;ProjectDataPolicies&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectDataPolicies> executeWithHttpInfo() throws ApiException {
            return getDataPolicyProjectsWithHttpInfo(ids);
        }

        /**
         * Execute getDataPolicyProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectDataPolicies> _callback) throws ApiException {
            return getDataPolicyProjectsAsync(ids, _callback);
        }
    }

    /**
     * Get data policy for projects (EAP)
     * Returns data policies for the projects specified in the request.
     * @return GetDataPolicyProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetDataPolicyProjectsRequestBuilder getDataPolicyProjects() throws IllegalArgumentException {
        return new GetDataPolicyProjectsRequestBuilder();
    }
    private okhttp3.Call getDataPolicyWorkspaceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/data-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataPolicyWorkspaceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDataPolicyWorkspaceCall(_callback);

    }


    private ApiResponse<WorkspaceDataPolicy> getDataPolicyWorkspaceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDataPolicyWorkspaceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WorkspaceDataPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataPolicyWorkspaceAsync(final ApiCallback<WorkspaceDataPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataPolicyWorkspaceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WorkspaceDataPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataPolicyWorkspaceRequestBuilder {

        private GetDataPolicyWorkspaceRequestBuilder() {
        }

        /**
         * Build call for getDataPolicyWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataPolicyWorkspaceCall(_callback);
        }


        /**
         * Execute getDataPolicyWorkspace request
         * @return WorkspaceDataPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceDataPolicy execute() throws ApiException {
            ApiResponse<WorkspaceDataPolicy> localVarResp = getDataPolicyWorkspaceWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataPolicyWorkspace request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceDataPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceDataPolicy> executeWithHttpInfo() throws ApiException {
            return getDataPolicyWorkspaceWithHttpInfo();
        }

        /**
         * Execute getDataPolicyWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceDataPolicy> _callback) throws ApiException {
            return getDataPolicyWorkspaceAsync(_callback);
        }
    }

    /**
     * Get data policy for the workspace (EAP)
     * Returns data policy for the workspace.
     * @return GetDataPolicyWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDataPolicyWorkspaceRequestBuilder getDataPolicyWorkspace() throws IllegalArgumentException {
        return new GetDataPolicyWorkspaceRequestBuilder();
    }
}
