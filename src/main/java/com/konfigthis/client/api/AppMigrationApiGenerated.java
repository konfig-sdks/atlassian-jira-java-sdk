/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConnectCustomFieldValue;
import com.konfigthis.client.model.ConnectCustomFieldValues;
import com.konfigthis.client.model.EntityPropertyDetails;
import java.util.UUID;
import com.konfigthis.client.model.WorkflowRulesSearch;
import com.konfigthis.client.model.WorkflowRulesSearchDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppMigrationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppMigrationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppMigrationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkUpdateEntityPropertiesCall(UUID atlassianTransferId, String entityType, List<EntityPropertyDetails> entityPropertyDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityPropertyDetails;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/migration/properties/{entityType}"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (atlassianTransferId != null) {
            localVarHeaderParams.put("Atlassian-Transfer-Id", localVarApiClient.parameterToString(atlassianTransferId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateEntityPropertiesValidateBeforeCall(UUID atlassianTransferId, String entityType, List<EntityPropertyDetails> entityPropertyDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'atlassianTransferId' is set
        if (atlassianTransferId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTransferId' when calling bulkUpdateEntityProperties(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling bulkUpdateEntityProperties(Async)");
        }

        // verify the required parameter 'entityPropertyDetails' is set
        if (entityPropertyDetails == null) {
            throw new ApiException("Missing the required parameter 'entityPropertyDetails' when calling bulkUpdateEntityProperties(Async)");
        }

        return bulkUpdateEntityPropertiesCall(atlassianTransferId, entityType, entityPropertyDetails, _callback);

    }


    private ApiResponse<Void> bulkUpdateEntityPropertiesWithHttpInfo(UUID atlassianTransferId, String entityType, List<EntityPropertyDetails> entityPropertyDetails) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateEntityPropertiesValidateBeforeCall(atlassianTransferId, entityType, entityPropertyDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkUpdateEntityPropertiesAsync(UUID atlassianTransferId, String entityType, List<EntityPropertyDetails> entityPropertyDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateEntityPropertiesValidateBeforeCall(atlassianTransferId, entityType, entityPropertyDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkUpdateEntityPropertiesRequestBuilder {
        private final UUID atlassianTransferId;
        private final String entityType;
        private List<EntityPropertyDetails> entityPropertyDetails;

        private BulkUpdateEntityPropertiesRequestBuilder(UUID atlassianTransferId, String entityType) {
            this.atlassianTransferId = atlassianTransferId;
            this.entityType = entityType;
        }

        /**
         * Set entityPropertyDetails
         * @param entityPropertyDetails  (optional)
         * @return BulkUpdateEntityPropertiesRequestBuilder
         */
        public BulkUpdateEntityPropertiesRequestBuilder entityPropertyDetails(List<EntityPropertyDetails> entityPropertyDetails) {
            this.entityPropertyDetails = entityPropertyDetails;
            return this;
        }

        /**
         * Build call for bulkUpdateEntityProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<EntityPropertyDetails> entityPropertyDetails = buildBodyParams();
            return bulkUpdateEntityPropertiesCall(atlassianTransferId, entityType, entityPropertyDetails, _callback);
        }

        private List<EntityPropertyDetails> buildBodyParams() {
            return this.entityPropertyDetails;
        }

        /**
         * Execute bulkUpdateEntityProperties request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<EntityPropertyDetails> entityPropertyDetails = buildBodyParams();
            bulkUpdateEntityPropertiesWithHttpInfo(atlassianTransferId, entityType, entityPropertyDetails);
        }

        /**
         * Execute bulkUpdateEntityProperties request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<EntityPropertyDetails> entityPropertyDetails = buildBodyParams();
            return bulkUpdateEntityPropertiesWithHttpInfo(atlassianTransferId, entityType, entityPropertyDetails);
        }

        /**
         * Execute bulkUpdateEntityProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<EntityPropertyDetails> entityPropertyDetails = buildBodyParams();
            return bulkUpdateEntityPropertiesAsync(atlassianTransferId, entityType, entityPropertyDetails, _callback);
        }
    }

    /**
     * Bulk update entity properties
     * Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
     * @param atlassianTransferId The app migration transfer ID. (required)
     * @param entityType The type indicating the object that contains the entity properties. (required)
     * @param entityPropertyDetails  (required)
     * @return BulkUpdateEntityPropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public BulkUpdateEntityPropertiesRequestBuilder bulkUpdateEntityProperties(UUID atlassianTransferId, String entityType) throws IllegalArgumentException {
        if (atlassianTransferId == null) throw new IllegalArgumentException("\"atlassianTransferId\" is required but got null");
            

        if (entityType == null) throw new IllegalArgumentException("\"entityType\" is required but got null");
            

        return new BulkUpdateEntityPropertiesRequestBuilder(atlassianTransferId, entityType);
    }
    private okhttp3.Call updateCustomFieldValueCall(UUID atlassianTransferId, ConnectCustomFieldValues connectCustomFieldValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectCustomFieldValues;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/migration/field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (atlassianTransferId != null) {
            localVarHeaderParams.put("Atlassian-Transfer-Id", localVarApiClient.parameterToString(atlassianTransferId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValueValidateBeforeCall(UUID atlassianTransferId, ConnectCustomFieldValues connectCustomFieldValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'atlassianTransferId' is set
        if (atlassianTransferId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTransferId' when calling updateCustomFieldValue(Async)");
        }

        // verify the required parameter 'connectCustomFieldValues' is set
        if (connectCustomFieldValues == null) {
            throw new ApiException("Missing the required parameter 'connectCustomFieldValues' when calling updateCustomFieldValue(Async)");
        }

        return updateCustomFieldValueCall(atlassianTransferId, connectCustomFieldValues, _callback);

    }


    private ApiResponse<Object> updateCustomFieldValueWithHttpInfo(UUID atlassianTransferId, ConnectCustomFieldValues connectCustomFieldValues) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValueValidateBeforeCall(atlassianTransferId, connectCustomFieldValues, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldValueAsync(UUID atlassianTransferId, ConnectCustomFieldValues connectCustomFieldValues, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValueValidateBeforeCall(atlassianTransferId, connectCustomFieldValues, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldValueRequestBuilder {
        private final UUID atlassianTransferId;
        private List<ConnectCustomFieldValue> updateValueList;

        private UpdateCustomFieldValueRequestBuilder(UUID atlassianTransferId) {
            this.atlassianTransferId = atlassianTransferId;
        }

        /**
         * Set updateValueList
         * @param updateValueList The list of custom field update details. (optional)
         * @return UpdateCustomFieldValueRequestBuilder
         */
        public UpdateCustomFieldValueRequestBuilder updateValueList(List<ConnectCustomFieldValue> updateValueList) {
            this.updateValueList = updateValueList;
            return this;
        }
        
        /**
         * Build call for updateCustomFieldValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectCustomFieldValues connectCustomFieldValues = buildBodyParams();
            return updateCustomFieldValueCall(atlassianTransferId, connectCustomFieldValues, _callback);
        }

        private ConnectCustomFieldValues buildBodyParams() {
            ConnectCustomFieldValues connectCustomFieldValues = new ConnectCustomFieldValues();
            connectCustomFieldValues.updateValueList(this.updateValueList);
            return connectCustomFieldValues;
        }

        /**
         * Execute updateCustomFieldValue request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ConnectCustomFieldValues connectCustomFieldValues = buildBodyParams();
            ApiResponse<Object> localVarResp = updateCustomFieldValueWithHttpInfo(atlassianTransferId, connectCustomFieldValues);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomFieldValue request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ConnectCustomFieldValues connectCustomFieldValues = buildBodyParams();
            return updateCustomFieldValueWithHttpInfo(atlassianTransferId, connectCustomFieldValues);
        }

        /**
         * Execute updateCustomFieldValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ConnectCustomFieldValues connectCustomFieldValues = buildBodyParams();
            return updateCustomFieldValueAsync(atlassianTransferId, connectCustomFieldValues, _callback);
        }
    }

    /**
     * Bulk update custom field value
     * Updates the value of a custom field added by Connect apps on one or more issues. The values of up to 200 custom fields can be updated.  **[Permissions](https://dac-static.atlassian.com) required:** Only Connect apps can make this request
     * @param atlassianTransferId The ID of the transfer. (required)
     * @param connectCustomFieldValues  (required)
     * @return UpdateCustomFieldValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldValueRequestBuilder updateCustomFieldValue(UUID atlassianTransferId) throws IllegalArgumentException {
        if (atlassianTransferId == null) throw new IllegalArgumentException("\"atlassianTransferId\" is required but got null");
            

        return new UpdateCustomFieldValueRequestBuilder(atlassianTransferId);
    }
    private okhttp3.Call workflowTransitionRuleConfigurationsCall(UUID atlassianTransferId, WorkflowRulesSearch workflowRulesSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowRulesSearch;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/migration/workflow/rule/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (atlassianTransferId != null) {
            localVarHeaderParams.put("Atlassian-Transfer-Id", localVarApiClient.parameterToString(atlassianTransferId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowTransitionRuleConfigurationsValidateBeforeCall(UUID atlassianTransferId, WorkflowRulesSearch workflowRulesSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'atlassianTransferId' is set
        if (atlassianTransferId == null) {
            throw new ApiException("Missing the required parameter 'atlassianTransferId' when calling workflowTransitionRuleConfigurations(Async)");
        }

        // verify the required parameter 'workflowRulesSearch' is set
        if (workflowRulesSearch == null) {
            throw new ApiException("Missing the required parameter 'workflowRulesSearch' when calling workflowTransitionRuleConfigurations(Async)");
        }

        return workflowTransitionRuleConfigurationsCall(atlassianTransferId, workflowRulesSearch, _callback);

    }


    private ApiResponse<WorkflowRulesSearchDetails> workflowTransitionRuleConfigurationsWithHttpInfo(UUID atlassianTransferId, WorkflowRulesSearch workflowRulesSearch) throws ApiException {
        okhttp3.Call localVarCall = workflowTransitionRuleConfigurationsValidateBeforeCall(atlassianTransferId, workflowRulesSearch, null);
        Type localVarReturnType = new TypeToken<WorkflowRulesSearchDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call workflowTransitionRuleConfigurationsAsync(UUID atlassianTransferId, WorkflowRulesSearch workflowRulesSearch, final ApiCallback<WorkflowRulesSearchDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowTransitionRuleConfigurationsValidateBeforeCall(atlassianTransferId, workflowRulesSearch, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRulesSearchDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WorkflowTransitionRuleConfigurationsRequestBuilder {
        private final List<UUID> ruleIds;
        private final UUID workflowEntityId;
        private final UUID atlassianTransferId;
        private String expand;

        private WorkflowTransitionRuleConfigurationsRequestBuilder(List<UUID> ruleIds, UUID workflowEntityId, UUID atlassianTransferId) {
            this.ruleIds = ruleIds;
            this.workflowEntityId = workflowEntityId;
            this.atlassianTransferId = atlassianTransferId;
        }

        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts &#x60;transition&#x60; which, for each rule, returns information about the transition the rule is assigned to. (optional)
         * @return WorkflowTransitionRuleConfigurationsRequestBuilder
         */
        public WorkflowTransitionRuleConfigurationsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for workflowTransitionRuleConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowRulesSearch workflowRulesSearch = buildBodyParams();
            return workflowTransitionRuleConfigurationsCall(atlassianTransferId, workflowRulesSearch, _callback);
        }

        private WorkflowRulesSearch buildBodyParams() {
            WorkflowRulesSearch workflowRulesSearch = new WorkflowRulesSearch();
            workflowRulesSearch.expand(this.expand);
            workflowRulesSearch.ruleIds(this.ruleIds);
            workflowRulesSearch.workflowEntityId(this.workflowEntityId);
            return workflowRulesSearch;
        }

        /**
         * Execute workflowTransitionRuleConfigurations request
         * @return WorkflowRulesSearchDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowRulesSearchDetails execute() throws ApiException {
            WorkflowRulesSearch workflowRulesSearch = buildBodyParams();
            ApiResponse<WorkflowRulesSearchDetails> localVarResp = workflowTransitionRuleConfigurationsWithHttpInfo(atlassianTransferId, workflowRulesSearch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute workflowTransitionRuleConfigurations request with HTTP info returned
         * @return ApiResponse&lt;WorkflowRulesSearchDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowRulesSearchDetails> executeWithHttpInfo() throws ApiException {
            WorkflowRulesSearch workflowRulesSearch = buildBodyParams();
            return workflowTransitionRuleConfigurationsWithHttpInfo(atlassianTransferId, workflowRulesSearch);
        }

        /**
         * Execute workflowTransitionRuleConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowRulesSearchDetails> _callback) throws ApiException {
            WorkflowRulesSearch workflowRulesSearch = buildBodyParams();
            return workflowTransitionRuleConfigurationsAsync(atlassianTransferId, workflowRulesSearch, _callback);
        }
    }

    /**
     * Get workflow transition rule configurations
     * Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
     * @param atlassianTransferId The app migration transfer ID. (required)
     * @param workflowRulesSearch  (required)
     * @return WorkflowTransitionRuleConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the authorisation credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowTransitionRuleConfigurationsRequestBuilder workflowTransitionRuleConfigurations(List<UUID> ruleIds, UUID workflowEntityId, UUID atlassianTransferId) throws IllegalArgumentException {
        if (ruleIds == null) throw new IllegalArgumentException("\"ruleIds\" is required but got null");
        if (workflowEntityId == null) throw new IllegalArgumentException("\"workflowEntityId\" is required but got null");
            

        if (atlassianTransferId == null) throw new IllegalArgumentException("\"atlassianTransferId\" is required but got null");
            

        return new WorkflowTransitionRuleConfigurationsRequestBuilder(ruleIds, workflowEntityId, atlassianTransferId);
    }
}
