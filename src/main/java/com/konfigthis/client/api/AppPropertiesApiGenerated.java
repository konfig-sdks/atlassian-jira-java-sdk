/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.OperationMessage;
import com.konfigthis.client.model.PropertyKeys;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppPropertiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppPropertiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppPropertiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteForgePropertyCall(String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/forge/1/app/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteForgePropertyValidateBeforeCall(String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteForgeProperty(Async)");
        }

        return deleteForgePropertyCall(propertyKey, _callback);

    }


    private ApiResponse<Void> deleteForgePropertyWithHttpInfo(String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deleteForgePropertyValidateBeforeCall(propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteForgePropertyAsync(String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteForgePropertyValidateBeforeCall(propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteForgePropertyRequestBuilder {
        private final String propertyKey;

        private DeleteForgePropertyRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for deleteForgeProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteForgePropertyCall(propertyKey, _callback);
        }


        /**
         * Execute deleteForgeProperty request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteForgePropertyWithHttpInfo(propertyKey);
        }

        /**
         * Execute deleteForgeProperty request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteForgePropertyWithHttpInfo(propertyKey);
        }

        /**
         * Execute deleteForgeProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteForgePropertyAsync(propertyKey, _callback);
        }
    }

    /**
     * Delete app property (Forge)
     * Deletes a Forge app&#39;s property.  **[Permissions](https://dac-static.atlassian.com) required:** Only Forge apps can make this request.
     * @param propertyKey The key of the property. (required)
     * @return DeleteForgePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteForgePropertyRequestBuilder deleteForgeProperty(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeleteForgePropertyRequestBuilder(propertyKey);
    }
    private okhttp3.Call deletePropertyCall(String addonKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            .replace("{" + "addonKey" + "}", localVarApiClient.escapeString(addonKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(String addonKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonKey' is set
        if (addonKey == null) {
            throw new ApiException("Missing the required parameter 'addonKey' when calling deleteProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteProperty(Async)");
        }

        return deletePropertyCall(addonKey, propertyKey, _callback);

    }


    private ApiResponse<Void> deletePropertyWithHttpInfo(String addonKey, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(addonKey, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePropertyAsync(String addonKey, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(addonKey, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePropertyRequestBuilder {
        private final String addonKey;
        private final String propertyKey;

        private DeletePropertyRequestBuilder(String addonKey, String propertyKey) {
            this.addonKey = addonKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for deleteProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyCall(addonKey, propertyKey, _callback);
        }


        /**
         * Execute deleteProperty request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePropertyWithHttpInfo(addonKey, propertyKey);
        }

        /**
         * Execute deleteProperty request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePropertyWithHttpInfo(addonKey, propertyKey);
        }

        /**
         * Execute deleteProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePropertyAsync(addonKey, propertyKey, _callback);
        }
    }

    /**
     * Delete app property
     * Deletes an app&#39;s property.  **[Permissions](https://dac-static.atlassian.com) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps can access Connect app properties (stored against the same &#x60;app.connect.key&#x60;).
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @return DeletePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePropertyRequestBuilder deleteProperty(String addonKey, String propertyKey) throws IllegalArgumentException {
        if (addonKey == null) throw new IllegalArgumentException("\"addonKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeletePropertyRequestBuilder(addonKey, propertyKey);
    }
    private okhttp3.Call getAllPropertiesCall(String addonKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/addons/{addonKey}/properties"
            .replace("{" + "addonKey" + "}", localVarApiClient.escapeString(addonKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPropertiesValidateBeforeCall(String addonKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonKey' is set
        if (addonKey == null) {
            throw new ApiException("Missing the required parameter 'addonKey' when calling getAllProperties(Async)");
        }

        return getAllPropertiesCall(addonKey, _callback);

    }


    private ApiResponse<PropertyKeys> getAllPropertiesWithHttpInfo(String addonKey) throws ApiException {
        okhttp3.Call localVarCall = getAllPropertiesValidateBeforeCall(addonKey, null);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPropertiesAsync(String addonKey, final ApiCallback<PropertyKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPropertiesValidateBeforeCall(addonKey, _callback);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPropertiesRequestBuilder {
        private final String addonKey;

        private GetAllPropertiesRequestBuilder(String addonKey) {
            this.addonKey = addonKey;
        }

        /**
         * Build call for getAllProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPropertiesCall(addonKey, _callback);
        }


        /**
         * Execute getAllProperties request
         * @return PropertyKeys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PropertyKeys execute() throws ApiException {
            ApiResponse<PropertyKeys> localVarResp = getAllPropertiesWithHttpInfo(addonKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllProperties request with HTTP info returned
         * @return ApiResponse&lt;PropertyKeys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyKeys> executeWithHttpInfo() throws ApiException {
            return getAllPropertiesWithHttpInfo(addonKey);
        }

        /**
         * Execute getAllProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyKeys> _callback) throws ApiException {
            return getAllPropertiesAsync(addonKey, _callback);
        }
    }

    /**
     * Get app properties
     * Gets all the properties of an app.  **[Permissions](https://dac-static.atlassian.com) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps can access Connect app properties (stored against the same &#x60;app.connect.key&#x60;).
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @return GetAllPropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPropertiesRequestBuilder getAllProperties(String addonKey) throws IllegalArgumentException {
        if (addonKey == null) throw new IllegalArgumentException("\"addonKey\" is required but got null");
            

        return new GetAllPropertiesRequestBuilder(addonKey);
    }
    private okhttp3.Call getByKeyAndValueCall(String addonKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            .replace("{" + "addonKey" + "}", localVarApiClient.escapeString(addonKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByKeyAndValueValidateBeforeCall(String addonKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonKey' is set
        if (addonKey == null) {
            throw new ApiException("Missing the required parameter 'addonKey' when calling getByKeyAndValue(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getByKeyAndValue(Async)");
        }

        return getByKeyAndValueCall(addonKey, propertyKey, _callback);

    }


    private ApiResponse<EntityProperty> getByKeyAndValueWithHttpInfo(String addonKey, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getByKeyAndValueValidateBeforeCall(addonKey, propertyKey, null);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByKeyAndValueAsync(String addonKey, String propertyKey, final ApiCallback<EntityProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByKeyAndValueValidateBeforeCall(addonKey, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByKeyAndValueRequestBuilder {
        private final String addonKey;
        private final String propertyKey;

        private GetByKeyAndValueRequestBuilder(String addonKey, String propertyKey) {
            this.addonKey = addonKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for getByKeyAndValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByKeyAndValueCall(addonKey, propertyKey, _callback);
        }


        /**
         * Execute getByKeyAndValue request
         * @return EntityProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public EntityProperty execute() throws ApiException {
            ApiResponse<EntityProperty> localVarResp = getByKeyAndValueWithHttpInfo(addonKey, propertyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByKeyAndValue request with HTTP info returned
         * @return ApiResponse&lt;EntityProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityProperty> executeWithHttpInfo() throws ApiException {
            return getByKeyAndValueWithHttpInfo(addonKey, propertyKey);
        }

        /**
         * Execute getByKeyAndValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityProperty> _callback) throws ApiException {
            return getByKeyAndValueAsync(addonKey, propertyKey, _callback);
        }
    }

    /**
     * Get app property
     * Returns the key and value of an app&#39;s property.  **[Permissions](https://dac-static.atlassian.com) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps can access Connect app properties (stored against the same &#x60;app.connect.key&#x60;).
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @return GetByKeyAndValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetByKeyAndValueRequestBuilder getByKeyAndValue(String addonKey, String propertyKey) throws IllegalArgumentException {
        if (addonKey == null) throw new IllegalArgumentException("\"addonKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new GetByKeyAndValueRequestBuilder(addonKey, propertyKey);
    }
    private okhttp3.Call setAppPropertyCall(String addonKey, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            .replace("{" + "addonKey" + "}", localVarApiClient.escapeString(addonKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAppPropertyValidateBeforeCall(String addonKey, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonKey' is set
        if (addonKey == null) {
            throw new ApiException("Missing the required parameter 'addonKey' when calling setAppProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setAppProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAppProperty(Async)");
        }

        return setAppPropertyCall(addonKey, propertyKey, body, _callback);

    }


    private ApiResponse<OperationMessage> setAppPropertyWithHttpInfo(String addonKey, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setAppPropertyValidateBeforeCall(addonKey, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<OperationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAppPropertyAsync(String addonKey, String propertyKey, Object body, final ApiCallback<OperationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAppPropertyValidateBeforeCall(addonKey, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<OperationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetAppPropertyRequestBuilder {
        private final String addonKey;
        private final String propertyKey;
        private Object body;

        private SetAppPropertyRequestBuilder(String addonKey, String propertyKey) {
            this.addonKey = addonKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return SetAppPropertyRequestBuilder
         */
        public SetAppPropertyRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for setAppProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setAppPropertyCall(addonKey, propertyKey, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setAppProperty request
         * @return OperationMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
         </table>
         */
        public OperationMessage execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<OperationMessage> localVarResp = setAppPropertyWithHttpInfo(addonKey, propertyKey, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setAppProperty request with HTTP info returned
         * @return ApiResponse&lt;OperationMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OperationMessage> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setAppPropertyWithHttpInfo(addonKey, propertyKey, body);
        }

        /**
         * Execute setAppProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OperationMessage> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setAppPropertyAsync(addonKey, propertyKey, body, _callback);
        }
    }

    /**
     * Set app property
     * Sets the value of an app&#39;s property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](https://dac-static.atlassian.com) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps can access Connect app properties (stored against the same &#x60;app.connect.key&#x60;).
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @param body  (required)
     * @return SetAppPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
     </table>
     */
    public SetAppPropertyRequestBuilder setAppProperty(String addonKey, String propertyKey) throws IllegalArgumentException {
        if (addonKey == null) throw new IllegalArgumentException("\"addonKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetAppPropertyRequestBuilder(addonKey, propertyKey);
    }
    private okhttp3.Call setForgePropertyCall(String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/forge/1/app/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setForgePropertyValidateBeforeCall(String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setForgeProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setForgeProperty(Async)");
        }

        return setForgePropertyCall(propertyKey, body, _callback);

    }


    private ApiResponse<OperationMessage> setForgePropertyWithHttpInfo(String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setForgePropertyValidateBeforeCall(propertyKey, body, null);
        Type localVarReturnType = new TypeToken<OperationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setForgePropertyAsync(String propertyKey, Object body, final ApiCallback<OperationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = setForgePropertyValidateBeforeCall(propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<OperationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetForgePropertyRequestBuilder {
        private final String propertyKey;
        private Object body;

        private SetForgePropertyRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return SetForgePropertyRequestBuilder
         */
        public SetForgePropertyRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for setForgeProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setForgePropertyCall(propertyKey, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setForgeProperty request
         * @return OperationMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public OperationMessage execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<OperationMessage> localVarResp = setForgePropertyWithHttpInfo(propertyKey, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setForgeProperty request with HTTP info returned
         * @return ApiResponse&lt;OperationMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OperationMessage> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setForgePropertyWithHttpInfo(propertyKey, body);
        }

        /**
         * Execute setForgeProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OperationMessage> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setForgePropertyAsync(propertyKey, body, _callback);
        }
    }

    /**
     * Set app property (Forge)
     * Sets the value of a Forge app&#39;s property. These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) through the &#x60;app&#x60; [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).  For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](https://dac-static.atlassian.com) required:** Only Forge apps can make this request.
     * @param propertyKey The key of the property. (required)
     * @param body  (required)
     * @return SetForgePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned is the property is created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public SetForgePropertyRequestBuilder setForgeProperty(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetForgePropertyRequestBuilder(propertyKey);
    }
}
