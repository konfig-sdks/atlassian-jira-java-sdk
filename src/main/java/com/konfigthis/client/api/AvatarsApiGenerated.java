/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Avatar;
import com.konfigthis.client.model.Avatars;
import com.konfigthis.client.model.SystemAvatars;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AvatarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvatarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AvatarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteAvatarCall(String type, String owningObjectId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "owningObjectId" + "}", localVarApiClient.escapeString(owningObjectId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAvatarValidateBeforeCall(String type, String owningObjectId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteAvatar(Async)");
        }

        // verify the required parameter 'owningObjectId' is set
        if (owningObjectId == null) {
            throw new ApiException("Missing the required parameter 'owningObjectId' when calling deleteAvatar(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAvatar(Async)");
        }

        return deleteAvatarCall(type, owningObjectId, id, _callback);

    }


    private ApiResponse<Void> deleteAvatarWithHttpInfo(String type, String owningObjectId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(type, owningObjectId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAvatarAsync(String type, String owningObjectId, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(type, owningObjectId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAvatarRequestBuilder {
        private final String type;
        private final String owningObjectId;
        private final Long id;

        private DeleteAvatarRequestBuilder(String type, String owningObjectId, Long id) {
            this.type = type;
            this.owningObjectId = owningObjectId;
            this.id = id;
        }

        /**
         * Build call for deleteAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to delete the avatar, the avatar is not deletable. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type, associated item ID, or avatar ID is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAvatarCall(type, owningObjectId, id, _callback);
        }


        /**
         * Execute deleteAvatar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to delete the avatar, the avatar is not deletable. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type, associated item ID, or avatar ID is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAvatarWithHttpInfo(type, owningObjectId, id);
        }

        /**
         * Execute deleteAvatar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to delete the avatar, the avatar is not deletable. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type, associated item ID, or avatar ID is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAvatarWithHttpInfo(type, owningObjectId, id);
        }

        /**
         * Execute deleteAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to delete the avatar, the avatar is not deletable. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type, associated item ID, or avatar ID is invalid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAvatarAsync(type, owningObjectId, id, _callback);
        }
    }

    /**
     * Delete avatar
     * Deletes an avatar from a project or issue type.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param type The avatar type. (required)
     * @param owningObjectId The ID of the item the avatar is associated with. (required)
     * @param id The ID of the avatar. (required)
     * @return DeleteAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to delete the avatar, the avatar is not deletable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the avatar type, associated item ID, or avatar ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAvatarRequestBuilder deleteAvatar(String type, String owningObjectId, Long id) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (owningObjectId == null) throw new IllegalArgumentException("\"owningObjectId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteAvatarRequestBuilder(type, owningObjectId, id);
    }
    private okhttp3.Call getAvatarImageByIdCall(String type, Long id, String size, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*",
            "image/png",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvatarImageByIdValidateBeforeCall(String type, Long id, String size, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getAvatarImageById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAvatarImageById(Async)");
        }

        return getAvatarImageByIdCall(type, id, size, format, _callback);

    }


    private ApiResponse<Object> getAvatarImageByIdWithHttpInfo(String type, Long id, String size, String format) throws ApiException {
        okhttp3.Call localVarCall = getAvatarImageByIdValidateBeforeCall(type, id, size, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvatarImageByIdAsync(String type, Long id, String size, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvatarImageByIdValidateBeforeCall(type, id, size, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvatarImageByIdRequestBuilder {
        private final String type;
        private final Long id;
        private String size;
        private String format;

        private GetAvatarImageByIdRequestBuilder(String type, Long id) {
            this.type = type;
            this.id = id;
        }

        /**
         * Set size
         * @param size The size of the avatar image. If not provided the default size is returned. (optional)
         * @return GetAvatarImageByIdRequestBuilder
         */
        public GetAvatarImageByIdRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set format
         * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
         * @return GetAvatarImageByIdRequestBuilder
         */
        public GetAvatarImageByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getAvatarImageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvatarImageByIdCall(type, id, size, format, _callback);
        }


        /**
         * Execute getAvatarImageById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAvatarImageByIdWithHttpInfo(type, id, size, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvatarImageById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAvatarImageByIdWithHttpInfo(type, id, size, format);
        }

        /**
         * Execute getAvatarImageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAvatarImageByIdAsync(type, id, size, format, _callback);
        }
    }

    /**
     * Get avatar image by ID
     * Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param type The icon type of the avatar. (required)
     * @param id The ID of the avatar. (required)
     * @return GetAvatarImageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvatarImageByIdRequestBuilder getAvatarImageById(String type, Long id) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetAvatarImageByIdRequestBuilder(type, id);
    }
    private okhttp3.Call getAvatarImageByOwnerCall(String type, String entityId, String size, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*",
            "image/png",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvatarImageByOwnerValidateBeforeCall(String type, String entityId, String size, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getAvatarImageByOwner(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getAvatarImageByOwner(Async)");
        }

        return getAvatarImageByOwnerCall(type, entityId, size, format, _callback);

    }


    private ApiResponse<Object> getAvatarImageByOwnerWithHttpInfo(String type, String entityId, String size, String format) throws ApiException {
        okhttp3.Call localVarCall = getAvatarImageByOwnerValidateBeforeCall(type, entityId, size, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvatarImageByOwnerAsync(String type, String entityId, String size, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvatarImageByOwnerValidateBeforeCall(type, entityId, size, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvatarImageByOwnerRequestBuilder {
        private final String type;
        private final String entityId;
        private String size;
        private String format;

        private GetAvatarImageByOwnerRequestBuilder(String type, String entityId) {
            this.type = type;
            this.entityId = entityId;
        }

        /**
         * Set size
         * @param size The size of the avatar image. If not provided the default size is returned. (optional)
         * @return GetAvatarImageByOwnerRequestBuilder
         */
        public GetAvatarImageByOwnerRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set format
         * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
         * @return GetAvatarImageByOwnerRequestBuilder
         */
        public GetAvatarImageByOwnerRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getAvatarImageByOwner
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvatarImageByOwnerCall(type, entityId, size, format, _callback);
        }


        /**
         * Execute getAvatarImageByOwner request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAvatarImageByOwnerWithHttpInfo(type, entityId, size, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvatarImageByOwner request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAvatarImageByOwnerWithHttpInfo(type, entityId, size, format);
        }

        /**
         * Execute getAvatarImageByOwner request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAvatarImageByOwnerAsync(type, entityId, size, format, _callback);
        }
    }

    /**
     * Get avatar image by owner
     * Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     * @param type The icon type of the avatar. (required)
     * @param entityId The ID of the project or issue type the avatar belongs to. (required)
     * @return GetAvatarImageByOwnerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvatarImageByOwnerRequestBuilder getAvatarImageByOwner(String type, String entityId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GetAvatarImageByOwnerRequestBuilder(type, entityId);
    }
    private okhttp3.Call getDefaultAvatarImageByTypeCall(String type, String size, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/view/type/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*",
            "image/png",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultAvatarImageByTypeValidateBeforeCall(String type, String size, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getDefaultAvatarImageByType(Async)");
        }

        return getDefaultAvatarImageByTypeCall(type, size, format, _callback);

    }


    private ApiResponse<Object> getDefaultAvatarImageByTypeWithHttpInfo(String type, String size, String format) throws ApiException {
        okhttp3.Call localVarCall = getDefaultAvatarImageByTypeValidateBeforeCall(type, size, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultAvatarImageByTypeAsync(String type, String size, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultAvatarImageByTypeValidateBeforeCall(type, size, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultAvatarImageByTypeRequestBuilder {
        private final String type;
        private String size;
        private String format;

        private GetDefaultAvatarImageByTypeRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set size
         * @param size The size of the avatar image. If not provided the default size is returned. (optional)
         * @return GetDefaultAvatarImageByTypeRequestBuilder
         */
        public GetDefaultAvatarImageByTypeRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set format
         * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
         * @return GetDefaultAvatarImageByTypeRequestBuilder
         */
        public GetDefaultAvatarImageByTypeRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getDefaultAvatarImageByType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultAvatarImageByTypeCall(type, size, format, _callback);
        }


        /**
         * Execute getDefaultAvatarImageByType request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getDefaultAvatarImageByTypeWithHttpInfo(type, size, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultAvatarImageByType request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getDefaultAvatarImageByTypeWithHttpInfo(type, size, format);
        }

        /**
         * Execute getDefaultAvatarImageByType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getDefaultAvatarImageByTypeAsync(type, size, format, _callback);
        }
    }

    /**
     * Get avatar image by type
     * Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param type The icon type of the avatar. (required)
     * @return GetDefaultAvatarImageByTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultAvatarImageByTypeRequestBuilder getDefaultAvatarImageByType(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetDefaultAvatarImageByTypeRequestBuilder(type);
    }
    private okhttp3.Call getSystemAndCustomAvatarsByTypeCall(String type, String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemAndCustomAvatarsByTypeValidateBeforeCall(String type, String entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSystemAndCustomAvatarsByType(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getSystemAndCustomAvatarsByType(Async)");
        }

        return getSystemAndCustomAvatarsByTypeCall(type, entityId, _callback);

    }


    private ApiResponse<Avatars> getSystemAndCustomAvatarsByTypeWithHttpInfo(String type, String entityId) throws ApiException {
        okhttp3.Call localVarCall = getSystemAndCustomAvatarsByTypeValidateBeforeCall(type, entityId, null);
        Type localVarReturnType = new TypeToken<Avatars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSystemAndCustomAvatarsByTypeAsync(String type, String entityId, final ApiCallback<Avatars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemAndCustomAvatarsByTypeValidateBeforeCall(type, entityId, _callback);
        Type localVarReturnType = new TypeToken<Avatars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSystemAndCustomAvatarsByTypeRequestBuilder {
        private final String type;
        private final String entityId;

        private GetSystemAndCustomAvatarsByTypeRequestBuilder(String type, String entityId) {
            this.type = type;
            this.entityId = entityId;
        }

        /**
         * Build call for getSystemAndCustomAvatarsByType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSystemAndCustomAvatarsByTypeCall(type, entityId, _callback);
        }


        /**
         * Execute getSystemAndCustomAvatarsByType request
         * @return Avatars
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Avatars execute() throws ApiException {
            ApiResponse<Avatars> localVarResp = getSystemAndCustomAvatarsByTypeWithHttpInfo(type, entityId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSystemAndCustomAvatarsByType request with HTTP info returned
         * @return ApiResponse&lt;Avatars&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Avatars> executeWithHttpInfo() throws ApiException {
            return getSystemAndCustomAvatarsByTypeWithHttpInfo(type, entityId);
        }

        /**
         * Execute getSystemAndCustomAvatarsByType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Avatars> _callback) throws ApiException {
            return getSystemAndCustomAvatarsByTypeAsync(type, entityId, _callback);
        }
    }

    /**
     * Get avatars
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.
     * @param type The avatar type. (required)
     * @param entityId The ID of the item the avatar is associated with. (required)
     * @return GetSystemAndCustomAvatarsByTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetSystemAndCustomAvatarsByTypeRequestBuilder getSystemAndCustomAvatarsByType(String type, String entityId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GetSystemAndCustomAvatarsByTypeRequestBuilder(type, entityId);
    }
    private okhttp3.Call getSystemAvatarsByTypeCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/avatar/{type}/system"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemAvatarsByTypeValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSystemAvatarsByType(Async)");
        }

        return getSystemAvatarsByTypeCall(type, _callback);

    }


    private ApiResponse<SystemAvatars> getSystemAvatarsByTypeWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getSystemAvatarsByTypeValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<SystemAvatars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSystemAvatarsByTypeAsync(String type, final ApiCallback<SystemAvatars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemAvatarsByTypeValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<SystemAvatars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSystemAvatarsByTypeRequestBuilder {
        private final String type;

        private GetSystemAvatarsByTypeRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Build call for getSystemAvatarsByType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if an error occurs while retrieving the list of avatars. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSystemAvatarsByTypeCall(type, _callback);
        }


        /**
         * Execute getSystemAvatarsByType request
         * @return SystemAvatars
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if an error occurs while retrieving the list of avatars. </td><td>  -  </td></tr>
         </table>
         */
        public SystemAvatars execute() throws ApiException {
            ApiResponse<SystemAvatars> localVarResp = getSystemAvatarsByTypeWithHttpInfo(type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSystemAvatarsByType request with HTTP info returned
         * @return ApiResponse&lt;SystemAvatars&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if an error occurs while retrieving the list of avatars. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SystemAvatars> executeWithHttpInfo() throws ApiException {
            return getSystemAvatarsByTypeWithHttpInfo(type);
        }

        /**
         * Execute getSystemAvatarsByType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if an error occurs while retrieving the list of avatars. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SystemAvatars> _callback) throws ApiException {
            return getSystemAvatarsByTypeAsync(type, _callback);
        }
    }

    /**
     * Get system avatars by type
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param type The avatar type. (required)
     * @return GetSystemAvatarsByTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned if an error occurs while retrieving the list of avatars. </td><td>  -  </td></tr>
     </table>
     */
    public GetSystemAvatarsByTypeRequestBuilder getSystemAvatarsByType(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetSystemAvatarsByTypeRequestBuilder(type);
    }
    private okhttp3.Call loadCustomAvatarForProjectOrIssueTypeCall(String type, String entityId, Integer size, Object body, Integer x, Integer y, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (x != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("y", y));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadCustomAvatarForProjectOrIssueTypeValidateBeforeCall(String type, String entityId, Integer size, Object body, Integer x, Integer y, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling loadCustomAvatarForProjectOrIssueType(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling loadCustomAvatarForProjectOrIssueType(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling loadCustomAvatarForProjectOrIssueType(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling loadCustomAvatarForProjectOrIssueType(Async)");
        }

        return loadCustomAvatarForProjectOrIssueTypeCall(type, entityId, size, body, x, y, _callback);

    }


    private ApiResponse<Avatar> loadCustomAvatarForProjectOrIssueTypeWithHttpInfo(String type, String entityId, Integer size, Object body, Integer x, Integer y) throws ApiException {
        okhttp3.Call localVarCall = loadCustomAvatarForProjectOrIssueTypeValidateBeforeCall(type, entityId, size, body, x, y, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call loadCustomAvatarForProjectOrIssueTypeAsync(String type, String entityId, Integer size, Object body, Integer x, Integer y, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadCustomAvatarForProjectOrIssueTypeValidateBeforeCall(type, entityId, size, body, x, y, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LoadCustomAvatarForProjectOrIssueTypeRequestBuilder {
        private final String type;
        private final String entityId;
        private final Integer size;
        private Integer x;
        private Integer y;
        private Object body;

        private LoadCustomAvatarForProjectOrIssueTypeRequestBuilder(String type, String entityId, Integer size) {
            this.type = type;
            this.entityId = entityId;
            this.size = size;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return LoadCustomAvatarForProjectOrIssueTypeRequestBuilder
         */
        public LoadCustomAvatarForProjectOrIssueTypeRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set x
         * @param x The X coordinate of the top-left corner of the crop region. (optional, default to 0)
         * @return LoadCustomAvatarForProjectOrIssueTypeRequestBuilder
         */
        public LoadCustomAvatarForProjectOrIssueTypeRequestBuilder x(Integer x) {
            this.x = x;
            return this;
        }
        
        /**
         * Set y
         * @param y The Y coordinate of the top-left corner of the crop region. (optional, default to 0)
         * @return LoadCustomAvatarForProjectOrIssueTypeRequestBuilder
         */
        public LoadCustomAvatarForProjectOrIssueTypeRequestBuilder y(Integer y) {
            this.y = y;
            return this;
        }
        
        /**
         * Build call for loadCustomAvatarForProjectOrIssueType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return loadCustomAvatarForProjectOrIssueTypeCall(type, entityId, size, body, x, y, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute loadCustomAvatarForProjectOrIssueType request
         * @return Avatar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Avatar execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Avatar> localVarResp = loadCustomAvatarForProjectOrIssueTypeWithHttpInfo(type, entityId, size, body, x, y);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute loadCustomAvatarForProjectOrIssueType request with HTTP info returned
         * @return ApiResponse&lt;Avatar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Avatar> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return loadCustomAvatarForProjectOrIssueTypeWithHttpInfo(type, entityId, size, body, x, y);
        }

        /**
         * Execute loadCustomAvatarForProjectOrIssueType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Avatar> _callback) throws ApiException {
            Object body = buildBodyParams();
            return loadCustomAvatarForProjectOrIssueTypeAsync(type, entityId, size, body, x, y, _callback);
        }
    }

    /**
     * Load avatar
     * Loads a custom avatar for a project or issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](https://dac-static.atlassian.com).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](https://dac-static.atlassian.com) to set it as the issue type&#39;s displayed avatar.  *  [Set project avatar](https://dac-static.atlassian.com) to set it as the project&#39;s displayed avatar.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param type The avatar type. (required)
     * @param entityId The ID of the item the avatar is associated with. (required)
     * @param size The length of each side of the crop region. (required)
     * @param body  (required)
     * @return LoadCustomAvatarForProjectOrIssueTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. </td><td>  -  </td></tr>
     </table>
     */
    public LoadCustomAvatarForProjectOrIssueTypeRequestBuilder loadCustomAvatarForProjectOrIssueType(String type, String entityId, Integer size) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        if (size == null) throw new IllegalArgumentException("\"size\" is required but got null");
        return new LoadCustomAvatarForProjectOrIssueTypeRequestBuilder(type, entityId, size);
    }
}
