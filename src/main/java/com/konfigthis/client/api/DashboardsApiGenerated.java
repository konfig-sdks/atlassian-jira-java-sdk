/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AvailableDashboardGadgetsResponse;
import com.konfigthis.client.model.BulkChangeOwnerDetails;
import com.konfigthis.client.model.BulkEditShareableEntityRequest;
import com.konfigthis.client.model.BulkEditShareableEntityResponse;
import com.konfigthis.client.model.Dashboard;
import com.konfigthis.client.model.DashboardDetails;
import com.konfigthis.client.model.DashboardGadget;
import com.konfigthis.client.model.DashboardGadgetPosition;
import com.konfigthis.client.model.DashboardGadgetResponse;
import com.konfigthis.client.model.DashboardGadgetSettings;
import com.konfigthis.client.model.DashboardGadgetUpdateRequest;
import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.PageBeanDashboard;
import com.konfigthis.client.model.PageOfDashboards;
import com.konfigthis.client.model.PermissionDetails;
import com.konfigthis.client.model.PropertyKeys;
import com.konfigthis.client.model.SharePermission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DashboardsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DashboardsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGadgetToDashboardCall(Long dashboardId, DashboardGadgetSettings dashboardGadgetSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardGadgetSettings;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/gadget"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGadgetToDashboardValidateBeforeCall(Long dashboardId, DashboardGadgetSettings dashboardGadgetSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling addGadgetToDashboard(Async)");
        }

        // verify the required parameter 'dashboardGadgetSettings' is set
        if (dashboardGadgetSettings == null) {
            throw new ApiException("Missing the required parameter 'dashboardGadgetSettings' when calling addGadgetToDashboard(Async)");
        }

        return addGadgetToDashboardCall(dashboardId, dashboardGadgetSettings, _callback);

    }


    private ApiResponse<DashboardGadget> addGadgetToDashboardWithHttpInfo(Long dashboardId, DashboardGadgetSettings dashboardGadgetSettings) throws ApiException {
        okhttp3.Call localVarCall = addGadgetToDashboardValidateBeforeCall(dashboardId, dashboardGadgetSettings, null);
        Type localVarReturnType = new TypeToken<DashboardGadget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGadgetToDashboardAsync(Long dashboardId, DashboardGadgetSettings dashboardGadgetSettings, final ApiCallback<DashboardGadget> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGadgetToDashboardValidateBeforeCall(dashboardId, dashboardGadgetSettings, _callback);
        Type localVarReturnType = new TypeToken<DashboardGadget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGadgetToDashboardRequestBuilder {
        private final Long dashboardId;
        private String title;
        private String color;
        private Boolean ignoreUriAndModuleKeyValidation;
        private String moduleKey;
        private DashboardGadgetPosition position;
        private String uri;

        private AddGadgetToDashboardRequestBuilder(Long dashboardId) {
            this.dashboardId = dashboardId;
        }

        /**
         * Set title
         * @param title The title of the gadget. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set color
         * @param color The color of the gadget. Should be one of &#x60;blue&#x60;, &#x60;red&#x60;, &#x60;yellow&#x60;, &#x60;green&#x60;, &#x60;cyan&#x60;, &#x60;purple&#x60;, &#x60;gray&#x60;, or &#x60;white&#x60;. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set ignoreUriAndModuleKeyValidation
         * @param ignoreUriAndModuleKeyValidation Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn&#39;t installed. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder ignoreUriAndModuleKeyValidation(Boolean ignoreUriAndModuleKeyValidation) {
            this.ignoreUriAndModuleKeyValidation = ignoreUriAndModuleKeyValidation;
            return this;
        }
        
        /**
         * Set moduleKey
         * @param moduleKey The module key of the gadget type. Can&#39;t be provided with &#x60;uri&#x60;. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder moduleKey(String moduleKey) {
            this.moduleKey = moduleKey;
            return this;
        }
        
        /**
         * Set position
         * @param position The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder position(DashboardGadgetPosition position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set uri
         * @param uri The URI of the gadget type. Can&#39;t be provided with &#x60;moduleKey&#x60;. (optional)
         * @return AddGadgetToDashboardRequestBuilder
         */
        public AddGadgetToDashboardRequestBuilder uri(String uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Build call for addGadgetToDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DashboardGadgetSettings dashboardGadgetSettings = buildBodyParams();
            return addGadgetToDashboardCall(dashboardId, dashboardGadgetSettings, _callback);
        }

        private DashboardGadgetSettings buildBodyParams() {
            DashboardGadgetSettings dashboardGadgetSettings = new DashboardGadgetSettings();
            dashboardGadgetSettings.title(this.title);
            dashboardGadgetSettings.color(this.color);
            dashboardGadgetSettings.ignoreUriAndModuleKeyValidation(this.ignoreUriAndModuleKeyValidation);
            dashboardGadgetSettings.moduleKey(this.moduleKey);
            dashboardGadgetSettings.position(this.position);
            dashboardGadgetSettings.uri(this.uri);
            return dashboardGadgetSettings;
        }

        /**
         * Execute addGadgetToDashboard request
         * @return DashboardGadget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public DashboardGadget execute() throws ApiException {
            DashboardGadgetSettings dashboardGadgetSettings = buildBodyParams();
            ApiResponse<DashboardGadget> localVarResp = addGadgetToDashboardWithHttpInfo(dashboardId, dashboardGadgetSettings);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGadgetToDashboard request with HTTP info returned
         * @return ApiResponse&lt;DashboardGadget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DashboardGadget> executeWithHttpInfo() throws ApiException {
            DashboardGadgetSettings dashboardGadgetSettings = buildBodyParams();
            return addGadgetToDashboardWithHttpInfo(dashboardId, dashboardGadgetSettings);
        }

        /**
         * Execute addGadgetToDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DashboardGadget> _callback) throws ApiException {
            DashboardGadgetSettings dashboardGadgetSettings = buildBodyParams();
            return addGadgetToDashboardAsync(dashboardId, dashboardGadgetSettings, _callback);
        }
    }

    /**
     * Add gadget to dashboard
     * Adds a gadget to a dashboard.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param dashboardId The ID of the dashboard. (required)
     * @param dashboardGadgetSettings  (required)
     * @return AddGadgetToDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AddGadgetToDashboardRequestBuilder addGadgetToDashboard(Long dashboardId) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
        return new AddGadgetToDashboardRequestBuilder(dashboardId);
    }
    private okhttp3.Call copyDashboardCall(String id, DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{id}/copy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyDashboardValidateBeforeCall(String id, DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling copyDashboard(Async)");
        }

        // verify the required parameter 'dashboardDetails' is set
        if (dashboardDetails == null) {
            throw new ApiException("Missing the required parameter 'dashboardDetails' when calling copyDashboard(Async)");
        }

        return copyDashboardCall(id, dashboardDetails, _callback);

    }


    private ApiResponse<Dashboard> copyDashboardWithHttpInfo(String id, DashboardDetails dashboardDetails) throws ApiException {
        okhttp3.Call localVarCall = copyDashboardValidateBeforeCall(id, dashboardDetails, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call copyDashboardAsync(String id, DashboardDetails dashboardDetails, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyDashboardValidateBeforeCall(id, dashboardDetails, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CopyDashboardRequestBuilder {
        private final List<SharePermission> editPermissions;
        private final String name;
        private final List<SharePermission> sharePermissions;
        private final String id;
        private String description;

        private CopyDashboardRequestBuilder(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions, String id) {
            this.editPermissions = editPermissions;
            this.name = name;
            this.sharePermissions = sharePermissions;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the dashboard. (optional)
         * @return CopyDashboardRequestBuilder
         */
        public CopyDashboardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for copyDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return copyDashboardCall(id, dashboardDetails, _callback);
        }

        private DashboardDetails buildBodyParams() {
            DashboardDetails dashboardDetails = new DashboardDetails();
            dashboardDetails.description(this.description);
            dashboardDetails.editPermissions(this.editPermissions);
            dashboardDetails.name(this.name);
            dashboardDetails.sharePermissions(this.sharePermissions);
            return dashboardDetails;
        }

        /**
         * Execute copyDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            ApiResponse<Dashboard> localVarResp = copyDashboardWithHttpInfo(id, dashboardDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute copyDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return copyDashboardWithHttpInfo(id, dashboardDetails);
        }

        /**
         * Execute copyDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return copyDashboardAsync(id, dashboardDetails, _callback);
        }
    }

    /**
     * Copy dashboard
     * Copies a dashboard. Any values provided in the &#x60;dashboard&#x60; parameter replace those in the copied dashboard.  **[Permissions](https://dac-static.atlassian.com) required:** None  The dashboard to be copied must be owned by or shared with the user.
     * @param id  (required)
     * @param dashboardDetails Dashboard details. (required)
     * @return CopyDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public CopyDashboardRequestBuilder copyDashboard(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions, String id) throws IllegalArgumentException {
        if (editPermissions == null) throw new IllegalArgumentException("\"editPermissions\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (sharePermissions == null) throw new IllegalArgumentException("\"sharePermissions\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CopyDashboardRequestBuilder(editPermissions, name, sharePermissions, id);
    }
    private okhttp3.Call createDashboardCall(DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDashboardValidateBeforeCall(DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardDetails' is set
        if (dashboardDetails == null) {
            throw new ApiException("Missing the required parameter 'dashboardDetails' when calling createDashboard(Async)");
        }

        return createDashboardCall(dashboardDetails, _callback);

    }


    private ApiResponse<Dashboard> createDashboardWithHttpInfo(DashboardDetails dashboardDetails) throws ApiException {
        okhttp3.Call localVarCall = createDashboardValidateBeforeCall(dashboardDetails, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDashboardAsync(DashboardDetails dashboardDetails, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDashboardValidateBeforeCall(dashboardDetails, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDashboardRequestBuilder {
        private final List<SharePermission> editPermissions;
        private final String name;
        private final List<SharePermission> sharePermissions;
        private String description;

        private CreateDashboardRequestBuilder(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions) {
            this.editPermissions = editPermissions;
            this.name = name;
            this.sharePermissions = sharePermissions;
        }

        /**
         * Set description
         * @param description The description of the dashboard. (optional)
         * @return CreateDashboardRequestBuilder
         */
        public CreateDashboardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return createDashboardCall(dashboardDetails, _callback);
        }

        private DashboardDetails buildBodyParams() {
            DashboardDetails dashboardDetails = new DashboardDetails();
            dashboardDetails.description(this.description);
            dashboardDetails.editPermissions(this.editPermissions);
            dashboardDetails.name(this.name);
            dashboardDetails.sharePermissions(this.sharePermissions);
            return dashboardDetails;
        }

        /**
         * Execute createDashboard request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            ApiResponse<Dashboard> localVarResp = createDashboardWithHttpInfo(dashboardDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDashboard request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return createDashboardWithHttpInfo(dashboardDetails);
        }

        /**
         * Execute createDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return createDashboardAsync(dashboardDetails, _callback);
        }
    }

    /**
     * Create dashboard
     * Creates a dashboard.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param dashboardDetails Dashboard details. (required)
     * @return CreateDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDashboardRequestBuilder createDashboard(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions) throws IllegalArgumentException {
        if (editPermissions == null) throw new IllegalArgumentException("\"editPermissions\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (sharePermissions == null) throw new IllegalArgumentException("\"sharePermissions\" is required but got null");
        return new CreateDashboardRequestBuilder(editPermissions, name, sharePermissions);
    }
    private okhttp3.Call deleteItemPropertyCall(String dashboardId, String itemId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemPropertyValidateBeforeCall(String dashboardId, String itemId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling deleteItemProperty(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteItemProperty(Async)");
        }

        return deleteItemPropertyCall(dashboardId, itemId, propertyKey, _callback);

    }


    private ApiResponse<Object> deleteItemPropertyWithHttpInfo(String dashboardId, String itemId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deleteItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteItemPropertyAsync(String dashboardId, String itemId, String propertyKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteItemPropertyRequestBuilder {
        private final String dashboardId;
        private final String itemId;
        private final String propertyKey;

        private DeleteItemPropertyRequestBuilder(String dashboardId, String itemId, String propertyKey) {
            this.dashboardId = dashboardId;
            this.itemId = itemId;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for deleteItemProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard item property is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteItemPropertyCall(dashboardId, itemId, propertyKey, _callback);
        }


        /**
         * Execute deleteItemProperty request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard item property is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteItemProperty request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard item property is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey);
        }

        /**
         * Execute deleteItemProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard item property is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteItemPropertyAsync(dashboardId, itemId, propertyKey, _callback);
        }
    }

    /**
     * Delete dashboard item property
     * Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. (required)
     * @return DeleteItemPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the dashboard item property is deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemPropertyRequestBuilder deleteItemProperty(String dashboardId, String itemId, String propertyKey) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeleteItemPropertyRequestBuilder(dashboardId, itemId, propertyKey);
    }
    private okhttp3.Call editBulkDashboardsCall(BulkEditShareableEntityRequest bulkEditShareableEntityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkEditShareableEntityRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/bulk/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editBulkDashboardsValidateBeforeCall(BulkEditShareableEntityRequest bulkEditShareableEntityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkEditShareableEntityRequest' is set
        if (bulkEditShareableEntityRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkEditShareableEntityRequest' when calling editBulkDashboards(Async)");
        }

        return editBulkDashboardsCall(bulkEditShareableEntityRequest, _callback);

    }


    private ApiResponse<BulkEditShareableEntityResponse> editBulkDashboardsWithHttpInfo(BulkEditShareableEntityRequest bulkEditShareableEntityRequest) throws ApiException {
        okhttp3.Call localVarCall = editBulkDashboardsValidateBeforeCall(bulkEditShareableEntityRequest, null);
        Type localVarReturnType = new TypeToken<BulkEditShareableEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editBulkDashboardsAsync(BulkEditShareableEntityRequest bulkEditShareableEntityRequest, final ApiCallback<BulkEditShareableEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editBulkDashboardsValidateBeforeCall(bulkEditShareableEntityRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkEditShareableEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditBulkDashboardsRequestBuilder {
        private final String action;
        private final Set<Long> entityIds;
        private BulkChangeOwnerDetails changeOwnerDetails;
        private Boolean extendAdminPermissions;
        private PermissionDetails permissionDetails;

        private EditBulkDashboardsRequestBuilder(String action, Set<Long> entityIds) {
            this.action = action;
            this.entityIds = entityIds;
        }

        /**
         * Set changeOwnerDetails
         * @param changeOwnerDetails The details of change owner action. (optional)
         * @return EditBulkDashboardsRequestBuilder
         */
        public EditBulkDashboardsRequestBuilder changeOwnerDetails(BulkChangeOwnerDetails changeOwnerDetails) {
            this.changeOwnerDetails = changeOwnerDetails;
            return this;
        }
        
        /**
         * Set extendAdminPermissions
         * @param extendAdminPermissions Whether the actions are executed by users with Administer Jira global permission. (optional)
         * @return EditBulkDashboardsRequestBuilder
         */
        public EditBulkDashboardsRequestBuilder extendAdminPermissions(Boolean extendAdminPermissions) {
            this.extendAdminPermissions = extendAdminPermissions;
            return this;
        }
        
        /**
         * Set permissionDetails
         * @param permissionDetails The permission details to be changed. (optional)
         * @return EditBulkDashboardsRequestBuilder
         */
        public EditBulkDashboardsRequestBuilder permissionDetails(PermissionDetails permissionDetails) {
            this.permissionDetails = permissionDetails;
            return this;
        }
        
        /**
         * Build call for editBulkDashboards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkEditShareableEntityRequest bulkEditShareableEntityRequest = buildBodyParams();
            return editBulkDashboardsCall(bulkEditShareableEntityRequest, _callback);
        }

        private BulkEditShareableEntityRequest buildBodyParams() {
            BulkEditShareableEntityRequest bulkEditShareableEntityRequest = new BulkEditShareableEntityRequest();
            if (this.action != null)
            bulkEditShareableEntityRequest.action(BulkEditShareableEntityRequest.ActionEnum.fromValue(this.action));
            bulkEditShareableEntityRequest.changeOwnerDetails(this.changeOwnerDetails);
            bulkEditShareableEntityRequest.entityIds(this.entityIds);
            bulkEditShareableEntityRequest.extendAdminPermissions(this.extendAdminPermissions);
            bulkEditShareableEntityRequest.permissionDetails(this.permissionDetails);
            return bulkEditShareableEntityRequest;
        }

        /**
         * Execute editBulkDashboards request
         * @return BulkEditShareableEntityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public BulkEditShareableEntityResponse execute() throws ApiException {
            BulkEditShareableEntityRequest bulkEditShareableEntityRequest = buildBodyParams();
            ApiResponse<BulkEditShareableEntityResponse> localVarResp = editBulkDashboardsWithHttpInfo(bulkEditShareableEntityRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editBulkDashboards request with HTTP info returned
         * @return ApiResponse&lt;BulkEditShareableEntityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkEditShareableEntityResponse> executeWithHttpInfo() throws ApiException {
            BulkEditShareableEntityRequest bulkEditShareableEntityRequest = buildBodyParams();
            return editBulkDashboardsWithHttpInfo(bulkEditShareableEntityRequest);
        }

        /**
         * Execute editBulkDashboards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkEditShareableEntityResponse> _callback) throws ApiException {
            BulkEditShareableEntityRequest bulkEditShareableEntityRequest = buildBodyParams();
            return editBulkDashboardsAsync(bulkEditShareableEntityRequest, _callback);
        }
    }

    /**
     * Bulk edit dashboards
     * Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.  **[Permissions](https://dac-static.atlassian.com) required:** None  The dashboards to be updated must be owned by the user, or the user must be an administrator.
     * @param bulkEditShareableEntityRequest The details of dashboards being updated in bulk. (required)
     * @return EditBulkDashboardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public EditBulkDashboardsRequestBuilder editBulkDashboards(String action, Set<Long> entityIds) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (entityIds == null) throw new IllegalArgumentException("\"entityIds\" is required but got null");
        return new EditBulkDashboardsRequestBuilder(action, entityIds);
    }
    private okhttp3.Call getAllCall(String filter, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String filter, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return getAllCall(filter, startAt, maxResults, _callback);

    }


    private ApiResponse<PageOfDashboards> getAllWithHttpInfo(String filter, Integer startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(filter, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageOfDashboards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String filter, Integer startAt, Integer maxResults, final ApiCallback<PageOfDashboards> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(filter, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageOfDashboards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String filter;
        private Integer startAt;
        private Integer maxResults;

        private GetAllRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter The filter applied to the list of dashboards. Valid values are:   *  &#x60;favourite&#x60; Returns dashboards the user has marked as favorite.  *  &#x60;my&#x60; Returns dashboards owned by the user. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 20)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(filter, startAt, maxResults, _callback);
        }


        /**
         * Execute getAll request
         * @return PageOfDashboards
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageOfDashboards execute() throws ApiException {
            ApiResponse<PageOfDashboards> localVarResp = getAllWithHttpInfo(filter, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;PageOfDashboards&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageOfDashboards> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(filter, startAt, maxResults);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageOfDashboards> _callback) throws ApiException {
            return getAllAsync(filter, startAt, maxResults, _callback);
        }
    }

    /**
     * Get all dashboards
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<Dashboard> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            ApiResponse<Dashboard> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get dashboard
     * Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @param id The ID of the dashboard. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getDashboardItemPropertyKeysCall(String dashboardId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardItemPropertyKeysValidateBeforeCall(String dashboardId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling getDashboardItemPropertyKeys(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getDashboardItemPropertyKeys(Async)");
        }

        return getDashboardItemPropertyKeysCall(dashboardId, itemId, _callback);

    }


    private ApiResponse<PropertyKeys> getDashboardItemPropertyKeysWithHttpInfo(String dashboardId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = getDashboardItemPropertyKeysValidateBeforeCall(dashboardId, itemId, null);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDashboardItemPropertyKeysAsync(String dashboardId, String itemId, final ApiCallback<PropertyKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardItemPropertyKeysValidateBeforeCall(dashboardId, itemId, _callback);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDashboardItemPropertyKeysRequestBuilder {
        private final String dashboardId;
        private final String itemId;

        private GetDashboardItemPropertyKeysRequestBuilder(String dashboardId, String itemId) {
            this.dashboardId = dashboardId;
            this.itemId = itemId;
        }

        /**
         * Build call for getDashboardItemPropertyKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDashboardItemPropertyKeysCall(dashboardId, itemId, _callback);
        }


        /**
         * Execute getDashboardItemPropertyKeys request
         * @return PropertyKeys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PropertyKeys execute() throws ApiException {
            ApiResponse<PropertyKeys> localVarResp = getDashboardItemPropertyKeysWithHttpInfo(dashboardId, itemId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDashboardItemPropertyKeys request with HTTP info returned
         * @return ApiResponse&lt;PropertyKeys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyKeys> executeWithHttpInfo() throws ApiException {
            return getDashboardItemPropertyKeysWithHttpInfo(dashboardId, itemId);
        }

        /**
         * Execute getDashboardItemPropertyKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyKeys> _callback) throws ApiException {
            return getDashboardItemPropertyKeysAsync(dashboardId, itemId, _callback);
        }
    }

    /**
     * Get dashboard item property keys
     * Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @return GetDashboardItemPropertyKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetDashboardItemPropertyKeysRequestBuilder getDashboardItemPropertyKeys(String dashboardId, String itemId) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        return new GetDashboardItemPropertyKeysRequestBuilder(dashboardId, itemId);
    }
    private okhttp3.Call getItemPropertyCall(String dashboardId, String itemId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemPropertyValidateBeforeCall(String dashboardId, String itemId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling getItemProperty(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getItemProperty(Async)");
        }

        return getItemPropertyCall(dashboardId, itemId, propertyKey, _callback);

    }


    private ApiResponse<EntityProperty> getItemPropertyWithHttpInfo(String dashboardId, String itemId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, null);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getItemPropertyAsync(String dashboardId, String itemId, String propertyKey, final ApiCallback<EntityProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetItemPropertyRequestBuilder {
        private final String dashboardId;
        private final String itemId;
        private final String propertyKey;

        private GetItemPropertyRequestBuilder(String dashboardId, String itemId, String propertyKey) {
            this.dashboardId = dashboardId;
            this.itemId = itemId;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for getItemProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getItemPropertyCall(dashboardId, itemId, propertyKey, _callback);
        }


        /**
         * Execute getItemProperty request
         * @return EntityProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public EntityProperty execute() throws ApiException {
            ApiResponse<EntityProperty> localVarResp = getItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getItemProperty request with HTTP info returned
         * @return ApiResponse&lt;EntityProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityProperty> executeWithHttpInfo() throws ApiException {
            return getItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey);
        }

        /**
         * Execute getItemProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityProperty> _callback) throws ApiException {
            return getItemPropertyAsync(dashboardId, itemId, propertyKey, _callback);
        }
    }

    /**
     * Get dashboard item property
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. (required)
     * @return GetItemPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetItemPropertyRequestBuilder getItemProperty(String dashboardId, String itemId, String propertyKey) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new GetItemPropertyRequestBuilder(dashboardId, itemId, propertyKey);
    }
    private okhttp3.Call listAvailableGadgetsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/gadgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableGadgetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAvailableGadgetsCall(_callback);

    }


    private ApiResponse<AvailableDashboardGadgetsResponse> listAvailableGadgetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAvailableGadgetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AvailableDashboardGadgetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableGadgetsAsync(final ApiCallback<AvailableDashboardGadgetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableGadgetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AvailableDashboardGadgetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableGadgetsRequestBuilder {

        private ListAvailableGadgetsRequestBuilder() {
        }

        /**
         * Build call for listAvailableGadgets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableGadgetsCall(_callback);
        }


        /**
         * Execute listAvailableGadgets request
         * @return AvailableDashboardGadgetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public AvailableDashboardGadgetsResponse execute() throws ApiException {
            ApiResponse<AvailableDashboardGadgetsResponse> localVarResp = listAvailableGadgetsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableGadgets request with HTTP info returned
         * @return ApiResponse&lt;AvailableDashboardGadgetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailableDashboardGadgetsResponse> executeWithHttpInfo() throws ApiException {
            return listAvailableGadgetsWithHttpInfo();
        }

        /**
         * Execute listAvailableGadgets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailableDashboardGadgetsResponse> _callback) throws ApiException {
            return listAvailableGadgetsAsync(_callback);
        }
    }

    /**
     * Get available gadgets
     * Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return ListAvailableGadgetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableGadgetsRequestBuilder listAvailableGadgets() throws IllegalArgumentException {
        return new ListAvailableGadgetsRequestBuilder();
    }
    private okhttp3.Call listGadgetsCall(Long dashboardId, List<String> moduleKey, List<String> uri, List<Long> gadgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/gadget"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moduleKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "moduleKey", moduleKey));
        }

        if (uri != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uri", uri));
        }

        if (gadgetId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "gadgetId", gadgetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGadgetsValidateBeforeCall(Long dashboardId, List<String> moduleKey, List<String> uri, List<Long> gadgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling listGadgets(Async)");
        }

        return listGadgetsCall(dashboardId, moduleKey, uri, gadgetId, _callback);

    }


    private ApiResponse<DashboardGadgetResponse> listGadgetsWithHttpInfo(Long dashboardId, List<String> moduleKey, List<String> uri, List<Long> gadgetId) throws ApiException {
        okhttp3.Call localVarCall = listGadgetsValidateBeforeCall(dashboardId, moduleKey, uri, gadgetId, null);
        Type localVarReturnType = new TypeToken<DashboardGadgetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGadgetsAsync(Long dashboardId, List<String> moduleKey, List<String> uri, List<Long> gadgetId, final ApiCallback<DashboardGadgetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGadgetsValidateBeforeCall(dashboardId, moduleKey, uri, gadgetId, _callback);
        Type localVarReturnType = new TypeToken<DashboardGadgetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGadgetsRequestBuilder {
        private final Long dashboardId;
        private List<String> moduleKey;
        private List<String> uri;
        private List<Long> gadgetId;

        private ListGadgetsRequestBuilder(Long dashboardId) {
            this.dashboardId = dashboardId;
        }

        /**
         * Set moduleKey
         * @param moduleKey The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: &#x60;moduleKey&#x3D;key:one&amp;moduleKey&#x3D;key:two&#x60;. (optional)
         * @return ListGadgetsRequestBuilder
         */
        public ListGadgetsRequestBuilder moduleKey(List<String> moduleKey) {
            this.moduleKey = moduleKey;
            return this;
        }
        
        /**
         * Set uri
         * @param uri The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: &#x60;uri&#x3D;/rest/example/uri/1&amp;uri&#x3D;/rest/example/uri/2&#x60;. (optional)
         * @return ListGadgetsRequestBuilder
         */
        public ListGadgetsRequestBuilder uri(List<String> uri) {
            this.uri = uri;
            return this;
        }
        
        /**
         * Set gadgetId
         * @param gadgetId The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: &#x60;gadgetId&#x3D;10000&amp;gadgetId&#x3D;10001&#x60;. (optional)
         * @return ListGadgetsRequestBuilder
         */
        public ListGadgetsRequestBuilder gadgetId(List<Long> gadgetId) {
            this.gadgetId = gadgetId;
            return this;
        }
        
        /**
         * Build call for listGadgets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGadgetsCall(dashboardId, moduleKey, uri, gadgetId, _callback);
        }


        /**
         * Execute listGadgets request
         * @return DashboardGadgetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public DashboardGadgetResponse execute() throws ApiException {
            ApiResponse<DashboardGadgetResponse> localVarResp = listGadgetsWithHttpInfo(dashboardId, moduleKey, uri, gadgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGadgets request with HTTP info returned
         * @return ApiResponse&lt;DashboardGadgetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DashboardGadgetResponse> executeWithHttpInfo() throws ApiException {
            return listGadgetsWithHttpInfo(dashboardId, moduleKey, uri, gadgetId);
        }

        /**
         * Execute listGadgets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DashboardGadgetResponse> _callback) throws ApiException {
            return listGadgetsAsync(dashboardId, moduleKey, uri, gadgetId, _callback);
        }
    }

    /**
     * Get gadgets
     * Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when &#x60;id&#x60; is set.  *  Gadgets with a module key, when &#x60;moduleKey&#x60; is set.  *  Gadgets from a list of URIs, when &#x60;uri&#x60; is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param dashboardId The ID of the dashboard. (required)
     * @return ListGadgetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public ListGadgetsRequestBuilder listGadgets(Long dashboardId) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
        return new ListGadgetsRequestBuilder(dashboardId);
    }
    private okhttp3.Call removeByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String id;

        private RemoveByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the dashboard is deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete dashboard
     * Deletes a dashboard.  **[Permissions](https://dac-static.atlassian.com) required:** None  The dashboard to be deleted must be owned by the user.
     * @param id The ID of the dashboard. (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the dashboard is deleted. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call removeGadgetFromDashboardCall(Long dashboardId, Long gadgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "gadgetId" + "}", localVarApiClient.escapeString(gadgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGadgetFromDashboardValidateBeforeCall(Long dashboardId, Long gadgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling removeGadgetFromDashboard(Async)");
        }

        // verify the required parameter 'gadgetId' is set
        if (gadgetId == null) {
            throw new ApiException("Missing the required parameter 'gadgetId' when calling removeGadgetFromDashboard(Async)");
        }

        return removeGadgetFromDashboardCall(dashboardId, gadgetId, _callback);

    }


    private ApiResponse<Object> removeGadgetFromDashboardWithHttpInfo(Long dashboardId, Long gadgetId) throws ApiException {
        okhttp3.Call localVarCall = removeGadgetFromDashboardValidateBeforeCall(dashboardId, gadgetId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeGadgetFromDashboardAsync(Long dashboardId, Long gadgetId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGadgetFromDashboardValidateBeforeCall(dashboardId, gadgetId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveGadgetFromDashboardRequestBuilder {
        private final Long dashboardId;
        private final Long gadgetId;

        private RemoveGadgetFromDashboardRequestBuilder(Long dashboardId, Long gadgetId) {
            this.dashboardId = dashboardId;
            this.gadgetId = gadgetId;
        }

        /**
         * Build call for removeGadgetFromDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGadgetFromDashboardCall(dashboardId, gadgetId, _callback);
        }


        /**
         * Execute removeGadgetFromDashboard request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeGadgetFromDashboardWithHttpInfo(dashboardId, gadgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeGadgetFromDashboard request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeGadgetFromDashboardWithHttpInfo(dashboardId, gadgetId);
        }

        /**
         * Execute removeGadgetFromDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeGadgetFromDashboardAsync(dashboardId, gadgetId, _callback);
        }
    }

    /**
     * Remove gadget from dashboard
     * Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param dashboardId The ID of the dashboard. (required)
     * @param gadgetId The ID of the gadget. (required)
     * @return RemoveGadgetFromDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGadgetFromDashboardRequestBuilder removeGadgetFromDashboard(Long dashboardId, Long gadgetId) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
        if (gadgetId == null) throw new IllegalArgumentException("\"gadgetId\" is required but got null");
        return new RemoveGadgetFromDashboardRequestBuilder(dashboardId, gadgetId);
    }
    private okhttp3.Call searchCall(String dashboardName, String accountId, String owner, String groupname, String groupId, Long projectId, String orderBy, Long startAt, Integer maxResults, String status, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dashboardName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dashboardName", dashboardName));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String dashboardName, String accountId, String owner, String groupname, String groupId, Long projectId, String orderBy, Long startAt, Integer maxResults, String status, String expand, final ApiCallback _callback) throws ApiException {
        return searchCall(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand, _callback);

    }


    private ApiResponse<PageBeanDashboard> searchWithHttpInfo(String dashboardName, String accountId, String owner, String groupname, String groupId, Long projectId, String orderBy, Long startAt, Integer maxResults, String status, String expand) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanDashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAsync(String dashboardName, String accountId, String owner, String groupname, String groupId, Long projectId, String orderBy, Long startAt, Integer maxResults, String status, String expand, final ApiCallback<PageBeanDashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanDashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchRequestBuilder {
        private String dashboardName;
        private String accountId;
        private String owner;
        private String groupname;
        private String groupId;
        private Long projectId;
        private String orderBy;
        private Long startAt;
        private Integer maxResults;
        private String status;
        private String expand;

        private SearchRequestBuilder() {
        }

        /**
         * Set dashboardName
         * @param dashboardName String used to perform a case-insensitive partial match with &#x60;name&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder dashboardName(String dashboardName) {
            this.dashboardName = dashboardName;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId User account ID used to return dashboards with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with the &#x60;owner&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set owner
         * @param owner This parameter is deprecated because of privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching &#x60;owner.name&#x60;. This parameter cannot be used with the &#x60;accountId&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder owner(String owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. Group name used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.name&#x60;. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId Group ID used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.groupId&#x60;. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Project ID used to returns dashboards that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;description&#x60; Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.  *  &#x60;favourite_count&#x60; Sorts by dashboard popularity.  *  &#x60;id&#x60; Sorts by dashboard ID.  *  &#x60;is_favourite&#x60; Sorts by whether the dashboard is marked as a favorite.  *  &#x60;name&#x60; Sorts by dashboard name.  *  &#x60;owner&#x60; Sorts by dashboard owner name. (optional, default to name)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set status
         * @param status The status to filter by. It may be active, archived or deleted. (optional, default to active)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;description&#x60; Returns the description of the dashboard.  *  &#x60;owner&#x60; Returns the owner of the dashboard.  *  &#x60;viewUrl&#x60; Returns the URL that is used to view the dashboard.  *  &#x60;favourite&#x60; Returns &#x60;isFavourite&#x60;, an indicator of whether the user has set the dashboard as a favorite.  *  &#x60;favouritedCount&#x60; Returns &#x60;popularity&#x60;, a count of how many users have set this dashboard as a favorite.  *  &#x60;sharePermissions&#x60; Returns details of the share permissions defined for the dashboard.  *  &#x60;editPermissions&#x60; Returns details of the edit permissions defined for the dashboard.  *  &#x60;isWritable&#x60; Returns whether the current user has permission to edit the dashboard. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for search
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCall(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand, _callback);
        }


        /**
         * Execute search request
         * @return PageBeanDashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanDashboard execute() throws ApiException {
            ApiResponse<PageBeanDashboard> localVarResp = searchWithHttpInfo(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute search request with HTTP info returned
         * @return ApiResponse&lt;PageBeanDashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanDashboard> executeWithHttpInfo() throws ApiException {
            return searchWithHttpInfo(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand);
        }

        /**
         * Execute search request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanDashboard> _callback) throws ApiException {
            return searchAsync(dashboardName, accountId, owner, groupname, groupId, projectId, orderBy, startAt, maxResults, status, expand, _callback);
        }
    }

    /**
     * Search for dashboards
     * Returns a [paginated](https://dac-static.atlassian.com) list of dashboards. This operation is similar to [Get dashboards](https://dac-static.atlassian.com) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.
     * @return SearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public SearchRequestBuilder search() throws IllegalArgumentException {
        return new SearchRequestBuilder();
    }
    private okhttp3.Call setItemPropertyCall(String dashboardId, String itemId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setItemPropertyValidateBeforeCall(String dashboardId, String itemId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling setItemProperty(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling setItemProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setItemProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setItemProperty(Async)");
        }

        return setItemPropertyCall(dashboardId, itemId, propertyKey, body, _callback);

    }


    private ApiResponse<Object> setItemPropertyWithHttpInfo(String dashboardId, String itemId, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setItemPropertyAsync(String dashboardId, String itemId, String propertyKey, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setItemPropertyValidateBeforeCall(dashboardId, itemId, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetItemPropertyRequestBuilder {
        private final String dashboardId;
        private final String itemId;
        private final String propertyKey;
        private Object body;

        private SetItemPropertyRequestBuilder(String dashboardId, String itemId, String propertyKey) {
            this.dashboardId = dashboardId;
            this.itemId = itemId;
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (optional)
         * @return SetItemPropertyRequestBuilder
         */
        public SetItemPropertyRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for setItemProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the dashboard item property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the dashboard item property is created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setItemPropertyCall(dashboardId, itemId, propertyKey, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setItemProperty request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the dashboard item property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the dashboard item property is created. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = setItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setItemProperty request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the dashboard item property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the dashboard item property is created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setItemPropertyWithHttpInfo(dashboardId, itemId, propertyKey, body);
        }

        /**
         * Execute setItemProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the dashboard item property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the dashboard item property is created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setItemPropertyAsync(dashboardId, itemId, propertyKey, body, _callback);
        }
    }

    /**
     * Set dashboard item property
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \&quot;config\&quot;, the request body&#39;s JSON must be an object with all keys and values as strings. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return SetItemPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the dashboard item property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the dashboard item property is created. </td><td>  -  </td></tr>
     </table>
     */
    public SetItemPropertyRequestBuilder setItemProperty(String dashboardId, String itemId, String propertyKey) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetItemPropertyRequestBuilder(dashboardId, itemId, propertyKey);
    }
    private okhttp3.Call updateDetailsCall(String id, DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String id, DashboardDetails dashboardDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDetails(Async)");
        }

        // verify the required parameter 'dashboardDetails' is set
        if (dashboardDetails == null) {
            throw new ApiException("Missing the required parameter 'dashboardDetails' when calling updateDetails(Async)");
        }

        return updateDetailsCall(id, dashboardDetails, _callback);

    }


    private ApiResponse<Dashboard> updateDetailsWithHttpInfo(String id, DashboardDetails dashboardDetails) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(id, dashboardDetails, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String id, DashboardDetails dashboardDetails, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(id, dashboardDetails, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final List<SharePermission> editPermissions;
        private final String name;
        private final List<SharePermission> sharePermissions;
        private final String id;
        private String description;

        private UpdateDetailsRequestBuilder(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions, String id) {
            this.editPermissions = editPermissions;
            this.name = name;
            this.sharePermissions = sharePermissions;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the dashboard. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return updateDetailsCall(id, dashboardDetails, _callback);
        }

        private DashboardDetails buildBodyParams() {
            DashboardDetails dashboardDetails = new DashboardDetails();
            dashboardDetails.description(this.description);
            dashboardDetails.editPermissions(this.editPermissions);
            dashboardDetails.name(this.name);
            dashboardDetails.sharePermissions(this.sharePermissions);
            return dashboardDetails;
        }

        /**
         * Execute updateDetails request
         * @return Dashboard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Dashboard execute() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            ApiResponse<Dashboard> localVarResp = updateDetailsWithHttpInfo(id, dashboardDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;Dashboard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Dashboard> executeWithHttpInfo() throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return updateDetailsWithHttpInfo(id, dashboardDetails);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Dashboard> _callback) throws ApiException {
            DashboardDetails dashboardDetails = buildBodyParams();
            return updateDetailsAsync(id, dashboardDetails, _callback);
        }
    }

    /**
     * Update dashboard
     * Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](https://dac-static.atlassian.com) required:** None  The dashboard to be updated must be owned by the user.
     * @param id The ID of the dashboard to update. (required)
     * @param dashboardDetails Replacement dashboard details. (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(List<SharePermission> editPermissions, String name, List<SharePermission> sharePermissions, String id) throws IllegalArgumentException {
        if (editPermissions == null) throw new IllegalArgumentException("\"editPermissions\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (sharePermissions == null) throw new IllegalArgumentException("\"sharePermissions\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(editPermissions, name, sharePermissions, id);
    }
    private okhttp3.Call updateGadgetOnDashboardCall(Long dashboardId, Long gadgetId, DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardGadgetUpdateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}"
            .replace("{" + "dashboardId" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "gadgetId" + "}", localVarApiClient.escapeString(gadgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGadgetOnDashboardValidateBeforeCall(Long dashboardId, Long gadgetId, DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling updateGadgetOnDashboard(Async)");
        }

        // verify the required parameter 'gadgetId' is set
        if (gadgetId == null) {
            throw new ApiException("Missing the required parameter 'gadgetId' when calling updateGadgetOnDashboard(Async)");
        }

        // verify the required parameter 'dashboardGadgetUpdateRequest' is set
        if (dashboardGadgetUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'dashboardGadgetUpdateRequest' when calling updateGadgetOnDashboard(Async)");
        }

        return updateGadgetOnDashboardCall(dashboardId, gadgetId, dashboardGadgetUpdateRequest, _callback);

    }


    private ApiResponse<Object> updateGadgetOnDashboardWithHttpInfo(Long dashboardId, Long gadgetId, DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGadgetOnDashboardValidateBeforeCall(dashboardId, gadgetId, dashboardGadgetUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGadgetOnDashboardAsync(Long dashboardId, Long gadgetId, DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGadgetOnDashboardValidateBeforeCall(dashboardId, gadgetId, dashboardGadgetUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGadgetOnDashboardRequestBuilder {
        private final Long dashboardId;
        private final Long gadgetId;
        private String title;
        private String color;
        private DashboardGadgetPosition position;

        private UpdateGadgetOnDashboardRequestBuilder(Long dashboardId, Long gadgetId) {
            this.dashboardId = dashboardId;
            this.gadgetId = gadgetId;
        }

        /**
         * Set title
         * @param title The title of the gadget. (optional)
         * @return UpdateGadgetOnDashboardRequestBuilder
         */
        public UpdateGadgetOnDashboardRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set color
         * @param color The color of the gadget. Should be one of &#x60;blue&#x60;, &#x60;red&#x60;, &#x60;yellow&#x60;, &#x60;green&#x60;, &#x60;cyan&#x60;, &#x60;purple&#x60;, &#x60;gray&#x60;, or &#x60;white&#x60;. (optional)
         * @return UpdateGadgetOnDashboardRequestBuilder
         */
        public UpdateGadgetOnDashboardRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set position
         * @param position The position of the gadget. (optional)
         * @return UpdateGadgetOnDashboardRequestBuilder
         */
        public UpdateGadgetOnDashboardRequestBuilder position(DashboardGadgetPosition position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for updateGadgetOnDashboard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest = buildBodyParams();
            return updateGadgetOnDashboardCall(dashboardId, gadgetId, dashboardGadgetUpdateRequest, _callback);
        }

        private DashboardGadgetUpdateRequest buildBodyParams() {
            DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest = new DashboardGadgetUpdateRequest();
            dashboardGadgetUpdateRequest.title(this.title);
            dashboardGadgetUpdateRequest.color(this.color);
            dashboardGadgetUpdateRequest.position(this.position);
            return dashboardGadgetUpdateRequest;
        }

        /**
         * Execute updateGadgetOnDashboard request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateGadgetOnDashboardWithHttpInfo(dashboardId, gadgetId, dashboardGadgetUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGadgetOnDashboard request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest = buildBodyParams();
            return updateGadgetOnDashboardWithHttpInfo(dashboardId, gadgetId, dashboardGadgetUpdateRequest);
        }

        /**
         * Execute updateGadgetOnDashboard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest = buildBodyParams();
            return updateGadgetOnDashboardAsync(dashboardId, gadgetId, dashboardGadgetUpdateRequest, _callback);
        }
    }

    /**
     * Update gadget on dashboard
     * Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param dashboardId The ID of the dashboard. (required)
     * @param gadgetId The ID of the gadget. (required)
     * @param dashboardGadgetUpdateRequest  (required)
     * @return UpdateGadgetOnDashboardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGadgetOnDashboardRequestBuilder updateGadgetOnDashboard(Long dashboardId, Long gadgetId) throws IllegalArgumentException {
        if (dashboardId == null) throw new IllegalArgumentException("\"dashboardId\" is required but got null");
        if (gadgetId == null) throw new IllegalArgumentException("\"gadgetId\" is required but got null");
        return new UpdateGadgetOnDashboardRequestBuilder(dashboardId, gadgetId);
    }
}
