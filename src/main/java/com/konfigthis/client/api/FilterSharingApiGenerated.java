/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DefaultShareScope;
import com.konfigthis.client.model.SharePermission;
import com.konfigthis.client.model.SharePermissionInputBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilterSharingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilterSharingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FilterSharingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addSharePermissionCall(Long id, SharePermissionInputBean sharePermissionInputBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharePermissionInputBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/permission"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSharePermissionValidateBeforeCall(Long id, SharePermissionInputBean sharePermissionInputBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addSharePermission(Async)");
        }

        // verify the required parameter 'sharePermissionInputBean' is set
        if (sharePermissionInputBean == null) {
            throw new ApiException("Missing the required parameter 'sharePermissionInputBean' when calling addSharePermission(Async)");
        }

        return addSharePermissionCall(id, sharePermissionInputBean, _callback);

    }


    private ApiResponse<List<SharePermission>> addSharePermissionWithHttpInfo(Long id, SharePermissionInputBean sharePermissionInputBean) throws ApiException {
        okhttp3.Call localVarCall = addSharePermissionValidateBeforeCall(id, sharePermissionInputBean, null);
        Type localVarReturnType = new TypeToken<List<SharePermission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSharePermissionAsync(Long id, SharePermissionInputBean sharePermissionInputBean, final ApiCallback<List<SharePermission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSharePermissionValidateBeforeCall(id, sharePermissionInputBean, _callback);
        Type localVarReturnType = new TypeToken<List<SharePermission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSharePermissionRequestBuilder {
        private final String type;
        private final Long id;
        private String accountId;
        private String groupId;
        private String groupname;
        private String projectId;
        private String projectRoleId;
        private Integer rights;

        private AddSharePermissionRequestBuilder(String type, Long id) {
            this.type = type;
            this.id = id;
        }

        /**
         * Set accountId
         * @param accountId The user account ID that the filter is shared with. For a request, specify the &#x60;accountId&#x60; property for the user. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with &#x60;groupname&#x60;. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set groupname
         * @param groupname The name of the group to share the filter with. Set &#x60;type&#x60; to &#x60;group&#x60;. Please note that the name of a group is mutable, to reliably identify a group use &#x60;groupId&#x60;. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project to share the filter with. Set &#x60;type&#x60; to &#x60;project&#x60;. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder projectId(String projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set projectRoleId
         * @param projectRoleId The ID of the project role to share the filter with. Set &#x60;type&#x60; to &#x60;projectRole&#x60; and the &#x60;projectId&#x60; for the project that the role is in. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder projectRoleId(String projectRoleId) {
            this.projectRoleId = projectRoleId;
            return this;
        }
        
        /**
         * Set rights
         * @param rights The rights for the share permission. (optional)
         * @return AddSharePermissionRequestBuilder
         */
        public AddSharePermissionRequestBuilder rights(Integer rights) {
            this.rights = rights;
            return this;
        }
        
        /**
         * Build call for addSharePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharePermissionInputBean sharePermissionInputBean = buildBodyParams();
            return addSharePermissionCall(id, sharePermissionInputBean, _callback);
        }

        private SharePermissionInputBean buildBodyParams() {
            SharePermissionInputBean sharePermissionInputBean = new SharePermissionInputBean();
            sharePermissionInputBean.accountId(this.accountId);
            sharePermissionInputBean.groupId(this.groupId);
            sharePermissionInputBean.groupname(this.groupname);
            sharePermissionInputBean.projectId(this.projectId);
            sharePermissionInputBean.projectRoleId(this.projectRoleId);
            sharePermissionInputBean.rights(this.rights);
            if (this.type != null)
            sharePermissionInputBean.type(SharePermissionInputBean.TypeEnum.fromValue(this.type));
            return sharePermissionInputBean;
        }

        /**
         * Execute addSharePermission request
         * @return List&lt;SharePermission&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public List<SharePermission> execute() throws ApiException {
            SharePermissionInputBean sharePermissionInputBean = buildBodyParams();
            ApiResponse<List<SharePermission>> localVarResp = addSharePermissionWithHttpInfo(id, sharePermissionInputBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSharePermission request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SharePermission&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SharePermission>> executeWithHttpInfo() throws ApiException {
            SharePermissionInputBean sharePermissionInputBean = buildBodyParams();
            return addSharePermissionWithHttpInfo(id, sharePermissionInputBean);
        }

        /**
         * Execute addSharePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SharePermission>> _callback) throws ApiException {
            SharePermissionInputBean sharePermissionInputBean = buildBodyParams();
            return addSharePermissionAsync(id, sharePermissionInputBean, _callback);
        }
    }

    /**
     * Add share permission
     * Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this operation uses different objects for updating share permissions compared to [Update filter](https://dac-static.atlassian.com).  **[Permissions](https://dac-static.atlassian.com) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     * @param id The ID of the filter. (required)
     * @param sharePermissionInputBean  (required)
     * @return AddSharePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
     </table>
     */
    public AddSharePermissionRequestBuilder addSharePermission(String type, Long id) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddSharePermissionRequestBuilder(type, id);
    }
    private okhttp3.Call deleteSharePermissionCall(Long id, Long permissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/permission/{permissionId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSharePermissionValidateBeforeCall(Long id, Long permissionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSharePermission(Async)");
        }

        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling deleteSharePermission(Async)");
        }

        return deleteSharePermissionCall(id, permissionId, _callback);

    }


    private ApiResponse<Void> deleteSharePermissionWithHttpInfo(Long id, Long permissionId) throws ApiException {
        okhttp3.Call localVarCall = deleteSharePermissionValidateBeforeCall(id, permissionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSharePermissionAsync(Long id, Long permissionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSharePermissionValidateBeforeCall(id, permissionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSharePermissionRequestBuilder {
        private final Long id;
        private final Long permissionId;

        private DeleteSharePermissionRequestBuilder(Long id, Long permissionId) {
            this.id = id;
            this.permissionId = permissionId;
        }

        /**
         * Build call for deleteSharePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not own the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSharePermissionCall(id, permissionId, _callback);
        }


        /**
         * Execute deleteSharePermission request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not own the filter. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSharePermissionWithHttpInfo(id, permissionId);
        }

        /**
         * Execute deleteSharePermission request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not own the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSharePermissionWithHttpInfo(id, permissionId);
        }

        /**
         * Execute deleteSharePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not own the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSharePermissionAsync(id, permissionId, _callback);
        }
    }

    /**
     * Delete share permission
     * Deletes a share permission from a filter.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira and the user must own the filter.
     * @param id The ID of the filter. (required)
     * @param permissionId The ID of the share permission. (required)
     * @return DeleteSharePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not own the filter. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSharePermissionRequestBuilder deleteSharePermission(Long id, Long permissionId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
        return new DeleteSharePermissionRequestBuilder(id, permissionId);
    }
    private okhttp3.Call getDefaultShareScopeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/defaultShareScope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultShareScopeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDefaultShareScopeCall(_callback);

    }


    private ApiResponse<DefaultShareScope> getDefaultShareScopeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDefaultShareScopeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DefaultShareScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultShareScopeAsync(final ApiCallback<DefaultShareScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultShareScopeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DefaultShareScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultShareScopeRequestBuilder {

        private GetDefaultShareScopeRequestBuilder() {
        }

        /**
         * Build call for getDefaultShareScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultShareScopeCall(_callback);
        }


        /**
         * Execute getDefaultShareScope request
         * @return DefaultShareScope
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public DefaultShareScope execute() throws ApiException {
            ApiResponse<DefaultShareScope> localVarResp = getDefaultShareScopeWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultShareScope request with HTTP info returned
         * @return ApiResponse&lt;DefaultShareScope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DefaultShareScope> executeWithHttpInfo() throws ApiException {
            return getDefaultShareScopeWithHttpInfo();
        }

        /**
         * Execute getDefaultShareScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DefaultShareScope> _callback) throws ApiException {
            return getDefaultShareScopeAsync(_callback);
        }
    }

    /**
     * Get default share scope
     * Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @return GetDefaultShareScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultShareScopeRequestBuilder getDefaultShareScope() throws IllegalArgumentException {
        return new GetDefaultShareScopeRequestBuilder();
    }
    private okhttp3.Call getSharePermissionCall(Long id, Long permissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/permission/{permissionId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharePermissionValidateBeforeCall(Long id, Long permissionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSharePermission(Async)");
        }

        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling getSharePermission(Async)");
        }

        return getSharePermissionCall(id, permissionId, _callback);

    }


    private ApiResponse<SharePermission> getSharePermissionWithHttpInfo(Long id, Long permissionId) throws ApiException {
        okhttp3.Call localVarCall = getSharePermissionValidateBeforeCall(id, permissionId, null);
        Type localVarReturnType = new TypeToken<SharePermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharePermissionAsync(Long id, Long permissionId, final ApiCallback<SharePermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharePermissionValidateBeforeCall(id, permissionId, _callback);
        Type localVarReturnType = new TypeToken<SharePermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSharePermissionRequestBuilder {
        private final Long id;
        private final Long permissionId;

        private GetSharePermissionRequestBuilder(Long id, Long permissionId) {
            this.id = id;
            this.permissionId = permissionId;
        }

        /**
         * Build call for getSharePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharePermissionCall(id, permissionId, _callback);
        }


        /**
         * Execute getSharePermission request
         * @return SharePermission
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public SharePermission execute() throws ApiException {
            ApiResponse<SharePermission> localVarResp = getSharePermissionWithHttpInfo(id, permissionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSharePermission request with HTTP info returned
         * @return ApiResponse&lt;SharePermission&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SharePermission> executeWithHttpInfo() throws ApiException {
            return getSharePermissionWithHttpInfo(id, permissionId);
        }

        /**
         * Execute getSharePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SharePermission> _callback) throws ApiException {
            return getSharePermissionAsync(id, permissionId, _callback);
        }
    }

    /**
     * Get share permission
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, a share permission is only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @param permissionId The ID of the share permission. (required)
     * @return GetSharePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
     </table>
     */
    public GetSharePermissionRequestBuilder getSharePermission(Long id, Long permissionId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
        return new GetSharePermissionRequestBuilder(id, permissionId);
    }
    private okhttp3.Call getSharePermissionsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/permission"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharePermissionsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSharePermissions(Async)");
        }

        return getSharePermissionsCall(id, _callback);

    }


    private ApiResponse<List<SharePermission>> getSharePermissionsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getSharePermissionsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<SharePermission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharePermissionsAsync(Long id, final ApiCallback<List<SharePermission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharePermissionsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<SharePermission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSharePermissionsRequestBuilder {
        private final Long id;

        private GetSharePermissionsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getSharePermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharePermissionsCall(id, _callback);
        }


        /**
         * Execute getSharePermissions request
         * @return List&lt;SharePermission&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public List<SharePermission> execute() throws ApiException {
            ApiResponse<List<SharePermission>> localVarResp = getSharePermissionsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSharePermissions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SharePermission&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SharePermission>> executeWithHttpInfo() throws ApiException {
            return getSharePermissionsWithHttpInfo(id);
        }

        /**
         * Execute getSharePermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SharePermission>> _callback) throws ApiException {
            return getSharePermissionsAsync(id, _callback);
        }
    }

    /**
     * Get share permissions
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, share permissions are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @return GetSharePermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
     </table>
     */
    public GetSharePermissionsRequestBuilder getSharePermissions(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetSharePermissionsRequestBuilder(id);
    }
    private okhttp3.Call setDefaultShareScopeCall(DefaultShareScope defaultShareScope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultShareScope;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/defaultShareScope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultShareScopeValidateBeforeCall(DefaultShareScope defaultShareScope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'defaultShareScope' is set
        if (defaultShareScope == null) {
            throw new ApiException("Missing the required parameter 'defaultShareScope' when calling setDefaultShareScope(Async)");
        }

        return setDefaultShareScopeCall(defaultShareScope, _callback);

    }


    private ApiResponse<DefaultShareScope> setDefaultShareScopeWithHttpInfo(DefaultShareScope defaultShareScope) throws ApiException {
        okhttp3.Call localVarCall = setDefaultShareScopeValidateBeforeCall(defaultShareScope, null);
        Type localVarReturnType = new TypeToken<DefaultShareScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultShareScopeAsync(DefaultShareScope defaultShareScope, final ApiCallback<DefaultShareScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultShareScopeValidateBeforeCall(defaultShareScope, _callback);
        Type localVarReturnType = new TypeToken<DefaultShareScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultShareScopeRequestBuilder {
        private final String scope;

        private SetDefaultShareScopeRequestBuilder(String scope) {
            this.scope = scope;
        }

        /**
         * Build call for setDefaultShareScope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if an invalid scope is set. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DefaultShareScope defaultShareScope = buildBodyParams();
            return setDefaultShareScopeCall(defaultShareScope, _callback);
        }

        private DefaultShareScope buildBodyParams() {
            DefaultShareScope defaultShareScope = new DefaultShareScope();
            if (this.scope != null)
            defaultShareScope.scope(DefaultShareScope.ScopeEnum.fromValue(this.scope));
            return defaultShareScope;
        }

        /**
         * Execute setDefaultShareScope request
         * @return DefaultShareScope
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if an invalid scope is set. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public DefaultShareScope execute() throws ApiException {
            DefaultShareScope defaultShareScope = buildBodyParams();
            ApiResponse<DefaultShareScope> localVarResp = setDefaultShareScopeWithHttpInfo(defaultShareScope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultShareScope request with HTTP info returned
         * @return ApiResponse&lt;DefaultShareScope&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if an invalid scope is set. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DefaultShareScope> executeWithHttpInfo() throws ApiException {
            DefaultShareScope defaultShareScope = buildBodyParams();
            return setDefaultShareScopeWithHttpInfo(defaultShareScope);
        }

        /**
         * Execute setDefaultShareScope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if an invalid scope is set. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DefaultShareScope> _callback) throws ApiException {
            DefaultShareScope defaultShareScope = buildBodyParams();
            return setDefaultShareScopeAsync(defaultShareScope, _callback);
        }
    }

    /**
     * Set default share scope
     * Sets the default sharing for new filters and dashboards for a user.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param defaultShareScope  (required)
     * @return SetDefaultShareScopeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if an invalid scope is set. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultShareScopeRequestBuilder setDefaultShareScope(String scope) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        return new SetDefaultShareScopeRequestBuilder(scope);
    }
}
