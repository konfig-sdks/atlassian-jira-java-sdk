/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChangeFilterOwner;
import com.konfigthis.client.model.ColumnItem;
import com.konfigthis.client.model.ColumnRequestBody;
import com.konfigthis.client.model.Filter;
import com.konfigthis.client.model.FilterSubscriptionsList;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageBeanFilterDetails;
import java.util.Set;
import com.konfigthis.client.model.SharePermission;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FiltersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAsFavoriteCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAsFavoriteValidateBeforeCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addAsFavorite(Async)");
        }

        return addAsFavoriteCall(id, expand, _callback);

    }


    private ApiResponse<Filter> addAsFavoriteWithHttpInfo(Long id, String expand) throws ApiException {
        okhttp3.Call localVarCall = addAsFavoriteValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAsFavoriteAsync(Long id, String expand, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAsFavoriteValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAsFavoriteRequestBuilder {
        private final Long id;
        private String expand;

        private AddAsFavoriteRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return AddAsFavoriteRequestBuilder
         */
        public AddAsFavoriteRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for addAsFavorite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addAsFavoriteCall(id, expand, _callback);
        }


        /**
         * Execute addAsFavorite request
         * @return Filter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. </td><td>  -  </td></tr>
         </table>
         */
        public Filter execute() throws ApiException {
            ApiResponse<Filter> localVarResp = addAsFavoriteWithHttpInfo(id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAsFavorite request with HTTP info returned
         * @return ApiResponse&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filter> executeWithHttpInfo() throws ApiException {
            return addAsFavoriteWithHttpInfo(id, expand);
        }

        /**
         * Execute addAsFavorite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filter> _callback) throws ApiException {
            return addAsFavoriteAsync(id, expand, _callback);
        }
    }

    /**
     * Add filter as favorite
     * Add a filter as a favorite for the user.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, the user can only favorite:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @return AddAsFavoriteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. </td><td>  -  </td></tr>
     </table>
     */
    public AddAsFavoriteRequestBuilder addAsFavorite(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddAsFavoriteRequestBuilder(id);
    }
    private okhttp3.Call changeFilterOwnerCall(Long id, ChangeFilterOwner changeFilterOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeFilterOwner;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/owner"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeFilterOwnerValidateBeforeCall(Long id, ChangeFilterOwner changeFilterOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling changeFilterOwner(Async)");
        }

        // verify the required parameter 'changeFilterOwner' is set
        if (changeFilterOwner == null) {
            throw new ApiException("Missing the required parameter 'changeFilterOwner' when calling changeFilterOwner(Async)");
        }

        return changeFilterOwnerCall(id, changeFilterOwner, _callback);

    }


    private ApiResponse<Object> changeFilterOwnerWithHttpInfo(Long id, ChangeFilterOwner changeFilterOwner) throws ApiException {
        okhttp3.Call localVarCall = changeFilterOwnerValidateBeforeCall(id, changeFilterOwner, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changeFilterOwnerAsync(Long id, ChangeFilterOwner changeFilterOwner, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeFilterOwnerValidateBeforeCall(id, changeFilterOwner, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangeFilterOwnerRequestBuilder {
        private final String accountId;
        private final Long id;

        private ChangeFilterOwnerRequestBuilder(String accountId, Long id) {
            this.accountId = accountId;
            this.id = id;
        }

        /**
         * Build call for changeFilterOwner
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the filter or the new owner of the filter is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeFilterOwner changeFilterOwner = buildBodyParams();
            return changeFilterOwnerCall(id, changeFilterOwner, _callback);
        }

        private ChangeFilterOwner buildBodyParams() {
            ChangeFilterOwner changeFilterOwner = new ChangeFilterOwner();
            changeFilterOwner.accountId(this.accountId);
            return changeFilterOwner;
        }

        /**
         * Execute changeFilterOwner request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the filter or the new owner of the filter is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChangeFilterOwner changeFilterOwner = buildBodyParams();
            ApiResponse<Object> localVarResp = changeFilterOwnerWithHttpInfo(id, changeFilterOwner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changeFilterOwner request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the filter or the new owner of the filter is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChangeFilterOwner changeFilterOwner = buildBodyParams();
            return changeFilterOwnerWithHttpInfo(id, changeFilterOwner);
        }

        /**
         * Execute changeFilterOwner request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the filter or the new owner of the filter is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChangeFilterOwner changeFilterOwner = buildBodyParams();
            return changeFilterOwnerAsync(id, changeFilterOwner, _callback);
        }
    }

    /**
     * Change filter owner
     * Changes the owner of the filter.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the filter to update. (required)
     * @param changeFilterOwner The account ID of the new owner of the filter. (required)
     * @return ChangeFilterOwnerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the filter or the new owner of the filter is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeFilterOwnerRequestBuilder changeFilterOwner(String accountId, Long id) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ChangeFilterOwnerRequestBuilder(accountId, id);
    }
    private okhttp3.Call createFilterCall(Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (overrideSharePermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideSharePermissions", overrideSharePermissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFilterValidateBeforeCall(Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling createFilter(Async)");
        }

        return createFilterCall(filter, expand, overrideSharePermissions, _callback);

    }


    private ApiResponse<Filter> createFilterWithHttpInfo(Filter filter, String expand, Boolean overrideSharePermissions) throws ApiException {
        okhttp3.Call localVarCall = createFilterValidateBeforeCall(filter, expand, overrideSharePermissions, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFilterAsync(Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFilterValidateBeforeCall(filter, expand, overrideSharePermissions, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFilterRequestBuilder {
        private final String name;
        private String description;
        private OffsetDateTime approximateLastUsed;
        private List<SharePermission> editPermissions;
        private Boolean favourite;
        private Long favouritedCount;
        private String id;
        private String jql;
        private User owner;
        private URI searchUrl;
        private URI self;
        private List<SharePermission> sharePermissions;
        private UserList sharedUsers;
        private FilterSubscriptionsList subscriptions;
        private URI viewUrl;
        private String expand;
        private Boolean overrideSharePermissions;

        private CreateFilterRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description A description of the filter. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set approximateLastUsed
         * @param approximateLastUsed \\\\[Experimental\\\\] Approximate last used time. Returns the date and time when the filter was last used. Returns &#x60;null&#x60; if the filter hasn&#39;t been used after tracking was enabled. For performance reasons, timestamps aren&#39;t updated in real time and therefore may not be exactly accurate. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder approximateLastUsed(OffsetDateTime approximateLastUsed) {
            this.approximateLastUsed = approximateLastUsed;
            return this;
        }
        
        /**
         * Set editPermissions
         * @param editPermissions The groups and projects that can edit the filter. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder editPermissions(List<SharePermission> editPermissions) {
            this.editPermissions = editPermissions;
            return this;
        }
        
        /**
         * Set favourite
         * @param favourite Whether the filter is selected as a favorite. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder favourite(Boolean favourite) {
            this.favourite = favourite;
            return this;
        }
        
        /**
         * Set favouritedCount
         * @param favouritedCount The count of how many users have selected this filter as a favorite, including the filter owner. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder favouritedCount(Long favouritedCount) {
            this.favouritedCount = favouritedCount;
            return this;
        }
        
        /**
         * Set id
         * @param id The unique identifier for the filter. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set jql
         * @param jql The JQL query for the filter. For example, *project &#x3D; SSP AND issuetype &#x3D; Bug*. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder jql(String jql) {
            this.jql = jql;
            return this;
        }
        
        /**
         * Set owner
         * @param owner The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder owner(User owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set searchUrl
         * @param searchUrl A URL to view the filter results in Jira, using the [Search for issues using JQL](https://dac-static.atlassian.com) operation with the filter&#39;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql&#x3D;project+%3D+SSP+AND+issuetype+%3D+Bug*. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder searchUrl(URI searchUrl) {
            this.searchUrl = searchUrl;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the filter. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set sharePermissions
         * @param sharePermissions The groups and projects that the filter is shared with. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder sharePermissions(List<SharePermission> sharePermissions) {
            this.sharePermissions = sharePermissions;
            return this;
        }
        
        /**
         * Set sharedUsers
         * @param sharedUsers A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder sharedUsers(UserList sharedUsers) {
            this.sharedUsers = sharedUsers;
            return this;
        }
        
        /**
         * Set subscriptions
         * @param subscriptions A paginated list of the users that are subscribed to the filter. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder subscriptions(FilterSubscriptionsList subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }
        
        /**
         * Set viewUrl
         * @param viewUrl A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter&#x3D;10100*. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder viewUrl(URI viewUrl) {
            this.viewUrl = viewUrl;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set overrideSharePermissions
         * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return CreateFilterRequestBuilder
         */
        public CreateFilterRequestBuilder overrideSharePermissions(Boolean overrideSharePermissions) {
            this.overrideSharePermissions = overrideSharePermissions;
            return this;
        }
        
        /**
         * Build call for createFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Filter filter = buildBodyParams();
            return createFilterCall(filter, expand, overrideSharePermissions, _callback);
        }

        private Filter buildBodyParams() {
            Filter filter = new Filter();
            filter.description(this.description);
            filter.approximateLastUsed(this.approximateLastUsed);
            filter.editPermissions(this.editPermissions);
            filter.favourite(this.favourite);
            filter.favouritedCount(this.favouritedCount);
            filter.id(this.id);
            filter.jql(this.jql);
            filter.name(this.name);
            filter.owner(this.owner);
            filter.searchUrl(this.searchUrl);
            filter.self(this.self);
            filter.sharePermissions(this.sharePermissions);
            filter.sharedUsers(this.sharedUsers);
            filter.subscriptions(this.subscriptions);
            filter.viewUrl(this.viewUrl);
            return filter;
        }

        /**
         * Execute createFilter request
         * @return Filter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Filter execute() throws ApiException {
            Filter filter = buildBodyParams();
            ApiResponse<Filter> localVarResp = createFilterWithHttpInfo(filter, expand, overrideSharePermissions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFilter request with HTTP info returned
         * @return ApiResponse&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filter> executeWithHttpInfo() throws ApiException {
            Filter filter = buildBodyParams();
            return createFilterWithHttpInfo(filter, expand, overrideSharePermissions);
        }

        /**
         * Execute createFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filter> _callback) throws ApiException {
            Filter filter = buildBodyParams();
            return createFilterAsync(filter, expand, overrideSharePermissions, _callback);
        }
    }

    /**
     * Create filter
     * Creates a filter. The filter is shared according to the [default share scope](https://dac-static.atlassian.com). The filter is not selected as a favorite.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param filter The filter to create. (required)
     * @return CreateFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFilterRequestBuilder createFilter(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateFilterRequestBuilder(name);
    }
    private okhttp3.Call deleteFilterByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilterByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFilterById(Async)");
        }

        return deleteFilterByIdCall(id, _callback);

    }


    private ApiResponse<Void> deleteFilterByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFilterByIdAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFilterByIdRequestBuilder {
        private final Long id;

        private DeleteFilterByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteFilterById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the user does not have permission to delete the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFilterByIdCall(id, _callback);
        }


        /**
         * Execute deleteFilterById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the user does not have permission to delete the filter. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFilterByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteFilterById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the user does not have permission to delete the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFilterByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteFilterById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the user does not have permission to delete the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFilterByIdAsync(id, _callback);
        }
    }

    /**
     * Delete filter
     * Delete a filter.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the filter to delete. (required)
     * @return DeleteFilterByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the filter is not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the user does not have permission to delete the filter. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFilterByIdRequestBuilder deleteFilterById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteFilterByIdRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(Long id, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (overrideSharePermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideSharePermissions", overrideSharePermissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long id, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, expand, overrideSharePermissions, _callback);

    }


    private ApiResponse<Filter> getByIdWithHttpInfo(Long id, String expand, Boolean overrideSharePermissions) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, expand, overrideSharePermissions, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Long id, String expand, Boolean overrideSharePermissions, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, expand, overrideSharePermissions, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Long id;
        private String expand;
        private Boolean overrideSharePermissions;

        private GetByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set overrideSharePermissions
         * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder overrideSharePermissions(Boolean overrideSharePermissions) {
            this.overrideSharePermissions = overrideSharePermissions;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, expand, overrideSharePermissions, _callback);
        }


        /**
         * Execute getById request
         * @return Filter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Filter execute() throws ApiException {
            ApiResponse<Filter> localVarResp = getByIdWithHttpInfo(id, expand, overrideSharePermissions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filter> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, expand, overrideSharePermissions);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the filter is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filter> _callback) throws ApiException {
            return getByIdAsync(id, expand, overrideSharePermissions, _callback);
        }
    }

    /**
     * Get filter
     * Returns a filter.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, the filter is only returned where it is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.
     * @param id The ID of the filter to return. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the filter is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getFilterColumnsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/columns"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterColumnsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFilterColumns(Async)");
        }

        return getFilterColumnsCall(id, _callback);

    }


    private ApiResponse<List<ColumnItem>> getFilterColumnsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getFilterColumnsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ColumnItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilterColumnsAsync(Long id, final ApiCallback<List<ColumnItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterColumnsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ColumnItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilterColumnsRequestBuilder {
        private final Long id;

        private GetFilterColumnsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getFilterColumns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if a column configuration is not set for the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilterColumnsCall(id, _callback);
        }


        /**
         * Execute getFilterColumns request
         * @return List&lt;ColumnItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if a column configuration is not set for the filter. </td><td>  -  </td></tr>
         </table>
         */
        public List<ColumnItem> execute() throws ApiException {
            ApiResponse<List<ColumnItem>> localVarResp = getFilterColumnsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFilterColumns request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ColumnItem&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if a column configuration is not set for the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ColumnItem>> executeWithHttpInfo() throws ApiException {
            return getFilterColumnsWithHttpInfo(id);
        }

        /**
         * Execute getFilterColumns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if a column configuration is not set for the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ColumnItem>> _callback) throws ApiException {
            return getFilterColumnsAsync(id, _callback);
        }
    }

    /**
     * Get columns
     * Returns the columns configured for a filter. The column configuration is used when the filter&#39;s results are viewed in *List View* with the *Columns* set to *Filter*.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, column details are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @return GetFilterColumnsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the user does not have permission to view the filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if a column configuration is not set for the filter. </td><td>  -  </td></tr>
     </table>
     */
    public GetFilterColumnsRequestBuilder getFilterColumns(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetFilterColumnsRequestBuilder(id);
    }
    private okhttp3.Call getUserFiltersCall(String expand, Boolean includeFavourites, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/my";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (includeFavourites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFavourites", includeFavourites));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFiltersValidateBeforeCall(String expand, Boolean includeFavourites, final ApiCallback _callback) throws ApiException {
        return getUserFiltersCall(expand, includeFavourites, _callback);

    }


    private ApiResponse<List<Filter>> getUserFiltersWithHttpInfo(String expand, Boolean includeFavourites) throws ApiException {
        okhttp3.Call localVarCall = getUserFiltersValidateBeforeCall(expand, includeFavourites, null);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserFiltersAsync(String expand, Boolean includeFavourites, final ApiCallback<List<Filter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFiltersValidateBeforeCall(expand, includeFavourites, _callback);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserFiltersRequestBuilder {
        private String expand;
        private Boolean includeFavourites;

        private GetUserFiltersRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return GetUserFiltersRequestBuilder
         */
        public GetUserFiltersRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set includeFavourites
         * @param includeFavourites Include the user&#39;s favorite filters in the response. (optional, default to false)
         * @return GetUserFiltersRequestBuilder
         */
        public GetUserFiltersRequestBuilder includeFavourites(Boolean includeFavourites) {
            this.includeFavourites = includeFavourites;
            return this;
        }
        
        /**
         * Build call for getUserFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserFiltersCall(expand, includeFavourites, _callback);
        }


        /**
         * Execute getUserFilters request
         * @return List&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public List<Filter> execute() throws ApiException {
            ApiResponse<List<Filter>> localVarResp = getUserFiltersWithHttpInfo(expand, includeFavourites);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserFilters request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Filter&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Filter>> executeWithHttpInfo() throws ApiException {
            return getUserFiltersWithHttpInfo(expand, includeFavourites);
        }

        /**
         * Execute getUserFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Filter>> _callback) throws ApiException {
            return getUserFiltersAsync(expand, includeFavourites, _callback);
        }
    }

    /**
     * Get my filters
     * Returns the filters owned by the user. If &#x60;includeFavourites&#x60; is &#x60;true&#x60;, the user&#39;s visible favorite filters are also returned.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @return GetUserFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserFiltersRequestBuilder getUserFilters() throws IllegalArgumentException {
        return new GetUserFiltersRequestBuilder();
    }
    private okhttp3.Call listFavoriteFiltersCall(String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/favourite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFavoriteFiltersValidateBeforeCall(String expand, final ApiCallback _callback) throws ApiException {
        return listFavoriteFiltersCall(expand, _callback);

    }


    private ApiResponse<List<Filter>> listFavoriteFiltersWithHttpInfo(String expand) throws ApiException {
        okhttp3.Call localVarCall = listFavoriteFiltersValidateBeforeCall(expand, null);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFavoriteFiltersAsync(String expand, final ApiCallback<List<Filter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFavoriteFiltersValidateBeforeCall(expand, _callback);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFavoriteFiltersRequestBuilder {
        private String expand;

        private ListFavoriteFiltersRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return ListFavoriteFiltersRequestBuilder
         */
        public ListFavoriteFiltersRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listFavoriteFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFavoriteFiltersCall(expand, _callback);
        }


        /**
         * Execute listFavoriteFilters request
         * @return List&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public List<Filter> execute() throws ApiException {
            ApiResponse<List<Filter>> localVarResp = listFavoriteFiltersWithHttpInfo(expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFavoriteFilters request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Filter&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Filter>> executeWithHttpInfo() throws ApiException {
            return listFavoriteFiltersWithHttpInfo(expand);
        }

        /**
         * Execute listFavoriteFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Filter>> _callback) throws ApiException {
            return listFavoriteFiltersAsync(expand, _callback);
        }
    }

    /**
     * Get favorite filters
     * Returns the visible favorite filters of the user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** A favorite filter is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     * @return ListFavoriteFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListFavoriteFiltersRequestBuilder listFavoriteFilters() throws IllegalArgumentException {
        return new ListFavoriteFiltersRequestBuilder();
    }
    private okhttp3.Call removeFavoriteCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFavoriteValidateBeforeCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFavorite(Async)");
        }

        return removeFavoriteCall(id, expand, _callback);

    }


    private ApiResponse<Filter> removeFavoriteWithHttpInfo(Long id, String expand) throws ApiException {
        okhttp3.Call localVarCall = removeFavoriteValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFavoriteAsync(Long id, String expand, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFavoriteValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFavoriteRequestBuilder {
        private final Long id;
        private String expand;

        private RemoveFavoriteRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return RemoveFavoriteRequestBuilder
         */
        public RemoveFavoriteRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for removeFavorite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFavoriteCall(id, expand, _callback);
        }


        /**
         * Execute removeFavorite request
         * @return Filter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public Filter execute() throws ApiException {
            ApiResponse<Filter> localVarResp = removeFavoriteWithHttpInfo(id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFavorite request with HTTP info returned
         * @return ApiResponse&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filter> executeWithHttpInfo() throws ApiException {
            return removeFavoriteWithHttpInfo(id, expand);
        }

        /**
         * Execute removeFavorite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filter> _callback) throws ApiException {
            return removeFavoriteAsync(id, expand, _callback);
        }
    }

    /**
     * Remove filter as favorite
     * Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user&#39;s favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param id The ID of the filter. (required)
     * @return RemoveFavoriteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFavoriteRequestBuilder removeFavorite(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveFavoriteRequestBuilder(id);
    }
    private okhttp3.Call resetColumnsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/columns"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetColumnsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetColumns(Async)");
        }

        return resetColumnsCall(id, _callback);

    }


    private ApiResponse<Void> resetColumnsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resetColumnsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resetColumnsAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetColumnsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResetColumnsRequestBuilder {
        private final Long id;

        private ResetColumnsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for resetColumns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetColumnsCall(id, _callback);
        }


        /**
         * Execute resetColumns request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resetColumnsWithHttpInfo(id);
        }

        /**
         * Execute resetColumns request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resetColumnsWithHttpInfo(id);
        }

        /**
         * Execute resetColumns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resetColumnsAsync(id, _callback);
        }
    }

    /**
     * Reset columns
     * Reset the user&#39;s column configuration for the filter to the default.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, columns are only reset for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @return ResetColumnsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ResetColumnsRequestBuilder resetColumns(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ResetColumnsRequestBuilder(id);
    }
    private okhttp3.Call searchCall(String filterName, String accountId, String owner, String groupname, String groupId, Long projectId, Set<Long> id, String orderBy, Long startAt, Integer maxResults, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterName", filterName));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (overrideSharePermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideSharePermissions", overrideSharePermissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String filterName, String accountId, String owner, String groupname, String groupId, Long projectId, Set<Long> id, String orderBy, Long startAt, Integer maxResults, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        return searchCall(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions, _callback);

    }


    private ApiResponse<PageBeanFilterDetails> searchWithHttpInfo(String filterName, String accountId, String owner, String groupname, String groupId, Long projectId, Set<Long> id, String orderBy, Long startAt, Integer maxResults, String expand, Boolean overrideSharePermissions) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions, null);
        Type localVarReturnType = new TypeToken<PageBeanFilterDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAsync(String filterName, String accountId, String owner, String groupname, String groupId, Long projectId, Set<Long> id, String orderBy, Long startAt, Integer maxResults, String expand, Boolean overrideSharePermissions, final ApiCallback<PageBeanFilterDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFilterDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchRequestBuilder {
        private String filterName;
        private String accountId;
        private String owner;
        private String groupname;
        private String groupId;
        private Long projectId;
        private Set<Long> id;
        private String orderBy;
        private Long startAt;
        private Integer maxResults;
        private String expand;
        private Boolean overrideSharePermissions;

        private SearchRequestBuilder() {
        }

        /**
         * Set filterName
         * @param filterName String used to perform a case-insensitive partial match with &#x60;name&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder filterName(String filterName) {
            this.filterName = filterName;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId User account ID used to return filters with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with &#x60;owner&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set owner
         * @param owner This parameter is deprecated because of privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching &#x60;owner.name&#x60;. This parameter cannot be used with &#x60;accountId&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder owner(String owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group. Group name used to returns filters that are shared with a group that matches &#x60;sharePermissions.group.groupname&#x60;. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId Group ID used to returns filters that are shared with a group that matches &#x60;sharePermissions.group.groupId&#x60;. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Project ID used to returns filters that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Do not exceed 200 filter IDs. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;description&#x60; Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.  *  &#x60;favourite_count&#x60; Sorts by the count of how many users have this filter as a favorite.  *  &#x60;is_favourite&#x60; Sorts by whether the filter is marked as a favorite.  *  &#x60;id&#x60; Sorts by filter ID.  *  &#x60;name&#x60; Sorts by filter name.  *  &#x60;owner&#x60; Sorts by the ID of the filter owner.  *  &#x60;is_shared&#x60; Sorts by whether the filter is shared. (optional, default to name)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;description&#x60; Returns the description of the filter.  *  &#x60;favourite&#x60; Returns an indicator of whether the user has set the filter as a favorite.  *  &#x60;favouritedCount&#x60; Returns a count of how many users have set this filter as a favorite.  *  &#x60;jql&#x60; Returns the JQL query that the filter uses.  *  &#x60;owner&#x60; Returns the owner of the filter.  *  &#x60;searchUrl&#x60; Returns a URL to perform the filter&#39;s JQL query.  *  &#x60;sharePermissions&#x60; Returns the share permissions defined for the filter.  *  &#x60;editPermissions&#x60; Returns the edit permissions defined for the filter.  *  &#x60;isWritable&#x60; Returns whether the current user has permission to edit the filter.  *  &#x60;approximateLastUsed&#x60; \\[Experimental\\] Returns the approximate date and time when the filter was last evaluated.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter.  *  &#x60;viewUrl&#x60; Returns a URL to view the filter. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set overrideSharePermissions
         * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder overrideSharePermissions(Boolean overrideSharePermissions) {
            this.overrideSharePermissions = overrideSharePermissions;
            return this;
        }
        
        /**
         * Build call for search
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCall(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions, _callback);
        }


        /**
         * Execute search request
         * @return PageBeanFilterDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFilterDetails execute() throws ApiException {
            ApiResponse<PageBeanFilterDetails> localVarResp = searchWithHttpInfo(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute search request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFilterDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFilterDetails> executeWithHttpInfo() throws ApiException {
            return searchWithHttpInfo(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions);
        }

        /**
         * Execute search request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFilterDetails> _callback) throws ApiException {
            return searchAsync(filterName, accountId, owner, groupname, groupId, projectId, id, orderBy, startAt, maxResults, expand, overrideSharePermissions, _callback);
        }
    }

    /**
     * Search for filters
     * Returns a [paginated](https://dac-static.atlassian.com) list of filters. Use this operation to get:   *  specific filters, by defining &#x60;id&#x60; only.  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, only the following filters that match the query parameters are returned:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @return SearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public SearchRequestBuilder search() throws IllegalArgumentException {
        return new SearchRequestBuilder();
    }
    private okhttp3.Call setColumnsCall(Long id, ColumnRequestBody columnRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = columnRequestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}/columns"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setColumnsValidateBeforeCall(Long id, ColumnRequestBody columnRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setColumns(Async)");
        }

        // verify the required parameter 'columnRequestBody' is set
        if (columnRequestBody == null) {
            throw new ApiException("Missing the required parameter 'columnRequestBody' when calling setColumns(Async)");
        }

        return setColumnsCall(id, columnRequestBody, _callback);

    }


    private ApiResponse<Object> setColumnsWithHttpInfo(Long id, ColumnRequestBody columnRequestBody) throws ApiException {
        okhttp3.Call localVarCall = setColumnsValidateBeforeCall(id, columnRequestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setColumnsAsync(Long id, ColumnRequestBody columnRequestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setColumnsValidateBeforeCall(id, columnRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetColumnsRequestBuilder {
        private final Long id;
        private List<String> columns;

        private SetColumnsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set columns
         * @param columns  (optional)
         * @return SetColumnsRequestBuilder
         */
        public SetColumnsRequestBuilder columns(List<String> columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Build call for setColumns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ColumnRequestBody columnRequestBody = buildBodyParams();
            return setColumnsCall(id, columnRequestBody, _callback);
        }

        private ColumnRequestBody buildBodyParams() {
            ColumnRequestBody columnRequestBody = new ColumnRequestBody();
            columnRequestBody.columns(this.columns);
            return columnRequestBody;
        }

        /**
         * Execute setColumns request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ColumnRequestBody columnRequestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = setColumnsWithHttpInfo(id, columnRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setColumns request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ColumnRequestBody columnRequestBody = buildBodyParams();
            return setColumnsWithHttpInfo(id, columnRequestBody);
        }

        /**
         * Execute setColumns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ColumnRequestBody columnRequestBody = buildBodyParams();
            return setColumnsAsync(id, columnRequestBody, _callback);
        }
    }

    /**
     * Set columns
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](https://dac-static.atlassian.com) to get the list fields in Jira. A navigable field has &#x60;navigable&#x60; set to &#x60;true&#x60;.  The parameters for this resource are expressed as HTML form data. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns&#x60;  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, columns are only set for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     * @param id The ID of the filter. (required)
     * @param columnRequestBody The IDs of the fields to set as columns. In the form data, specify each field as &#x60;columns&#x3D;id&#x60;, where &#x60;id&#x60; is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-&lt;ver&gt;-field-get)). For example, &#x60;columns&#x3D;summary&#x60;. (required)
     * @return SetColumnsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the requesting user is not an owner of the filter. </td><td>  -  </td></tr>
     </table>
     */
    public SetColumnsRequestBuilder setColumns(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SetColumnsRequestBuilder(id);
    }
    private okhttp3.Call updateFilterByIdCall(Long id, Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/rest/api/3/filter/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (overrideSharePermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideSharePermissions", overrideSharePermissions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterByIdValidateBeforeCall(Long id, Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFilterById(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling updateFilterById(Async)");
        }

        return updateFilterByIdCall(id, filter, expand, overrideSharePermissions, _callback);

    }


    private ApiResponse<Filter> updateFilterByIdWithHttpInfo(Long id, Filter filter, String expand, Boolean overrideSharePermissions) throws ApiException {
        okhttp3.Call localVarCall = updateFilterByIdValidateBeforeCall(id, filter, expand, overrideSharePermissions, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFilterByIdAsync(Long id, Filter filter, String expand, Boolean overrideSharePermissions, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFilterByIdValidateBeforeCall(id, filter, expand, overrideSharePermissions, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFilterByIdRequestBuilder {
        private final String name;
        private final Long id;
        private String description;
        private OffsetDateTime approximateLastUsed;
        private List<SharePermission> editPermissions;
        private Boolean favourite;
        private Long favouritedCount;
        private String id;
        private String jql;
        private User owner;
        private URI searchUrl;
        private URI self;
        private List<SharePermission> sharePermissions;
        private UserList sharedUsers;
        private FilterSubscriptionsList subscriptions;
        private URI viewUrl;
        private String expand;
        private Boolean overrideSharePermissions;

        private UpdateFilterByIdRequestBuilder(String name, Long id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set description
         * @param description A description of the filter. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set approximateLastUsed
         * @param approximateLastUsed \\\\[Experimental\\\\] Approximate last used time. Returns the date and time when the filter was last used. Returns &#x60;null&#x60; if the filter hasn&#39;t been used after tracking was enabled. For performance reasons, timestamps aren&#39;t updated in real time and therefore may not be exactly accurate. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder approximateLastUsed(OffsetDateTime approximateLastUsed) {
            this.approximateLastUsed = approximateLastUsed;
            return this;
        }
        
        /**
         * Set editPermissions
         * @param editPermissions The groups and projects that can edit the filter. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder editPermissions(List<SharePermission> editPermissions) {
            this.editPermissions = editPermissions;
            return this;
        }
        
        /**
         * Set favourite
         * @param favourite Whether the filter is selected as a favorite. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder favourite(Boolean favourite) {
            this.favourite = favourite;
            return this;
        }
        
        /**
         * Set favouritedCount
         * @param favouritedCount The count of how many users have selected this filter as a favorite, including the filter owner. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder favouritedCount(Long favouritedCount) {
            this.favouritedCount = favouritedCount;
            return this;
        }
        
        /**
         * Set id
         * @param id The unique identifier for the filter. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set jql
         * @param jql The JQL query for the filter. For example, *project &#x3D; SSP AND issuetype &#x3D; Bug*. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder jql(String jql) {
            this.jql = jql;
            return this;
        }
        
        /**
         * Set owner
         * @param owner The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder owner(User owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set searchUrl
         * @param searchUrl A URL to view the filter results in Jira, using the [Search for issues using JQL](https://dac-static.atlassian.com) operation with the filter&#39;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql&#x3D;project+%3D+SSP+AND+issuetype+%3D+Bug*. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder searchUrl(URI searchUrl) {
            this.searchUrl = searchUrl;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the filter. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set sharePermissions
         * @param sharePermissions The groups and projects that the filter is shared with. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder sharePermissions(List<SharePermission> sharePermissions) {
            this.sharePermissions = sharePermissions;
            return this;
        }
        
        /**
         * Set sharedUsers
         * @param sharedUsers A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder sharedUsers(UserList sharedUsers) {
            this.sharedUsers = sharedUsers;
            return this;
        }
        
        /**
         * Set subscriptions
         * @param subscriptions A paginated list of the users that are subscribed to the filter. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder subscriptions(FilterSubscriptionsList subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }
        
        /**
         * Set viewUrl
         * @param viewUrl A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter&#x3D;10100*. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder viewUrl(URI viewUrl) {
            this.viewUrl = viewUrl;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set overrideSharePermissions
         * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return UpdateFilterByIdRequestBuilder
         */
        public UpdateFilterByIdRequestBuilder overrideSharePermissions(Boolean overrideSharePermissions) {
            this.overrideSharePermissions = overrideSharePermissions;
            return this;
        }
        
        /**
         * Build call for updateFilterById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Filter filter = buildBodyParams();
            return updateFilterByIdCall(id, filter, expand, overrideSharePermissions, _callback);
        }

        private Filter buildBodyParams() {
            Filter filter = new Filter();
            filter.description(this.description);
            filter.approximateLastUsed(this.approximateLastUsed);
            filter.editPermissions(this.editPermissions);
            filter.favourite(this.favourite);
            filter.favouritedCount(this.favouritedCount);
            filter.id(this.id);
            filter.jql(this.jql);
            filter.name(this.name);
            filter.owner(this.owner);
            filter.searchUrl(this.searchUrl);
            filter.self(this.self);
            filter.sharePermissions(this.sharePermissions);
            filter.sharedUsers(this.sharedUsers);
            filter.subscriptions(this.subscriptions);
            filter.viewUrl(this.viewUrl);
            return filter;
        }

        /**
         * Execute updateFilterById request
         * @return Filter
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Filter execute() throws ApiException {
            Filter filter = buildBodyParams();
            ApiResponse<Filter> localVarResp = updateFilterByIdWithHttpInfo(id, filter, expand, overrideSharePermissions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFilterById request with HTTP info returned
         * @return ApiResponse&lt;Filter&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filter> executeWithHttpInfo() throws ApiException {
            Filter filter = buildBodyParams();
            return updateFilterByIdWithHttpInfo(id, filter, expand, overrideSharePermissions);
        }

        /**
         * Execute updateFilterById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filter> _callback) throws ApiException {
            Filter filter = buildBodyParams();
            return updateFilterByIdAsync(id, filter, expand, overrideSharePermissions, _callback);
        }
    }

    /**
     * Update filter
     * Updates a filter. Use this operation to update a filter&#39;s name, description, JQL, or sharing.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however the user must own the filter.
     * @param id The ID of the filter to update. (required)
     * @param filter The filter to update. (required)
     * @return UpdateFilterByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFilterByIdRequestBuilder updateFilterById(String name, Long id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateFilterByIdRequestBuilder(name, id);
    }
}
