/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddGroupBean;
import com.konfigthis.client.model.FoundGroups;
import com.konfigthis.client.model.Group;
import com.konfigthis.client.model.PageBeanGroupDetails;
import com.konfigthis.client.model.PageBeanUserDetails;
import java.util.Set;
import com.konfigthis.client.model.UpdateUserToGroupBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserToGroupCall(Map<String, Object> requestBody, String groupname, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/group/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToGroupValidateBeforeCall(Map<String, Object> requestBody, String groupname, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addUserToGroup(Async)");
        }

        return addUserToGroupCall(requestBody, groupname, groupId, _callback);

    }


    private ApiResponse<Group> addUserToGroupWithHttpInfo(Map<String, Object> requestBody, String groupname, String groupId) throws ApiException {
        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(requestBody, groupname, groupId, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserToGroupAsync(Map<String, Object> requestBody, String groupname, String groupId, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(requestBody, groupname, groupId, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserToGroupRequestBuilder {
        private String accountId;
        private String name;
        private String groupname;
        private String groupId;

        private AddUserToGroupRequestBuilder() {
        }

        /**
         * Set accountId
         * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return AddUserToGroupRequestBuilder
         */
        public AddUserToGroupRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set name
         * @param name This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return AddUserToGroupRequestBuilder
         */
        public AddUserToGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return AddUserToGroupRequestBuilder
         */
        public AddUserToGroupRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
         * @return AddUserToGroupRequestBuilder
         */
        public AddUserToGroupRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for addUserToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addUserToGroupCall(requestBody, groupname, groupId, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("accountId", this.accountId);
            requestBody.put("name", this.name);
            return requestBody;
        }

        /**
         * Execute addUserToGroup request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Group> localVarResp = addUserToGroupWithHttpInfo(requestBody, groupname, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserToGroup request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addUserToGroupWithHttpInfo(requestBody, groupname, groupId);
        }

        /**
         * Execute addUserToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addUserToGroupAsync(requestBody, groupname, groupId, _callback);
        }
    }

    /**
     * Add user to group
     * Adds a user to a group.  **[Permissions](https://dac-static.atlassian.com) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param requestBody The user to add to the group. (required)
     * @return AddUserToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserToGroupRequestBuilder addUserToGroup() throws IllegalArgumentException {
        return new AddUserToGroupRequestBuilder();
    }
    private okhttp3.Call createGroupCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createGroup(Async)");
        }

        return createGroupCall(requestBody, _callback);

    }


    private ApiResponse<Group> createGroupWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGroupAsync(Map<String, Object> requestBody, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateGroupRequestBuilder {
        private final String name;

        private CreateGroupRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if group name is not specified or the group name is in use. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createGroupCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("name", this.name);
            return requestBody;
        }

        /**
         * Execute createGroup request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if group name is not specified or the group name is in use. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public Group execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Group> localVarResp = createGroupWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createGroup request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if group name is not specified or the group name is in use. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createGroupWithHttpInfo(requestBody);
        }

        /**
         * Execute createGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if group name is not specified or the group name is in use. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createGroupAsync(requestBody, _callback);
        }
    }

    /**
     * Create group
     * Creates a group.  **[Permissions](https://dac-static.atlassian.com) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param requestBody The name of the group. (required)
     * @return CreateGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if group name is not specified or the group name is in use. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupRequestBuilder createGroup(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateGroupRequestBuilder(name);
    }
    private okhttp3.Call findMatchingGroupsCall(String accountId, String query, List<String> exclude, List<String> excludeId, Integer maxResults, Boolean caseInsensitive, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/groups/picker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (excludeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeId", excludeId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (caseInsensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseInsensitive", caseInsensitive));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findMatchingGroupsValidateBeforeCall(String accountId, String query, List<String> exclude, List<String> excludeId, Integer maxResults, Boolean caseInsensitive, String userName, final ApiCallback _callback) throws ApiException {
        return findMatchingGroupsCall(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName, _callback);

    }


    private ApiResponse<FoundGroups> findMatchingGroupsWithHttpInfo(String accountId, String query, List<String> exclude, List<String> excludeId, Integer maxResults, Boolean caseInsensitive, String userName) throws ApiException {
        okhttp3.Call localVarCall = findMatchingGroupsValidateBeforeCall(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName, null);
        Type localVarReturnType = new TypeToken<FoundGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findMatchingGroupsAsync(String accountId, String query, List<String> exclude, List<String> excludeId, Integer maxResults, Boolean caseInsensitive, String userName, final ApiCallback<FoundGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = findMatchingGroupsValidateBeforeCall(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName, _callback);
        Type localVarReturnType = new TypeToken<FoundGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindMatchingGroupsRequestBuilder {
        private String accountId;
        private String query;
        private List<String> exclude;
        private List<String> excludeId;
        private Integer maxResults;
        private Boolean caseInsensitive;
        private String userName;

        private FindMatchingGroupsRequestBuilder() {
        }

        /**
         * Set accountId
         * @param accountId This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](https://dac-static.atlassian.com). (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set query
         * @param query The string to find in group names. (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude As a group&#39;s name can change, use of &#x60;excludeGroupIds&#x60; is recommended to identify a group.   A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, &#x60;exclude&#x3D;group1&amp;exclude&#x3D;group2&#x60;. This parameter cannot be used with the &#x60;excludeGroupIds&#x60; parameter. (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder exclude(List<String> exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set excludeId
         * @param excludeId A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, &#x60;excludeId&#x3D;group1-id&amp;excludeId&#x3D;group2-id&#x60;. This parameter cannot be used with the &#x60;excludeGroups&#x60; parameter. (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder excludeId(List<String> excludeId) {
            this.excludeId = excludeId;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property &#x60;jira.ajax.autocomplete.limit&#x60;. (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set caseInsensitive
         * @param caseInsensitive Whether the search for groups should be case insensitive. (optional, default to false)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder caseInsensitive(Boolean caseInsensitive) {
            this.caseInsensitive = caseInsensitive;
            return this;
        }
        
        /**
         * Set userName
         * @param userName This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindMatchingGroupsRequestBuilder
         */
        public FindMatchingGroupsRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Build call for findMatchingGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findMatchingGroupsCall(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName, _callback);
        }


        /**
         * Execute findMatchingGroups request
         * @return FoundGroups
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public FoundGroups execute() throws ApiException {
            ApiResponse<FoundGroups> localVarResp = findMatchingGroupsWithHttpInfo(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findMatchingGroups request with HTTP info returned
         * @return ApiResponse&lt;FoundGroups&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FoundGroups> executeWithHttpInfo() throws ApiException {
            return findMatchingGroupsWithHttpInfo(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName);
        }

        /**
         * Execute findMatchingGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FoundGroups> _callback) throws ApiException {
            return findMatchingGroupsAsync(accountId, query, exclude, excludeId, maxResults, caseInsensitive, userName, _callback);
        }
    }

    /**
     * Find groups
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the &#x60;html&#x60; field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     * @return FindMatchingGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public FindMatchingGroupsRequestBuilder findMatchingGroups() throws IllegalArgumentException {
        return new FindMatchingGroupsRequestBuilder();
    }
    private okhttp3.Call getGroupMembersCall(String groupname, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMembersValidateBeforeCall(String groupname, String groupId, String expand, final ApiCallback _callback) throws ApiException {
        return getGroupMembersCall(groupname, groupId, expand, _callback);

    }


    private ApiResponse<Group> getGroupMembersWithHttpInfo(String groupname, String groupId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getGroupMembersValidateBeforeCall(groupname, groupId, expand, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupMembersAsync(String groupname, String groupId, String expand, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupMembersValidateBeforeCall(groupname, groupId, expand, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupMembersRequestBuilder {
        private String groupname;
        private String groupId;
        private String expand;

        private GetGroupMembersRequestBuilder() {
        }

        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return GetGroupMembersRequestBuilder
         */
        public GetGroupMembersRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
         * @return GetGroupMembersRequestBuilder
         */
        public GetGroupMembersRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set expand
         * @param expand List of fields to expand. (optional)
         * @return GetGroupMembersRequestBuilder
         */
        public GetGroupMembersRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getGroupMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupMembersCall(groupname, groupId, expand, _callback);
        }


        /**
         * Execute getGroupMembers request
         * @return Group
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Group execute() throws ApiException {
            ApiResponse<Group> localVarResp = getGroupMembersWithHttpInfo(groupname, groupId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupMembers request with HTTP info returned
         * @return ApiResponse&lt;Group&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Group> executeWithHttpInfo() throws ApiException {
            return getGroupMembersWithHttpInfo(groupname, groupId, expand);
        }

        /**
         * Execute getGroupMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Group> _callback) throws ApiException {
            return getGroupMembersAsync(groupname, groupId, expand, _callback);
        }
    }

    /**
     * Get group
     * This operation is deprecated, use [&#x60;group/member&#x60;](https://dac-static.atlassian.com).  Returns all users in a group.  **[Permissions](https://dac-static.atlassian.com) required:** either of:   *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetGroupMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetGroupMembersRequestBuilder getGroupMembers() throws IllegalArgumentException {
        return new GetGroupMembersRequestBuilder();
    }
    private okhttp3.Call getGroupMembers_0Call(String groupname, String groupId, Boolean includeInactiveUsers, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/group/member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (includeInactiveUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactiveUsers", includeInactiveUsers));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMembers_0ValidateBeforeCall(String groupname, String groupId, Boolean includeInactiveUsers, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return getGroupMembers_0Call(groupname, groupId, includeInactiveUsers, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanUserDetails> getGroupMembers_0WithHttpInfo(String groupname, String groupId, Boolean includeInactiveUsers, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getGroupMembers_0ValidateBeforeCall(groupname, groupId, includeInactiveUsers, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanUserDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupMembers_0Async(String groupname, String groupId, Boolean includeInactiveUsers, Long startAt, Integer maxResults, final ApiCallback<PageBeanUserDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupMembers_0ValidateBeforeCall(groupname, groupId, includeInactiveUsers, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanUserDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupMembers0RequestBuilder {
        private String groupname;
        private String groupId;
        private Boolean includeInactiveUsers;
        private Long startAt;
        private Integer maxResults;

        private GetGroupMembers0RequestBuilder() {
        }

        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return GetGroupMembers0RequestBuilder
         */
        public GetGroupMembers0RequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
         * @return GetGroupMembers0RequestBuilder
         */
        public GetGroupMembers0RequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set includeInactiveUsers
         * @param includeInactiveUsers Include inactive users. (optional, default to false)
         * @return GetGroupMembers0RequestBuilder
         */
        public GetGroupMembers0RequestBuilder includeInactiveUsers(Boolean includeInactiveUsers) {
            this.includeInactiveUsers = includeInactiveUsers;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetGroupMembers0RequestBuilder
         */
        public GetGroupMembers0RequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetGroupMembers0RequestBuilder
         */
        public GetGroupMembers0RequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getGroupMembers_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupMembers_0Call(groupname, groupId, includeInactiveUsers, startAt, maxResults, _callback);
        }


        /**
         * Execute getGroupMembers_0 request
         * @return PageBeanUserDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanUserDetails execute() throws ApiException {
            ApiResponse<PageBeanUserDetails> localVarResp = getGroupMembers_0WithHttpInfo(groupname, groupId, includeInactiveUsers, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupMembers_0 request with HTTP info returned
         * @return ApiResponse&lt;PageBeanUserDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanUserDetails> executeWithHttpInfo() throws ApiException {
            return getGroupMembers_0WithHttpInfo(groupname, groupId, includeInactiveUsers, startAt, maxResults);
        }

        /**
         * Execute getGroupMembers_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanUserDetails> _callback) throws ApiException {
            return getGroupMembers_0Async(groupname, groupId, includeInactiveUsers, startAt, maxResults, _callback);
        }
    }

    /**
     * Get users from group
     * Returns a [paginated](https://dac-static.atlassian.com) list of all users in a group.  Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.  **[Permissions](https://dac-static.atlassian.com) required:** either of:   *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetGroupMembers0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the calling user does not have the Administer Jira global permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupMembers0RequestBuilder getGroupMembers_0() throws IllegalArgumentException {
        return new GetGroupMembers0RequestBuilder();
    }
    private okhttp3.Call getPaginatedListCall(Long startAt, Integer maxResults, Set<String> groupId, Set<String> groupName, String accessType, String applicationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/group/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (groupName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupName", groupName));
        }

        if (accessType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessType", accessType));
        }

        if (applicationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationKey", applicationKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaginatedListValidateBeforeCall(Long startAt, Integer maxResults, Set<String> groupId, Set<String> groupName, String accessType, String applicationKey, final ApiCallback _callback) throws ApiException {
        return getPaginatedListCall(startAt, maxResults, groupId, groupName, accessType, applicationKey, _callback);

    }


    private ApiResponse<PageBeanGroupDetails> getPaginatedListWithHttpInfo(Long startAt, Integer maxResults, Set<String> groupId, Set<String> groupName, String accessType, String applicationKey) throws ApiException {
        okhttp3.Call localVarCall = getPaginatedListValidateBeforeCall(startAt, maxResults, groupId, groupName, accessType, applicationKey, null);
        Type localVarReturnType = new TypeToken<PageBeanGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaginatedListAsync(Long startAt, Integer maxResults, Set<String> groupId, Set<String> groupName, String accessType, String applicationKey, final ApiCallback<PageBeanGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaginatedListValidateBeforeCall(startAt, maxResults, groupId, groupName, accessType, applicationKey, _callback);
        Type localVarReturnType = new TypeToken<PageBeanGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaginatedListRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<String> groupId;
        private Set<String> groupName;
        private String accessType;
        private String applicationKey;

        private GetPaginatedListRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of a group. To specify multiple IDs, pass multiple &#x60;groupId&#x60; parameters. For example, &#x60;groupId&#x3D;5b10a2844c20165700ede21g&amp;groupId&#x3D;5b10ac8d82e05b22cc7d4ef5&#x60;. (optional)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder groupId(Set<String> groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set groupName
         * @param groupName The name of a group. To specify multiple names, pass multiple &#x60;groupName&#x60; parameters. For example, &#x60;groupName&#x3D;administrators&amp;groupName&#x3D;jira-software-users&#x60;. (optional)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder groupName(Set<String> groupName) {
            this.groupName = groupName;
            return this;
        }
        
        /**
         * Set accessType
         * @param accessType The access level of a group. Valid values: &#39;site-admin&#39;, &#39;admin&#39;, &#39;user&#39;. (optional)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder accessType(String accessType) {
            this.accessType = accessType;
            return this;
        }
        
        /**
         * Set applicationKey
         * @param applicationKey The application key of the product user groups to search for. Valid values: &#39;jira-servicedesk&#39;, &#39;jira-software&#39;, &#39;jira-product-discovery&#39;, &#39;jira-core&#39;. (optional)
         * @return GetPaginatedListRequestBuilder
         */
        public GetPaginatedListRequestBuilder applicationKey(String applicationKey) {
            this.applicationKey = applicationKey;
            return this;
        }
        
        /**
         * Build call for getPaginatedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaginatedListCall(startAt, maxResults, groupId, groupName, accessType, applicationKey, _callback);
        }


        /**
         * Execute getPaginatedList request
         * @return PageBeanGroupDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanGroupDetails execute() throws ApiException {
            ApiResponse<PageBeanGroupDetails> localVarResp = getPaginatedListWithHttpInfo(startAt, maxResults, groupId, groupName, accessType, applicationKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaginatedList request with HTTP info returned
         * @return ApiResponse&lt;PageBeanGroupDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanGroupDetails> executeWithHttpInfo() throws ApiException {
            return getPaginatedListWithHttpInfo(startAt, maxResults, groupId, groupName, accessType, applicationKey);
        }

        /**
         * Execute getPaginatedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanGroupDetails> _callback) throws ApiException {
            return getPaginatedListAsync(startAt, maxResults, groupId, groupName, accessType, applicationKey, _callback);
        }
    }

    /**
     * Bulk get groups
     * Returns a [paginated](https://dac-static.atlassian.com) list of groups.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetPaginatedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaginatedListRequestBuilder getPaginatedList() throws IllegalArgumentException {
        return new GetPaginatedListRequestBuilder();
    }
    private okhttp3.Call removeGroupCall(String groupname, String groupId, String swapGroup, String swapGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (swapGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("swapGroup", swapGroup));
        }

        if (swapGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("swapGroupId", swapGroupId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGroupValidateBeforeCall(String groupname, String groupId, String swapGroup, String swapGroupId, final ApiCallback _callback) throws ApiException {
        return removeGroupCall(groupname, groupId, swapGroup, swapGroupId, _callback);

    }


    private ApiResponse<Void> removeGroupWithHttpInfo(String groupname, String groupId, String swapGroup, String swapGroupId) throws ApiException {
        okhttp3.Call localVarCall = removeGroupValidateBeforeCall(groupname, groupId, swapGroup, swapGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeGroupAsync(String groupname, String groupId, String swapGroup, String swapGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGroupValidateBeforeCall(groupname, groupId, swapGroup, swapGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveGroupRequestBuilder {
        private String groupname;
        private String groupId;
        private String swapGroup;
        private String swapGroupId;

        private RemoveGroupRequestBuilder() {
        }

        /**
         * Set groupname
         * @param groupname  (optional)
         * @return RemoveGroupRequestBuilder
         */
        public RemoveGroupRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
         * @return RemoveGroupRequestBuilder
         */
        public RemoveGroupRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set swapGroup
         * @param swapGroup As a group&#39;s name can change, use of &#x60;swapGroupId&#x60; is recommended to identify a group.   The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the &#x60;swapGroupId&#x60; parameter. (optional)
         * @return RemoveGroupRequestBuilder
         */
        public RemoveGroupRequestBuilder swapGroup(String swapGroup) {
            this.swapGroup = swapGroup;
            return this;
        }
        
        /**
         * Set swapGroupId
         * @param swapGroupId The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the &#x60;swapGroup&#x60; parameter. (optional)
         * @return RemoveGroupRequestBuilder
         */
        public RemoveGroupRequestBuilder swapGroupId(String swapGroupId) {
            this.swapGroupId = swapGroupId;
            return this;
        }
        
        /**
         * Build call for removeGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGroupCall(groupname, groupId, swapGroup, swapGroupId, _callback);
        }


        /**
         * Execute removeGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeGroupWithHttpInfo(groupname, groupId, swapGroup, swapGroupId);
        }

        /**
         * Execute removeGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeGroupWithHttpInfo(groupname, groupId, swapGroup, swapGroupId);
        }

        /**
         * Execute removeGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeGroupAsync(groupname, groupId, swapGroup, swapGroupId, _callback);
        }
    }

    /**
     * Remove group
     * Deletes a group.  **[Permissions](https://dac-static.atlassian.com) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
     * @return RemoveGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the group name is not specified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the group is not found. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGroupRequestBuilder removeGroup() throws IllegalArgumentException {
        return new RemoveGroupRequestBuilder();
    }
    private okhttp3.Call removeUserFromGroupCall(String accountId, String groupname, String groupId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/group/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupname", groupname));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromGroupValidateBeforeCall(String accountId, String groupname, String groupId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeUserFromGroup(Async)");
        }

        return removeUserFromGroupCall(accountId, groupname, groupId, username, _callback);

    }


    private ApiResponse<Void> removeUserFromGroupWithHttpInfo(String accountId, String groupname, String groupId, String username) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromGroupValidateBeforeCall(accountId, groupname, groupId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserFromGroupAsync(String accountId, String groupname, String groupId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromGroupValidateBeforeCall(accountId, groupname, groupId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserFromGroupRequestBuilder {
        private final String accountId;
        private String groupname;
        private String groupId;
        private String username;

        private RemoveUserFromGroupRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Set groupname
         * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
         * @return RemoveUserFromGroupRequestBuilder
         */
        public RemoveUserFromGroupRequestBuilder groupname(String groupname) {
            this.groupname = groupname;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
         * @return RemoveUserFromGroupRequestBuilder
         */
        public RemoveUserFromGroupRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return RemoveUserFromGroupRequestBuilder
         */
        public RemoveUserFromGroupRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for removeUserFromGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserFromGroupCall(accountId, groupname, groupId, username, _callback);
        }


        /**
         * Execute removeUserFromGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserFromGroupWithHttpInfo(accountId, groupname, groupId, username);
        }

        /**
         * Execute removeUserFromGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserFromGroupWithHttpInfo(accountId, groupname, groupId, username);
        }

        /**
         * Execute removeUserFromGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserFromGroupAsync(accountId, groupname, groupId, username, _callback);
        }
    }

    /**
     * Remove user from group
     * Removes a user from a group.  **[Permissions](https://dac-static.atlassian.com) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (required)
     * @return RemoveUserFromGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing from the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the group or user are not found. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromGroupRequestBuilder removeUserFromGroup(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new RemoveUserFromGroupRequestBuilder(accountId);
    }
}
