/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.IssueCommentListRequestBean;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageBeanComment;
import com.konfigthis.client.model.PageOfComments;
import com.konfigthis.client.model.UserDetails;
import com.konfigthis.client.model.Visibility;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCommentToIssueCall(String issueIdOrKey, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/comment"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommentToIssueValidateBeforeCall(String issueIdOrKey, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling addCommentToIssue(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addCommentToIssue(Async)");
        }

        return addCommentToIssueCall(issueIdOrKey, requestBody, expand, _callback);

    }


    private ApiResponse<Comment> addCommentToIssueWithHttpInfo(String issueIdOrKey, Map<String, Object> requestBody, String expand) throws ApiException {
        okhttp3.Call localVarCall = addCommentToIssueValidateBeforeCall(issueIdOrKey, requestBody, expand, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCommentToIssueAsync(String issueIdOrKey, Map<String, Object> requestBody, String expand, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommentToIssueValidateBeforeCall(issueIdOrKey, requestBody, expand, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCommentToIssueRequestBuilder {
        private final String issueIdOrKey;
        private UserDetails author;
        private Object body;
        private OffsetDateTime created;
        private String id;
        private Boolean jsdAuthorCanSeeRequest;
        private Boolean jsdPublic;
        private List<EntityProperty> properties;
        private String renderedBody;
        private String self;
        private UserDetails updateAuthor;
        private OffsetDateTime updated;
        private Visibility visibility;
        private String expand;

        private AddCommentToIssueRequestBuilder(String issueIdOrKey) {
            this.issueIdOrKey = issueIdOrKey;
        }

        /**
         * Set author
         * @param author  (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder author(UserDetails author) {
            this.author = author;
            return this;
        }
        
        /**
         * Set body
         * @param body The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set created
         * @param created The date and time at which the comment was created. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the comment. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set jsdAuthorCanSeeRequest
         * @param jsdAuthorCanSeeRequest Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder jsdAuthorCanSeeRequest(Boolean jsdAuthorCanSeeRequest) {
            this.jsdAuthorCanSeeRequest = jsdAuthorCanSeeRequest;
            return this;
        }
        
        /**
         * Set jsdPublic
         * @param jsdPublic Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#39;t use Jira Service Desk or the project isn&#39;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder jsdPublic(Boolean jsdPublic) {
            this.jsdPublic = jsdPublic;
            return this;
        }
        
        /**
         * Set properties
         * @param properties A list of comment properties. Optional on create and update. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder properties(List<EntityProperty> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set renderedBody
         * @param renderedBody The rendered version of the comment. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder renderedBody(String renderedBody) {
            this.renderedBody = renderedBody;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the comment. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder self(String self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set updateAuthor
         * @param updateAuthor  (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder updateAuthor(UserDetails updateAuthor) {
            this.updateAuthor = updateAuthor;
            return this;
        }
        
        /**
         * Set updated
         * @param updated The date and time at which the comment was updated last. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder updated(OffsetDateTime updated) {
            this.updated = updated;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder visibility(Visibility visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
         * @return AddCommentToIssueRequestBuilder
         */
        public AddCommentToIssueRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for addCommentToIssue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCommentToIssueCall(issueIdOrKey, requestBody, expand, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("author", this.author);
            requestBody.put("body", this.body);
            requestBody.put("created", this.created);
            requestBody.put("id", this.id);
            requestBody.put("jsdAuthorCanSeeRequest", this.jsdAuthorCanSeeRequest);
            requestBody.put("jsdPublic", this.jsdPublic);
            requestBody.put("properties", this.properties);
            requestBody.put("renderedBody", this.renderedBody);
            requestBody.put("self", this.self);
            requestBody.put("updateAuthor", this.updateAuthor);
            requestBody.put("updated", this.updated);
            requestBody.put("visibility", this.visibility);
            return requestBody;
        }

        /**
         * Execute addCommentToIssue request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Comment> localVarResp = addCommentToIssueWithHttpInfo(issueIdOrKey, requestBody, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCommentToIssue request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCommentToIssueWithHttpInfo(issueIdOrKey, requestBody, expand);
        }

        /**
         * Execute addCommentToIssue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addCommentToIssueAsync(issueIdOrKey, requestBody, expand, _callback);
        }
    }

    /**
     * Add comment
     * Adds a comment to an issue.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Add comments* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param requestBody  (required)
     * @return AddCommentToIssueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public AddCommentToIssueRequestBuilder addCommentToIssue(String issueIdOrKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        return new AddCommentToIssueRequestBuilder(issueIdOrKey);
    }
    private okhttp3.Call deleteCommentCall(String issueIdOrKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(String issueIdOrKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling deleteComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteComment(Async)");
        }

        return deleteCommentCall(issueIdOrKey, id, _callback);

    }


    private ApiResponse<Void> deleteCommentWithHttpInfo(String issueIdOrKey, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(issueIdOrKey, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCommentAsync(String issueIdOrKey, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(issueIdOrKey, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCommentRequestBuilder {
        private final String issueIdOrKey;
        private final String id;

        private DeleteCommentRequestBuilder(String issueIdOrKey, String id) {
            this.issueIdOrKey = issueIdOrKey;
            this.id = id;
        }

        /**
         * Build call for deleteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to delete the comment. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if an anonymous call is made to the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentCall(issueIdOrKey, id, _callback);
        }


        /**
         * Execute deleteComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to delete the comment. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if an anonymous call is made to the operation. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCommentWithHttpInfo(issueIdOrKey, id);
        }

        /**
         * Execute deleteComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to delete the comment. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if an anonymous call is made to the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCommentWithHttpInfo(issueIdOrKey, id);
        }

        /**
         * Execute deleteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to delete the comment. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if an anonymous call is made to the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCommentAsync(issueIdOrKey, id, _callback);
        }
    }

    /**
     * Delete comment
     * Deletes a comment.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all comments*[project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @return DeleteCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the user does not have permission to delete the comment. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Returned if an anonymous call is made to the operation. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCommentRequestBuilder deleteComment(String issueIdOrKey, String id) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCommentRequestBuilder(issueIdOrKey, id);
    }
    private okhttp3.Call getCommentByIdCall(String issueIdOrKey, String id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentByIdValidateBeforeCall(String issueIdOrKey, String id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getCommentById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCommentById(Async)");
        }

        return getCommentByIdCall(issueIdOrKey, id, expand, _callback);

    }


    private ApiResponse<Comment> getCommentByIdWithHttpInfo(String issueIdOrKey, String id, String expand) throws ApiException {
        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(issueIdOrKey, id, expand, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentByIdAsync(String issueIdOrKey, String id, String expand, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentByIdValidateBeforeCall(issueIdOrKey, id, expand, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentByIdRequestBuilder {
        private final String issueIdOrKey;
        private final String id;
        private String expand;

        private GetCommentByIdRequestBuilder(String issueIdOrKey, String id) {
            this.issueIdOrKey = issueIdOrKey;
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
         * @return GetCommentByIdRequestBuilder
         */
        public GetCommentByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getCommentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentByIdCall(issueIdOrKey, id, expand, _callback);
        }


        /**
         * Execute getCommentById request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            ApiResponse<Comment> localVarResp = getCommentByIdWithHttpInfo(issueIdOrKey, id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommentById request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            return getCommentByIdWithHttpInfo(issueIdOrKey, id, expand);
        }

        /**
         * Execute getCommentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            return getCommentByIdAsync(issueIdOrKey, id, expand, _callback);
        }
    }

    /**
     * Get comment
     * Returns a comment.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @return GetCommentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentByIdRequestBuilder getCommentById(String issueIdOrKey, String id) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCommentByIdRequestBuilder(issueIdOrKey, id);
    }
    private okhttp3.Call getCommentsByIdsCall(IssueCommentListRequestBean issueCommentListRequestBean, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueCommentListRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/comment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsByIdsValidateBeforeCall(IssueCommentListRequestBean issueCommentListRequestBean, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueCommentListRequestBean' is set
        if (issueCommentListRequestBean == null) {
            throw new ApiException("Missing the required parameter 'issueCommentListRequestBean' when calling getCommentsByIds(Async)");
        }

        return getCommentsByIdsCall(issueCommentListRequestBean, expand, _callback);

    }


    private ApiResponse<PageBeanComment> getCommentsByIdsWithHttpInfo(IssueCommentListRequestBean issueCommentListRequestBean, String expand) throws ApiException {
        okhttp3.Call localVarCall = getCommentsByIdsValidateBeforeCall(issueCommentListRequestBean, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentsByIdsAsync(IssueCommentListRequestBean issueCommentListRequestBean, String expand, final ApiCallback<PageBeanComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsByIdsValidateBeforeCall(issueCommentListRequestBean, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentsByIdsRequestBuilder {
        private final Set<Long> ids;
        private String expand;

        private GetCommentsByIdsRequestBuilder(Set<Long> ids) {
            this.ids = ids;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedBody&#x60; Returns the comment body rendered in HTML.  *  &#x60;properties&#x60; Returns the comment&#39;s properties. (optional)
         * @return GetCommentsByIdsRequestBuilder
         */
        public GetCommentsByIdsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getCommentsByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request contains more than 1000 IDs or is empty. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueCommentListRequestBean issueCommentListRequestBean = buildBodyParams();
            return getCommentsByIdsCall(issueCommentListRequestBean, expand, _callback);
        }

        private IssueCommentListRequestBean buildBodyParams() {
            IssueCommentListRequestBean issueCommentListRequestBean = new IssueCommentListRequestBean();
            issueCommentListRequestBean.ids(this.ids);
            return issueCommentListRequestBean;
        }

        /**
         * Execute getCommentsByIds request
         * @return PageBeanComment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request contains more than 1000 IDs or is empty. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanComment execute() throws ApiException {
            IssueCommentListRequestBean issueCommentListRequestBean = buildBodyParams();
            ApiResponse<PageBeanComment> localVarResp = getCommentsByIdsWithHttpInfo(issueCommentListRequestBean, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommentsByIds request with HTTP info returned
         * @return ApiResponse&lt;PageBeanComment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request contains more than 1000 IDs or is empty. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanComment> executeWithHttpInfo() throws ApiException {
            IssueCommentListRequestBean issueCommentListRequestBean = buildBodyParams();
            return getCommentsByIdsWithHttpInfo(issueCommentListRequestBean, expand);
        }

        /**
         * Execute getCommentsByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request contains more than 1000 IDs or is empty. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanComment> _callback) throws ApiException {
            IssueCommentListRequestBean issueCommentListRequestBean = buildBodyParams();
            return getCommentsByIdsAsync(issueCommentListRequestBean, expand, _callback);
        }
    }

    /**
     * Get comments by IDs
     * Returns a [paginated](https://dac-static.atlassian.com) list of comments specified by a list of comment IDs.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Comments are returned where the user:   *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * @param issueCommentListRequestBean The list of comment IDs. (required)
     * @return GetCommentsByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request contains more than 1000 IDs or is empty. </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentsByIdsRequestBuilder getCommentsByIds(Set<Long> ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        return new GetCommentsByIdsRequestBuilder(ids);
    }
    private okhttp3.Call listGetCall(String issueIdOrKey, Long startAt, Integer maxResults, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/comment"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGetValidateBeforeCall(String issueIdOrKey, Long startAt, Integer maxResults, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling listGet(Async)");
        }

        return listGetCall(issueIdOrKey, startAt, maxResults, orderBy, expand, _callback);

    }


    private ApiResponse<PageOfComments> listGetWithHttpInfo(String issueIdOrKey, Long startAt, Integer maxResults, String orderBy, String expand) throws ApiException {
        okhttp3.Call localVarCall = listGetValidateBeforeCall(issueIdOrKey, startAt, maxResults, orderBy, expand, null);
        Type localVarReturnType = new TypeToken<PageOfComments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGetAsync(String issueIdOrKey, Long startAt, Integer maxResults, String orderBy, String expand, final ApiCallback<PageOfComments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGetValidateBeforeCall(issueIdOrKey, startAt, maxResults, orderBy, expand, _callback);
        Type localVarReturnType = new TypeToken<PageOfComments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGetRequestBuilder {
        private final String issueIdOrKey;
        private Long startAt;
        private Integer maxResults;
        private String orderBy;
        private String expand;

        private ListGetRequestBuilder(String issueIdOrKey) {
            this.issueIdOrKey = issueIdOrKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 5000)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field. Accepts *created* to sort comments by their created date. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;orderBy&#x60; is set to a value other than *created*. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGetCall(issueIdOrKey, startAt, maxResults, orderBy, expand, _callback);
        }


        /**
         * Execute listGet request
         * @return PageOfComments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;orderBy&#x60; is set to a value other than *created*. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public PageOfComments execute() throws ApiException {
            ApiResponse<PageOfComments> localVarResp = listGetWithHttpInfo(issueIdOrKey, startAt, maxResults, orderBy, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGet request with HTTP info returned
         * @return ApiResponse&lt;PageOfComments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;orderBy&#x60; is set to a value other than *created*. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageOfComments> executeWithHttpInfo() throws ApiException {
            return listGetWithHttpInfo(issueIdOrKey, startAt, maxResults, orderBy, expand);
        }

        /**
         * Execute listGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;orderBy&#x60; is set to a value other than *created*. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageOfComments> _callback) throws ApiException {
            return listGetAsync(issueIdOrKey, startAt, maxResults, orderBy, expand, _callback);
        }
    }

    /**
     * Get comments
     * Returns all comments for an issue.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Comments are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return ListGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;orderBy&#x60; is set to a value other than *created*. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ListGetRequestBuilder listGet(String issueIdOrKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        return new ListGetRequestBuilder(issueIdOrKey);
    }
    private okhttp3.Call updateCommentCall(String issueIdOrKey, String id, Map<String, Object> requestBody, Boolean notifyUsers, Boolean overrideEditableFlag, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notifyUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifyUsers", notifyUsers));
        }

        if (overrideEditableFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideEditableFlag", overrideEditableFlag));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(String issueIdOrKey, String id, Map<String, Object> requestBody, Boolean notifyUsers, Boolean overrideEditableFlag, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling updateComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateComment(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateComment(Async)");
        }

        return updateCommentCall(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand, _callback);

    }


    private ApiResponse<Comment> updateCommentWithHttpInfo(String issueIdOrKey, String id, Map<String, Object> requestBody, Boolean notifyUsers, Boolean overrideEditableFlag, String expand) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCommentAsync(String issueIdOrKey, String id, Map<String, Object> requestBody, Boolean notifyUsers, Boolean overrideEditableFlag, String expand, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCommentRequestBuilder {
        private final String issueIdOrKey;
        private final String id;
        private UserDetails author;
        private Object body;
        private OffsetDateTime created;
        private String id;
        private Boolean jsdAuthorCanSeeRequest;
        private Boolean jsdPublic;
        private List<EntityProperty> properties;
        private String renderedBody;
        private String self;
        private UserDetails updateAuthor;
        private OffsetDateTime updated;
        private Visibility visibility;
        private Boolean notifyUsers;
        private Boolean overrideEditableFlag;
        private String expand;

        private UpdateCommentRequestBuilder(String issueIdOrKey, String id) {
            this.issueIdOrKey = issueIdOrKey;
            this.id = id;
        }

        /**
         * Set author
         * @param author  (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder author(UserDetails author) {
            this.author = author;
            return this;
        }
        
        /**
         * Set body
         * @param body The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set created
         * @param created The date and time at which the comment was created. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder created(OffsetDateTime created) {
            this.created = created;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the comment. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set jsdAuthorCanSeeRequest
         * @param jsdAuthorCanSeeRequest Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder jsdAuthorCanSeeRequest(Boolean jsdAuthorCanSeeRequest) {
            this.jsdAuthorCanSeeRequest = jsdAuthorCanSeeRequest;
            return this;
        }
        
        /**
         * Set jsdPublic
         * @param jsdPublic Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#39;t use Jira Service Desk or the project isn&#39;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder jsdPublic(Boolean jsdPublic) {
            this.jsdPublic = jsdPublic;
            return this;
        }
        
        /**
         * Set properties
         * @param properties A list of comment properties. Optional on create and update. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder properties(List<EntityProperty> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set renderedBody
         * @param renderedBody The rendered version of the comment. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder renderedBody(String renderedBody) {
            this.renderedBody = renderedBody;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the comment. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder self(String self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set updateAuthor
         * @param updateAuthor  (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder updateAuthor(UserDetails updateAuthor) {
            this.updateAuthor = updateAuthor;
            return this;
        }
        
        /**
         * Set updated
         * @param updated The date and time at which the comment was updated last. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder updated(OffsetDateTime updated) {
            this.updated = updated;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility  (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder visibility(Visibility visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set notifyUsers
         * @param notifyUsers Whether users are notified when a comment is updated. (optional, default to true)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder notifyUsers(Boolean notifyUsers) {
            this.notifyUsers = notifyUsers;
            return this;
        }
        
        /**
         * Set overrideEditableFlag
         * @param overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder overrideEditableFlag(Boolean overrideEditableFlag) {
            this.overrideEditableFlag = overrideEditableFlag;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
         * @return UpdateCommentRequestBuilder
         */
        public UpdateCommentRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for updateComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to edit the comment or the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCommentCall(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("author", this.author);
            requestBody.put("body", this.body);
            requestBody.put("created", this.created);
            requestBody.put("id", this.id);
            requestBody.put("jsdAuthorCanSeeRequest", this.jsdAuthorCanSeeRequest);
            requestBody.put("jsdPublic", this.jsdPublic);
            requestBody.put("properties", this.properties);
            requestBody.put("renderedBody", this.renderedBody);
            requestBody.put("self", this.self);
            requestBody.put("updateAuthor", this.updateAuthor);
            requestBody.put("updated", this.updated);
            requestBody.put("visibility", this.visibility);
            return requestBody;
        }

        /**
         * Execute updateComment request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to edit the comment or the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Comment> localVarResp = updateCommentWithHttpInfo(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateComment request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to edit the comment or the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCommentWithHttpInfo(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand);
        }

        /**
         * Execute updateComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the user does not have permission to edit the comment or the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateCommentAsync(issueIdOrKey, id, requestBody, notifyUsers, overrideEditableFlag, expand, _callback);
        }
    }

    /**
     * Update comment
     * Updates a comment.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all comments*[project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @param requestBody  (required)
     * @return UpdateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the user does not have permission to edit the comment or the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCommentRequestBuilder updateComment(String issueIdOrKey, String id) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCommentRequestBuilder(issueIdOrKey, id);
    }
}
