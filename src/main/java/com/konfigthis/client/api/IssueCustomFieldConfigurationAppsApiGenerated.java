/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContextualConfiguration;
import com.konfigthis.client.model.CustomFieldConfigurations;
import com.konfigthis.client.model.PageBeanContextualConfiguration;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCustomFieldConfigurationAppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCustomFieldConfigurationAppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldConfigurationAppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getContextConfigurationCall(String fieldIdOrKey, Set<Long> id, Set<Long> fieldContextId, Long issueId, String projectKeyOrId, String issueTypeId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration"
            .replace("{" + "fieldIdOrKey" + "}", localVarApiClient.escapeString(fieldIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (fieldContextId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fieldContextId", fieldContextId));
        }

        if (issueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueId", issueId));
        }

        if (projectKeyOrId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKeyOrId", projectKeyOrId));
        }

        if (issueTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueTypeId", issueTypeId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContextConfigurationValidateBeforeCall(String fieldIdOrKey, Set<Long> id, Set<Long> fieldContextId, Long issueId, String projectKeyOrId, String issueTypeId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldIdOrKey' is set
        if (fieldIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'fieldIdOrKey' when calling getContextConfiguration(Async)");
        }

        return getContextConfigurationCall(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanContextualConfiguration> getContextConfigurationWithHttpInfo(String fieldIdOrKey, Set<Long> id, Set<Long> fieldContextId, Long issueId, String projectKeyOrId, String issueTypeId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getContextConfigurationValidateBeforeCall(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanContextualConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContextConfigurationAsync(String fieldIdOrKey, Set<Long> id, Set<Long> fieldContextId, Long issueId, String projectKeyOrId, String issueTypeId, Long startAt, Integer maxResults, final ApiCallback<PageBeanContextualConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContextConfigurationValidateBeforeCall(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanContextualConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContextConfigurationRequestBuilder {
        private final String fieldIdOrKey;
        private Set<Long> id;
        private Set<Long> fieldContextId;
        private Long issueId;
        private String projectKeyOrId;
        private String issueTypeId;
        private Long startAt;
        private Integer maxResults;

        private GetContextConfigurationRequestBuilder(String fieldIdOrKey) {
            this.fieldIdOrKey = fieldIdOrKey;
        }

        /**
         * Set id
         * @param id The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Can&#39;t be provided with &#x60;fieldContextId&#x60;, &#x60;issueId&#x60;, &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set fieldContextId
         * @param fieldContextId The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: &#x60;fieldContextId&#x3D;10000&amp;fieldContextId&#x3D;10001&#x60;. Can&#39;t be provided with &#x60;id&#x60;, &#x60;issueId&#x60;, &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder fieldContextId(Set<Long> fieldContextId) {
            this.fieldContextId = fieldContextId;
            return this;
        }
        
        /**
         * Set issueId
         * @param issueId The ID of the issue to filter results by. If the issue doesn&#39;t exist, an empty list is returned. Can&#39;t be provided with &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder issueId(Long issueId) {
            this.issueId = issueId;
            return this;
        }
        
        /**
         * Set projectKeyOrId
         * @param projectKeyOrId The ID or key of the project to filter results by. Must be provided with &#x60;issueTypeId&#x60;. Can&#39;t be provided with &#x60;issueId&#x60;. (optional)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder projectKeyOrId(String projectKeyOrId) {
            this.projectKeyOrId = projectKeyOrId;
            return this;
        }
        
        /**
         * Set issueTypeId
         * @param issueTypeId The ID of the issue type to filter results by. Must be provided with &#x60;projectKeyOrId&#x60;. Can&#39;t be provided with &#x60;issueId&#x60;. (optional)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder issueTypeId(String issueTypeId) {
            this.issueTypeId = issueTypeId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return GetContextConfigurationRequestBuilder
         */
        public GetContextConfigurationRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getContextConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContextConfigurationCall(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults, _callback);
        }


        /**
         * Execute getContextConfiguration request
         * @return PageBeanContextualConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanContextualConfiguration execute() throws ApiException {
            ApiResponse<PageBeanContextualConfiguration> localVarResp = getContextConfigurationWithHttpInfo(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContextConfiguration request with HTTP info returned
         * @return ApiResponse&lt;PageBeanContextualConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanContextualConfiguration> executeWithHttpInfo() throws ApiException {
            return getContextConfigurationWithHttpInfo(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults);
        }

        /**
         * Execute getContextConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanContextualConfiguration> _callback) throws ApiException {
            return getContextConfigurationAsync(fieldIdOrKey, id, fieldContextId, issueId, projectKeyOrId, issueTypeId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get custom field configurations
     * Returns a [paginated](https://dac-static.atlassian.com) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).  The result can be filtered by one of these criteria:   *  &#x60;id&#x60;.  *  &#x60;fieldContextId&#x60;.  *  &#x60;issueId&#x60;.  *  &#x60;projectKeyOrId&#x60; and &#x60;issueTypeId&#x60;.  Otherwise, all configurations are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.
     * @param fieldIdOrKey The ID or key of the custom field, for example &#x60;customfield_10000&#x60;. (required)
     * @return GetContextConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetContextConfigurationRequestBuilder getContextConfiguration(String fieldIdOrKey) throws IllegalArgumentException {
        if (fieldIdOrKey == null) throw new IllegalArgumentException("\"fieldIdOrKey\" is required but got null");
            

        return new GetContextConfigurationRequestBuilder(fieldIdOrKey);
    }
    private okhttp3.Call updateContextConfigurationCall(String fieldIdOrKey, CustomFieldConfigurations customFieldConfigurations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldConfigurations;

        // create path and map variables
        String localVarPath = "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration"
            .replace("{" + "fieldIdOrKey" + "}", localVarApiClient.escapeString(fieldIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContextConfigurationValidateBeforeCall(String fieldIdOrKey, CustomFieldConfigurations customFieldConfigurations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldIdOrKey' is set
        if (fieldIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'fieldIdOrKey' when calling updateContextConfiguration(Async)");
        }

        // verify the required parameter 'customFieldConfigurations' is set
        if (customFieldConfigurations == null) {
            throw new ApiException("Missing the required parameter 'customFieldConfigurations' when calling updateContextConfiguration(Async)");
        }

        return updateContextConfigurationCall(fieldIdOrKey, customFieldConfigurations, _callback);

    }


    private ApiResponse<Object> updateContextConfigurationWithHttpInfo(String fieldIdOrKey, CustomFieldConfigurations customFieldConfigurations) throws ApiException {
        okhttp3.Call localVarCall = updateContextConfigurationValidateBeforeCall(fieldIdOrKey, customFieldConfigurations, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContextConfigurationAsync(String fieldIdOrKey, CustomFieldConfigurations customFieldConfigurations, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContextConfigurationValidateBeforeCall(fieldIdOrKey, customFieldConfigurations, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContextConfigurationRequestBuilder {
        private final Set<ContextualConfiguration> configurations;
        private final String fieldIdOrKey;

        private UpdateContextConfigurationRequestBuilder(Set<ContextualConfiguration> configurations, String fieldIdOrKey) {
            this.configurations = configurations;
            this.fieldIdOrKey = fieldIdOrKey;
        }

        /**
         * Build call for updateContextConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldConfigurations customFieldConfigurations = buildBodyParams();
            return updateContextConfigurationCall(fieldIdOrKey, customFieldConfigurations, _callback);
        }

        private CustomFieldConfigurations buildBodyParams() {
            CustomFieldConfigurations customFieldConfigurations = new CustomFieldConfigurations();
            customFieldConfigurations.configurations(this.configurations);
            return customFieldConfigurations;
        }

        /**
         * Execute updateContextConfiguration request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CustomFieldConfigurations customFieldConfigurations = buildBodyParams();
            ApiResponse<Object> localVarResp = updateContextConfigurationWithHttpInfo(fieldIdOrKey, customFieldConfigurations);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContextConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CustomFieldConfigurations customFieldConfigurations = buildBodyParams();
            return updateContextConfigurationWithHttpInfo(fieldIdOrKey, customFieldConfigurations);
        }

        /**
         * Execute updateContextConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CustomFieldConfigurations customFieldConfigurations = buildBodyParams();
            return updateContextConfigurationAsync(fieldIdOrKey, customFieldConfigurations, _callback);
        }
    }

    /**
     * Update custom field configurations
     * Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.
     * @param fieldIdOrKey The ID or key of the custom field, for example &#x60;customfield_10000&#x60;. (required)
     * @param customFieldConfigurations  (required)
     * @return UpdateContextConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the custom field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContextConfigurationRequestBuilder updateContextConfiguration(Set<ContextualConfiguration> configurations, String fieldIdOrKey) throws IllegalArgumentException {
        if (configurations == null) throw new IllegalArgumentException("\"configurations\" is required but got null");
        if (fieldIdOrKey == null) throw new IllegalArgumentException("\"fieldIdOrKey\" is required but got null");
            

        return new UpdateContextConfigurationRequestBuilder(configurations, fieldIdOrKey);
    }
}
