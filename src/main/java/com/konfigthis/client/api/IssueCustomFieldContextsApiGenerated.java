/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateCustomFieldContext;
import com.konfigthis.client.model.CustomFieldContextDefaultValueUpdate;
import com.konfigthis.client.model.CustomFieldContextUpdateDetails;
import com.konfigthis.client.model.IssueTypeIds;
import com.konfigthis.client.model.PageBeanContextForProjectAndIssueType;
import com.konfigthis.client.model.PageBeanCustomFieldContext;
import com.konfigthis.client.model.PageBeanCustomFieldContextDefaultValue;
import com.konfigthis.client.model.PageBeanCustomFieldContextProjectMapping;
import com.konfigthis.client.model.PageBeanIssueTypeToContextMapping;
import com.konfigthis.client.model.ProjectIds;
import com.konfigthis.client.model.ProjectIssueTypeMapping;
import com.konfigthis.client.model.ProjectIssueTypeMappings;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCustomFieldContextsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCustomFieldContextsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldContextsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addIssueTypesToContextCall(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIssueTypesToContextValidateBeforeCall(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling addIssueTypesToContext(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling addIssueTypesToContext(Async)");
        }

        // verify the required parameter 'issueTypeIds' is set
        if (issueTypeIds == null) {
            throw new ApiException("Missing the required parameter 'issueTypeIds' when calling addIssueTypesToContext(Async)");
        }

        return addIssueTypesToContextCall(fieldId, contextId, issueTypeIds, _callback);

    }


    private ApiResponse<Object> addIssueTypesToContextWithHttpInfo(String fieldId, Long contextId, IssueTypeIds issueTypeIds) throws ApiException {
        okhttp3.Call localVarCall = addIssueTypesToContextValidateBeforeCall(fieldId, contextId, issueTypeIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addIssueTypesToContextAsync(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIssueTypesToContextValidateBeforeCall(fieldId, contextId, issueTypeIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddIssueTypesToContextRequestBuilder {
        private final List<String> issueTypeIds;
        private final String fieldId;
        private final Long contextId;

        private AddIssueTypesToContextRequestBuilder(List<String> issueTypeIds, String fieldId, Long contextId) {
            this.issueTypeIds = issueTypeIds;
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Build call for addIssueTypesToContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToContextCall(fieldId, contextId, issueTypeIds, _callback);
        }

        private IssueTypeIds buildBodyParams() {
            IssueTypeIds issueTypeIds = new IssueTypeIds();
            issueTypeIds.issueTypeIds(this.issueTypeIds);
            return issueTypeIds;
        }

        /**
         * Execute addIssueTypesToContext request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            ApiResponse<Object> localVarResp = addIssueTypesToContextWithHttpInfo(fieldId, contextId, issueTypeIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addIssueTypesToContext request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToContextWithHttpInfo(fieldId, contextId, issueTypeIds);
        }

        /**
         * Execute addIssueTypesToContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToContextAsync(fieldId, contextId, issueTypeIds, _callback);
        }
    }

    /**
     * Add issue types to context
     * Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param issueTypeIds  (required)
     * @return AddIssueTypesToContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AddIssueTypesToContextRequestBuilder addIssueTypesToContext(List<String> issueTypeIds, String fieldId, Long contextId) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new AddIssueTypesToContextRequestBuilder(issueTypeIds, fieldId, contextId);
    }
    private okhttp3.Call assignContextsToProjectsCall(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/project"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignContextsToProjectsValidateBeforeCall(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling assignContextsToProjects(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling assignContextsToProjects(Async)");
        }

        // verify the required parameter 'projectIds' is set
        if (projectIds == null) {
            throw new ApiException("Missing the required parameter 'projectIds' when calling assignContextsToProjects(Async)");
        }

        return assignContextsToProjectsCall(fieldId, contextId, projectIds, _callback);

    }


    private ApiResponse<Object> assignContextsToProjectsWithHttpInfo(String fieldId, Long contextId, ProjectIds projectIds) throws ApiException {
        okhttp3.Call localVarCall = assignContextsToProjectsValidateBeforeCall(fieldId, contextId, projectIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignContextsToProjectsAsync(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignContextsToProjectsValidateBeforeCall(fieldId, contextId, projectIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignContextsToProjectsRequestBuilder {
        private final List<String> projectIds;
        private final String fieldId;
        private final Long contextId;

        private AssignContextsToProjectsRequestBuilder(List<String> projectIds, String fieldId, Long contextId) {
            this.projectIds = projectIds;
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Build call for assignContextsToProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return assignContextsToProjectsCall(fieldId, contextId, projectIds, _callback);
        }

        private ProjectIds buildBodyParams() {
            ProjectIds projectIds = new ProjectIds();
            projectIds.projectIds(this.projectIds);
            return projectIds;
        }

        /**
         * Execute assignContextsToProjects request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            ApiResponse<Object> localVarResp = assignContextsToProjectsWithHttpInfo(fieldId, contextId, projectIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignContextsToProjects request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return assignContextsToProjectsWithHttpInfo(fieldId, contextId, projectIds);
        }

        /**
         * Execute assignContextsToProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return assignContextsToProjectsAsync(fieldId, contextId, projectIds, _callback);
        }
    }

    /**
     * Assign custom field context to projects
     * Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param projectIds  (required)
     * @return AssignContextsToProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AssignContextsToProjectsRequestBuilder assignContextsToProjects(List<String> projectIds, String fieldId, Long contextId) throws IllegalArgumentException {
        if (projectIds == null) throw new IllegalArgumentException("\"projectIds\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new AssignContextsToProjectsRequestBuilder(projectIds, fieldId, contextId);
    }
    private okhttp3.Call createCustomFieldContextCall(String fieldId, CreateCustomFieldContext createCustomFieldContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomFieldContext;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldContextValidateBeforeCall(String fieldId, CreateCustomFieldContext createCustomFieldContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling createCustomFieldContext(Async)");
        }

        // verify the required parameter 'createCustomFieldContext' is set
        if (createCustomFieldContext == null) {
            throw new ApiException("Missing the required parameter 'createCustomFieldContext' when calling createCustomFieldContext(Async)");
        }

        return createCustomFieldContextCall(fieldId, createCustomFieldContext, _callback);

    }


    private ApiResponse<CreateCustomFieldContext> createCustomFieldContextWithHttpInfo(String fieldId, CreateCustomFieldContext createCustomFieldContext) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldContextValidateBeforeCall(fieldId, createCustomFieldContext, null);
        Type localVarReturnType = new TypeToken<CreateCustomFieldContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldContextAsync(String fieldId, CreateCustomFieldContext createCustomFieldContext, final ApiCallback<CreateCustomFieldContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldContextValidateBeforeCall(fieldId, createCustomFieldContext, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomFieldContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldContextRequestBuilder {
        private final String name;
        private final String fieldId;
        private String description;
        private String id;
        private List<String> issueTypeIds;
        private List<String> projectIds;

        private CreateCustomFieldContextRequestBuilder(String name, String fieldId) {
            this.name = name;
            this.fieldId = fieldId;
        }

        /**
         * Set description
         * @param description The description of the context. (optional)
         * @return CreateCustomFieldContextRequestBuilder
         */
        public CreateCustomFieldContextRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the context. (optional)
         * @return CreateCustomFieldContextRequestBuilder
         */
        public CreateCustomFieldContextRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issueTypeIds
         * @param issueTypeIds The list of issue types IDs for the context. If the list is empty, the context refers to all issue types. (optional)
         * @return CreateCustomFieldContextRequestBuilder
         */
        public CreateCustomFieldContextRequestBuilder issueTypeIds(List<String> issueTypeIds) {
            this.issueTypeIds = issueTypeIds;
            return this;
        }
        
        /**
         * Set projectIds
         * @param projectIds The list of project IDs associated with the context. If the list is empty, the context is global. (optional)
         * @return CreateCustomFieldContextRequestBuilder
         */
        public CreateCustomFieldContextRequestBuilder projectIds(List<String> projectIds) {
            this.projectIds = projectIds;
            return this;
        }
        
        /**
         * Build call for createCustomFieldContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field context is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field, project, or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCustomFieldContext createCustomFieldContext = buildBodyParams();
            return createCustomFieldContextCall(fieldId, createCustomFieldContext, _callback);
        }

        private CreateCustomFieldContext buildBodyParams() {
            CreateCustomFieldContext createCustomFieldContext = new CreateCustomFieldContext();
            createCustomFieldContext.description(this.description);
            createCustomFieldContext.id(this.id);
            createCustomFieldContext.issueTypeIds(this.issueTypeIds);
            createCustomFieldContext.name(this.name);
            createCustomFieldContext.projectIds(this.projectIds);
            return createCustomFieldContext;
        }

        /**
         * Execute createCustomFieldContext request
         * @return CreateCustomFieldContext
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field context is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field, project, or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public CreateCustomFieldContext execute() throws ApiException {
            CreateCustomFieldContext createCustomFieldContext = buildBodyParams();
            ApiResponse<CreateCustomFieldContext> localVarResp = createCustomFieldContextWithHttpInfo(fieldId, createCustomFieldContext);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomFieldContext request with HTTP info returned
         * @return ApiResponse&lt;CreateCustomFieldContext&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field context is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field, project, or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateCustomFieldContext> executeWithHttpInfo() throws ApiException {
            CreateCustomFieldContext createCustomFieldContext = buildBodyParams();
            return createCustomFieldContextWithHttpInfo(fieldId, createCustomFieldContext);
        }

        /**
         * Execute createCustomFieldContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field context is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field, project, or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateCustomFieldContext> _callback) throws ApiException {
            CreateCustomFieldContext createCustomFieldContext = buildBodyParams();
            return createCustomFieldContextAsync(fieldId, createCustomFieldContext, _callback);
        }
    }

    /**
     * Create custom field context
     * Creates a custom field context.  If &#x60;projectIds&#x60; is empty, a global context is created. A global context is one that applies to all project. If &#x60;issueTypeIds&#x60; is empty, the context applies to all issue types.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param createCustomFieldContext  (required)
     * @return CreateCustomFieldContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the custom field context is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field, project, or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldContextRequestBuilder createCustomFieldContext(String name, String fieldId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new CreateCustomFieldContextRequestBuilder(name, fieldId);
    }
    private okhttp3.Call deleteCustomFieldContextCall(String fieldId, Long contextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldContextValidateBeforeCall(String fieldId, Long contextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteCustomFieldContext(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling deleteCustomFieldContext(Async)");
        }

        return deleteCustomFieldContextCall(fieldId, contextId, _callback);

    }


    private ApiResponse<Object> deleteCustomFieldContextWithHttpInfo(String fieldId, Long contextId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldContextValidateBeforeCall(fieldId, contextId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomFieldContextAsync(String fieldId, Long contextId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldContextValidateBeforeCall(fieldId, contextId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldContextRequestBuilder {
        private final String fieldId;
        private final Long contextId;

        private DeleteCustomFieldContextRequestBuilder(String fieldId, Long contextId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Build call for deleteCustomFieldContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldContextCall(fieldId, contextId, _callback);
        }


        /**
         * Execute deleteCustomFieldContext request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteCustomFieldContextWithHttpInfo(fieldId, contextId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCustomFieldContext request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldContextWithHttpInfo(fieldId, contextId);
        }

        /**
         * Execute deleteCustomFieldContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteCustomFieldContextAsync(fieldId, contextId, _callback);
        }
    }

    /**
     * Delete custom field context
     * Deletes a [custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @return DeleteCustomFieldContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the context is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldContextRequestBuilder deleteCustomFieldContext(String fieldId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new DeleteCustomFieldContextRequestBuilder(fieldId, contextId);
    }
    private okhttp3.Call getCustomFieldContextsForProjectsAndIssueTypesCall(String fieldId, ProjectIssueTypeMappings projectIssueTypeMappings, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectIssueTypeMappings;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/mapping"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldContextsForProjectsAndIssueTypesValidateBeforeCall(String fieldId, ProjectIssueTypeMappings projectIssueTypeMappings, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getCustomFieldContextsForProjectsAndIssueTypes(Async)");
        }

        // verify the required parameter 'projectIssueTypeMappings' is set
        if (projectIssueTypeMappings == null) {
            throw new ApiException("Missing the required parameter 'projectIssueTypeMappings' when calling getCustomFieldContextsForProjectsAndIssueTypes(Async)");
        }

        return getCustomFieldContextsForProjectsAndIssueTypesCall(fieldId, projectIssueTypeMappings, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanContextForProjectAndIssueType> getCustomFieldContextsForProjectsAndIssueTypesWithHttpInfo(String fieldId, ProjectIssueTypeMappings projectIssueTypeMappings, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldContextsForProjectsAndIssueTypesValidateBeforeCall(fieldId, projectIssueTypeMappings, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanContextForProjectAndIssueType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldContextsForProjectsAndIssueTypesAsync(String fieldId, ProjectIssueTypeMappings projectIssueTypeMappings, Long startAt, Integer maxResults, final ApiCallback<PageBeanContextForProjectAndIssueType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldContextsForProjectsAndIssueTypesValidateBeforeCall(fieldId, projectIssueTypeMappings, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanContextForProjectAndIssueType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder {
        private final List<ProjectIssueTypeMapping> mappings;
        private final String fieldId;
        private Long startAt;
        private Integer maxResults;

        private GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder(List<ProjectIssueTypeMapping> mappings, String fieldId) {
            this.mappings = mappings;
            this.fieldId = fieldId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder
         */
        public GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder
         */
        public GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getCustomFieldContextsForProjectsAndIssueTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectIssueTypeMappings projectIssueTypeMappings = buildBodyParams();
            return getCustomFieldContextsForProjectsAndIssueTypesCall(fieldId, projectIssueTypeMappings, startAt, maxResults, _callback);
        }

        private ProjectIssueTypeMappings buildBodyParams() {
            ProjectIssueTypeMappings projectIssueTypeMappings = new ProjectIssueTypeMappings();
            projectIssueTypeMappings.mappings(this.mappings);
            return projectIssueTypeMappings;
        }

        /**
         * Execute getCustomFieldContextsForProjectsAndIssueTypes request
         * @return PageBeanContextForProjectAndIssueType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanContextForProjectAndIssueType execute() throws ApiException {
            ProjectIssueTypeMappings projectIssueTypeMappings = buildBodyParams();
            ApiResponse<PageBeanContextForProjectAndIssueType> localVarResp = getCustomFieldContextsForProjectsAndIssueTypesWithHttpInfo(fieldId, projectIssueTypeMappings, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFieldContextsForProjectsAndIssueTypes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanContextForProjectAndIssueType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanContextForProjectAndIssueType> executeWithHttpInfo() throws ApiException {
            ProjectIssueTypeMappings projectIssueTypeMappings = buildBodyParams();
            return getCustomFieldContextsForProjectsAndIssueTypesWithHttpInfo(fieldId, projectIssueTypeMappings, startAt, maxResults);
        }

        /**
         * Execute getCustomFieldContextsForProjectsAndIssueTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanContextForProjectAndIssueType> _callback) throws ApiException {
            ProjectIssueTypeMappings projectIssueTypeMappings = buildBodyParams();
            return getCustomFieldContextsForProjectsAndIssueTypesAsync(fieldId, projectIssueTypeMappings, startAt, maxResults, _callback);
        }
    }

    /**
     * Get custom field contexts for projects and issue types
     * Returns a [paginated](https://dac-static.atlassian.com) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is &#x60;null&#x60;.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param projectIssueTypeMappings The list of project and issue type mappings. (required)
     * @return GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder getCustomFieldContextsForProjectsAndIssueTypes(List<ProjectIssueTypeMapping> mappings, String fieldId) throws IllegalArgumentException {
        if (mappings == null) throw new IllegalArgumentException("\"mappings\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetCustomFieldContextsForProjectsAndIssueTypesRequestBuilder(mappings, fieldId);
    }
    private okhttp3.Call getDefaultValuesCall(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/defaultValue"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contextId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contextId", contextId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultValuesValidateBeforeCall(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getDefaultValues(Async)");
        }

        return getDefaultValuesCall(fieldId, contextId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanCustomFieldContextDefaultValue> getDefaultValuesWithHttpInfo(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getDefaultValuesValidateBeforeCall(fieldId, contextId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextDefaultValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultValuesAsync(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback<PageBeanCustomFieldContextDefaultValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultValuesValidateBeforeCall(fieldId, contextId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextDefaultValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultValuesRequestBuilder {
        private final String fieldId;
        private Set<Long> contextId;
        private Long startAt;
        private Integer maxResults;

        private GetDefaultValuesRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set contextId
         * @param contextId The IDs of the contexts. (optional)
         * @return GetDefaultValuesRequestBuilder
         */
        public GetDefaultValuesRequestBuilder contextId(Set<Long> contextId) {
            this.contextId = contextId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetDefaultValuesRequestBuilder
         */
        public GetDefaultValuesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetDefaultValuesRequestBuilder
         */
        public GetDefaultValuesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getDefaultValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultValuesCall(fieldId, contextId, startAt, maxResults, _callback);
        }


        /**
         * Execute getDefaultValues request
         * @return PageBeanCustomFieldContextDefaultValue
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanCustomFieldContextDefaultValue execute() throws ApiException {
            ApiResponse<PageBeanCustomFieldContextDefaultValue> localVarResp = getDefaultValuesWithHttpInfo(fieldId, contextId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultValues request with HTTP info returned
         * @return ApiResponse&lt;PageBeanCustomFieldContextDefaultValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanCustomFieldContextDefaultValue> executeWithHttpInfo() throws ApiException {
            return getDefaultValuesWithHttpInfo(fieldId, contextId, startAt, maxResults);
        }

        /**
         * Execute getDefaultValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanCustomFieldContextDefaultValue> _callback) throws ApiException {
            return getDefaultValuesAsync(fieldId, contextId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get custom field contexts default values
     * Returns a [paginated](https://dac-static.atlassian.com) list of defaults for a custom field. The results can be filtered by &#x60;contextId&#x60;, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  &#x60;CustomFieldContextDefaultValueDate&#x60; (type &#x60;datepicker&#x60;) for date fields.  *  &#x60;CustomFieldContextDefaultValueDateTime&#x60; (type &#x60;datetimepicker&#x60;) for date-time fields.  *  &#x60;CustomFieldContextDefaultValueSingleOption&#x60; (type &#x60;option.single&#x60;) for single choice select lists and radio buttons.  *  &#x60;CustomFieldContextDefaultValueMultipleOption&#x60; (type &#x60;option.multiple&#x60;) for multiple choice select lists and checkboxes.  *  &#x60;CustomFieldContextDefaultValueCascadingOption&#x60; (type &#x60;option.cascading&#x60;) for cascading select lists.  *  &#x60;CustomFieldContextSingleUserPickerDefaults&#x60; (type &#x60;single.user.select&#x60;) for single users.  *  &#x60;CustomFieldContextDefaultValueMultiUserPicker&#x60; (type &#x60;multi.user.select&#x60;) for user lists.  *  &#x60;CustomFieldContextDefaultValueSingleGroupPicker&#x60; (type &#x60;grouppicker.single&#x60;) for single choice group pickers.  *  &#x60;CustomFieldContextDefaultValueMultipleGroupPicker&#x60; (type &#x60;grouppicker.multiple&#x60;) for multiple choice group pickers.  *  &#x60;CustomFieldContextDefaultValueURL&#x60; (type &#x60;url&#x60;) for URLs.  *  &#x60;CustomFieldContextDefaultValueProject&#x60; (type &#x60;project&#x60;) for project pickers.  *  &#x60;CustomFieldContextDefaultValueFloat&#x60; (type &#x60;float&#x60;) for floats (floating-point numbers).  *  &#x60;CustomFieldContextDefaultValueLabels&#x60; (type &#x60;labels&#x60;) for labels.  *  &#x60;CustomFieldContextDefaultValueTextField&#x60; (type &#x60;textfield&#x60;) for text fields.  *  &#x60;CustomFieldContextDefaultValueTextArea&#x60; (type &#x60;textarea&#x60;) for text area fields.  *  &#x60;CustomFieldContextDefaultValueReadOnly&#x60; (type &#x60;readonly&#x60;) for read only (text) fields.  *  &#x60;CustomFieldContextDefaultValueMultipleVersion&#x60; (type &#x60;version.multiple&#x60;) for single choice version pickers.  *  &#x60;CustomFieldContextDefaultValueSingleVersion&#x60; (type &#x60;version.single&#x60;) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  &#x60;CustomFieldContextDefaultValueForgeStringFieldBean&#x60; (type &#x60;forge.string&#x60;) for Forge string fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiStringFieldBean&#x60; (type &#x60;forge.string.list&#x60;) for Forge string collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeObjectFieldBean&#x60; (type &#x60;forge.object&#x60;) for Forge object fields.  *  &#x60;CustomFieldContextDefaultValueForgeDateTimeFieldBean&#x60; (type &#x60;forge.datetime&#x60;) for Forge date-time fields.  *  &#x60;CustomFieldContextDefaultValueForgeGroupFieldBean&#x60; (type &#x60;forge.group&#x60;) for Forge group fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiGroupFieldBean&#x60; (type &#x60;forge.group.list&#x60;) for Forge group collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeNumberFieldBean&#x60; (type &#x60;forge.number&#x60;) for Forge number fields.  *  &#x60;CustomFieldContextDefaultValueForgeUserFieldBean&#x60; (type &#x60;forge.user&#x60;) for Forge user fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiUserFieldBean&#x60; (type &#x60;forge.user.list&#x60;) for Forge user collection fields.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field, for example &#x60;customfield\\_10000&#x60;. (required)
     * @return GetDefaultValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultValuesRequestBuilder getDefaultValues(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetDefaultValuesRequestBuilder(fieldId);
    }
    private okhttp3.Call getIssueTypeMappingsForContextsCall(String fieldId, List<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/issuetypemapping"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contextId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contextId", contextId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeMappingsForContextsValidateBeforeCall(String fieldId, List<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getIssueTypeMappingsForContexts(Async)");
        }

        return getIssueTypeMappingsForContextsCall(fieldId, contextId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanIssueTypeToContextMapping> getIssueTypeMappingsForContextsWithHttpInfo(String fieldId, List<Long> contextId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeMappingsForContextsValidateBeforeCall(fieldId, contextId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeToContextMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeMappingsForContextsAsync(String fieldId, List<Long> contextId, Long startAt, Integer maxResults, final ApiCallback<PageBeanIssueTypeToContextMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeMappingsForContextsValidateBeforeCall(fieldId, contextId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeToContextMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeMappingsForContextsRequestBuilder {
        private final String fieldId;
        private List<Long> contextId;
        private Long startAt;
        private Integer maxResults;

        private GetIssueTypeMappingsForContextsRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set contextId
         * @param contextId The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, &#x60;contextId&#x3D;10001&amp;contextId&#x3D;10002&#x60;. (optional)
         * @return GetIssueTypeMappingsForContextsRequestBuilder
         */
        public GetIssueTypeMappingsForContextsRequestBuilder contextId(List<Long> contextId) {
            this.contextId = contextId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetIssueTypeMappingsForContextsRequestBuilder
         */
        public GetIssueTypeMappingsForContextsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetIssueTypeMappingsForContextsRequestBuilder
         */
        public GetIssueTypeMappingsForContextsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getIssueTypeMappingsForContexts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeMappingsForContextsCall(fieldId, contextId, startAt, maxResults, _callback);
        }


        /**
         * Execute getIssueTypeMappingsForContexts request
         * @return PageBeanIssueTypeToContextMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeToContextMapping execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeToContextMapping> localVarResp = getIssueTypeMappingsForContextsWithHttpInfo(fieldId, contextId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeMappingsForContexts request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeToContextMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeToContextMapping> executeWithHttpInfo() throws ApiException {
            return getIssueTypeMappingsForContextsWithHttpInfo(fieldId, contextId, startAt, maxResults);
        }

        /**
         * Execute getIssueTypeMappingsForContexts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeToContextMapping> _callback) throws ApiException {
            return getIssueTypeMappingsForContextsAsync(fieldId, contextId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get issue types for custom field context
     * Returns a [paginated](https://dac-static.atlassian.com) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @return GetIssueTypeMappingsForContextsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeMappingsForContextsRequestBuilder getIssueTypeMappingsForContexts(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetIssueTypeMappingsForContextsRequestBuilder(fieldId);
    }
    private okhttp3.Call getProjectContextMappingCall(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/projectmapping"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contextId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contextId", contextId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectContextMappingValidateBeforeCall(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getProjectContextMapping(Async)");
        }

        return getProjectContextMappingCall(fieldId, contextId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanCustomFieldContextProjectMapping> getProjectContextMappingWithHttpInfo(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getProjectContextMappingValidateBeforeCall(fieldId, contextId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextProjectMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectContextMappingAsync(String fieldId, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback<PageBeanCustomFieldContextProjectMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectContextMappingValidateBeforeCall(fieldId, contextId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextProjectMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectContextMappingRequestBuilder {
        private final String fieldId;
        private Set<Long> contextId;
        private Long startAt;
        private Integer maxResults;

        private GetProjectContextMappingRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set contextId
         * @param contextId The list of context IDs. To include multiple context, separate IDs with ampersand: &#x60;contextId&#x3D;10000&amp;contextId&#x3D;10001&#x60;. (optional)
         * @return GetProjectContextMappingRequestBuilder
         */
        public GetProjectContextMappingRequestBuilder contextId(Set<Long> contextId) {
            this.contextId = contextId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetProjectContextMappingRequestBuilder
         */
        public GetProjectContextMappingRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetProjectContextMappingRequestBuilder
         */
        public GetProjectContextMappingRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getProjectContextMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectContextMappingCall(fieldId, contextId, startAt, maxResults, _callback);
        }


        /**
         * Execute getProjectContextMapping request
         * @return PageBeanCustomFieldContextProjectMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanCustomFieldContextProjectMapping execute() throws ApiException {
            ApiResponse<PageBeanCustomFieldContextProjectMapping> localVarResp = getProjectContextMappingWithHttpInfo(fieldId, contextId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectContextMapping request with HTTP info returned
         * @return ApiResponse&lt;PageBeanCustomFieldContextProjectMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanCustomFieldContextProjectMapping> executeWithHttpInfo() throws ApiException {
            return getProjectContextMappingWithHttpInfo(fieldId, contextId, startAt, maxResults);
        }

        /**
         * Execute getProjectContextMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanCustomFieldContextProjectMapping> _callback) throws ApiException {
            return getProjectContextMappingAsync(fieldId, contextId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get project mappings for custom field context
     * Returns a [paginated](https://dac-static.atlassian.com) list of context to project mappings for a custom field. The result can be filtered by &#x60;contextId&#x60;. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field, for example &#x60;customfield\\_10000&#x60;. (required)
     * @return GetProjectContextMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectContextMappingRequestBuilder getProjectContextMapping(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetProjectContextMappingRequestBuilder(fieldId);
    }
    private okhttp3.Call listCustomFieldContextsCall(String fieldId, Boolean isAnyIssueType, Boolean isGlobalContext, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isAnyIssueType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnyIssueType", isAnyIssueType));
        }

        if (isGlobalContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isGlobalContext", isGlobalContext));
        }

        if (contextId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contextId", contextId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomFieldContextsValidateBeforeCall(String fieldId, Boolean isAnyIssueType, Boolean isGlobalContext, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling listCustomFieldContexts(Async)");
        }

        return listCustomFieldContextsCall(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanCustomFieldContext> listCustomFieldContextsWithHttpInfo(String fieldId, Boolean isAnyIssueType, Boolean isGlobalContext, Set<Long> contextId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = listCustomFieldContextsValidateBeforeCall(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomFieldContextsAsync(String fieldId, Boolean isAnyIssueType, Boolean isGlobalContext, Set<Long> contextId, Long startAt, Integer maxResults, final ApiCallback<PageBeanCustomFieldContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomFieldContextsValidateBeforeCall(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomFieldContextsRequestBuilder {
        private final String fieldId;
        private Boolean isAnyIssueType;
        private Boolean isGlobalContext;
        private Set<Long> contextId;
        private Long startAt;
        private Integer maxResults;

        private ListCustomFieldContextsRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set isAnyIssueType
         * @param isAnyIssueType Whether to return contexts that apply to all issue types. (optional)
         * @return ListCustomFieldContextsRequestBuilder
         */
        public ListCustomFieldContextsRequestBuilder isAnyIssueType(Boolean isAnyIssueType) {
            this.isAnyIssueType = isAnyIssueType;
            return this;
        }
        
        /**
         * Set isGlobalContext
         * @param isGlobalContext Whether to return contexts that apply to all projects. (optional)
         * @return ListCustomFieldContextsRequestBuilder
         */
        public ListCustomFieldContextsRequestBuilder isGlobalContext(Boolean isGlobalContext) {
            this.isGlobalContext = isGlobalContext;
            return this;
        }
        
        /**
         * Set contextId
         * @param contextId The list of context IDs. To include multiple contexts, separate IDs with ampersand: &#x60;contextId&#x3D;10000&amp;contextId&#x3D;10001&#x60;. (optional)
         * @return ListCustomFieldContextsRequestBuilder
         */
        public ListCustomFieldContextsRequestBuilder contextId(Set<Long> contextId) {
            this.contextId = contextId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListCustomFieldContextsRequestBuilder
         */
        public ListCustomFieldContextsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListCustomFieldContextsRequestBuilder
         */
        public ListCustomFieldContextsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for listCustomFieldContexts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomFieldContextsCall(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults, _callback);
        }


        /**
         * Execute listCustomFieldContexts request
         * @return PageBeanCustomFieldContext
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanCustomFieldContext execute() throws ApiException {
            ApiResponse<PageBeanCustomFieldContext> localVarResp = listCustomFieldContextsWithHttpInfo(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomFieldContexts request with HTTP info returned
         * @return ApiResponse&lt;PageBeanCustomFieldContext&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanCustomFieldContext> executeWithHttpInfo() throws ApiException {
            return listCustomFieldContextsWithHttpInfo(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults);
        }

        /**
         * Execute listCustomFieldContexts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanCustomFieldContext> _callback) throws ApiException {
            return listCustomFieldContextsAsync(fieldId, isAnyIssueType, isGlobalContext, contextId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get custom field contexts
     * Returns a [paginated](https://dac-static.atlassian.com) list of [contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining &#x60;id&#x60; only, all contexts from the list of IDs.  *  By defining &#x60;isAnyIssueType&#x60;, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining &#x60;isGlobalContext&#x60;, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @return ListCustomFieldContextsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomFieldContextsRequestBuilder listCustomFieldContexts(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new ListCustomFieldContextsRequestBuilder(fieldId);
    }
    private okhttp3.Call removeCustomFieldContextFromProjectsCall(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/project/remove"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomFieldContextFromProjectsValidateBeforeCall(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling removeCustomFieldContextFromProjects(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling removeCustomFieldContextFromProjects(Async)");
        }

        // verify the required parameter 'projectIds' is set
        if (projectIds == null) {
            throw new ApiException("Missing the required parameter 'projectIds' when calling removeCustomFieldContextFromProjects(Async)");
        }

        return removeCustomFieldContextFromProjectsCall(fieldId, contextId, projectIds, _callback);

    }


    private ApiResponse<Object> removeCustomFieldContextFromProjectsWithHttpInfo(String fieldId, Long contextId, ProjectIds projectIds) throws ApiException {
        okhttp3.Call localVarCall = removeCustomFieldContextFromProjectsValidateBeforeCall(fieldId, contextId, projectIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCustomFieldContextFromProjectsAsync(String fieldId, Long contextId, ProjectIds projectIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomFieldContextFromProjectsValidateBeforeCall(fieldId, contextId, projectIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCustomFieldContextFromProjectsRequestBuilder {
        private final List<String> projectIds;
        private final String fieldId;
        private final Long contextId;

        private RemoveCustomFieldContextFromProjectsRequestBuilder(List<String> projectIds, String fieldId, Long contextId) {
            this.projectIds = projectIds;
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Build call for removeCustomFieldContextFromProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the custom field context is removed from the projects. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return removeCustomFieldContextFromProjectsCall(fieldId, contextId, projectIds, _callback);
        }

        private ProjectIds buildBodyParams() {
            ProjectIds projectIds = new ProjectIds();
            projectIds.projectIds(this.projectIds);
            return projectIds;
        }

        /**
         * Execute removeCustomFieldContextFromProjects request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the custom field context is removed from the projects. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            ApiResponse<Object> localVarResp = removeCustomFieldContextFromProjectsWithHttpInfo(fieldId, contextId, projectIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCustomFieldContextFromProjects request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the custom field context is removed from the projects. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return removeCustomFieldContextFromProjectsWithHttpInfo(fieldId, contextId, projectIds);
        }

        /**
         * Execute removeCustomFieldContextFromProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the custom field context is removed from the projects. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ProjectIds projectIds = buildBodyParams();
            return removeCustomFieldContextFromProjectsAsync(fieldId, contextId, projectIds, _callback);
        }
    }

    /**
     * Remove custom field context from projects
     * Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param projectIds  (required)
     * @return RemoveCustomFieldContextFromProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the custom field context is removed from the projects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomFieldContextFromProjectsRequestBuilder removeCustomFieldContextFromProjects(List<String> projectIds, String fieldId, Long contextId) throws IllegalArgumentException {
        if (projectIds == null) throw new IllegalArgumentException("\"projectIds\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new RemoveCustomFieldContextFromProjectsRequestBuilder(projectIds, fieldId, contextId);
    }
    private okhttp3.Call removeIssueTypesFromContextCall(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIssueTypesFromContextValidateBeforeCall(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling removeIssueTypesFromContext(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling removeIssueTypesFromContext(Async)");
        }

        // verify the required parameter 'issueTypeIds' is set
        if (issueTypeIds == null) {
            throw new ApiException("Missing the required parameter 'issueTypeIds' when calling removeIssueTypesFromContext(Async)");
        }

        return removeIssueTypesFromContextCall(fieldId, contextId, issueTypeIds, _callback);

    }


    private ApiResponse<Object> removeIssueTypesFromContextWithHttpInfo(String fieldId, Long contextId, IssueTypeIds issueTypeIds) throws ApiException {
        okhttp3.Call localVarCall = removeIssueTypesFromContextValidateBeforeCall(fieldId, contextId, issueTypeIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIssueTypesFromContextAsync(String fieldId, Long contextId, IssueTypeIds issueTypeIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIssueTypesFromContextValidateBeforeCall(fieldId, contextId, issueTypeIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIssueTypesFromContextRequestBuilder {
        private final List<String> issueTypeIds;
        private final String fieldId;
        private final Long contextId;

        private RemoveIssueTypesFromContextRequestBuilder(List<String> issueTypeIds, String fieldId, Long contextId) {
            this.issueTypeIds = issueTypeIds;
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Build call for removeIssueTypesFromContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeIssueTypesFromContextCall(fieldId, contextId, issueTypeIds, _callback);
        }

        private IssueTypeIds buildBodyParams() {
            IssueTypeIds issueTypeIds = new IssueTypeIds();
            issueTypeIds.issueTypeIds(this.issueTypeIds);
            return issueTypeIds;
        }

        /**
         * Execute removeIssueTypesFromContext request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            ApiResponse<Object> localVarResp = removeIssueTypesFromContextWithHttpInfo(fieldId, contextId, issueTypeIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIssueTypesFromContext request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeIssueTypesFromContextWithHttpInfo(fieldId, contextId, issueTypeIds);
        }

        /**
         * Execute removeIssueTypesFromContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeIssueTypesFromContextAsync(fieldId, contextId, issueTypeIds, _callback);
        }
    }

    /**
     * Remove issue types from context
     * Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param issueTypeIds  (required)
     * @return RemoveIssueTypesFromContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveIssueTypesFromContextRequestBuilder removeIssueTypesFromContext(List<String> issueTypeIds, String fieldId, Long contextId) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new RemoveIssueTypesFromContextRequestBuilder(issueTypeIds, fieldId, contextId);
    }
    private okhttp3.Call setDefaultValuesCall(String fieldId, CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldContextDefaultValueUpdate;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/defaultValue"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultValuesValidateBeforeCall(String fieldId, CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling setDefaultValues(Async)");
        }

        // verify the required parameter 'customFieldContextDefaultValueUpdate' is set
        if (customFieldContextDefaultValueUpdate == null) {
            throw new ApiException("Missing the required parameter 'customFieldContextDefaultValueUpdate' when calling setDefaultValues(Async)");
        }

        return setDefaultValuesCall(fieldId, customFieldContextDefaultValueUpdate, _callback);

    }


    private ApiResponse<Object> setDefaultValuesWithHttpInfo(String fieldId, CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate) throws ApiException {
        okhttp3.Call localVarCall = setDefaultValuesValidateBeforeCall(fieldId, customFieldContextDefaultValueUpdate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultValuesAsync(String fieldId, CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultValuesValidateBeforeCall(fieldId, customFieldContextDefaultValueUpdate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultValuesRequestBuilder {
        private final String fieldId;
        private List<Object> defaultValues;

        private SetDefaultValuesRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set defaultValues
         * @param defaultValues  (optional)
         * @return SetDefaultValuesRequestBuilder
         */
        public SetDefaultValuesRequestBuilder defaultValues(List<Object> defaultValues) {
            this.defaultValues = defaultValues;
            return this;
        }
        
        /**
         * Build call for setDefaultValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate = buildBodyParams();
            return setDefaultValuesCall(fieldId, customFieldContextDefaultValueUpdate, _callback);
        }

        private CustomFieldContextDefaultValueUpdate buildBodyParams() {
            CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate = new CustomFieldContextDefaultValueUpdate();
            customFieldContextDefaultValueUpdate.defaultValues(this.defaultValues);
            return customFieldContextDefaultValueUpdate;
        }

        /**
         * Execute setDefaultValues request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate = buildBodyParams();
            ApiResponse<Object> localVarResp = setDefaultValuesWithHttpInfo(fieldId, customFieldContextDefaultValueUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultValues request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate = buildBodyParams();
            return setDefaultValuesWithHttpInfo(fieldId, customFieldContextDefaultValueUpdate);
        }

        /**
         * Execute setDefaultValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate = buildBodyParams();
            return setDefaultValuesAsync(fieldId, customFieldContextDefaultValueUpdate, _callback);
        }
    }

    /**
     * Set custom field contexts default values
     * Sets default for contexts of a custom field. Default are defined using these objects:   *  &#x60;CustomFieldContextDefaultValueDate&#x60; (type &#x60;datepicker&#x60;) for date fields.  *  &#x60;CustomFieldContextDefaultValueDateTime&#x60; (type &#x60;datetimepicker&#x60;) for date-time fields.  *  &#x60;CustomFieldContextDefaultValueSingleOption&#x60; (type &#x60;option.single&#x60;) for single choice select lists and radio buttons.  *  &#x60;CustomFieldContextDefaultValueMultipleOption&#x60; (type &#x60;option.multiple&#x60;) for multiple choice select lists and checkboxes.  *  &#x60;CustomFieldContextDefaultValueCascadingOption&#x60; (type &#x60;option.cascading&#x60;) for cascading select lists.  *  &#x60;CustomFieldContextSingleUserPickerDefaults&#x60; (type &#x60;single.user.select&#x60;) for single users.  *  &#x60;CustomFieldContextDefaultValueMultiUserPicker&#x60; (type &#x60;multi.user.select&#x60;) for user lists.  *  &#x60;CustomFieldContextDefaultValueSingleGroupPicker&#x60; (type &#x60;grouppicker.single&#x60;) for single choice group pickers.  *  &#x60;CustomFieldContextDefaultValueMultipleGroupPicker&#x60; (type &#x60;grouppicker.multiple&#x60;) for multiple choice group pickers.  *  &#x60;CustomFieldContextDefaultValueURL&#x60; (type &#x60;url&#x60;) for URLs.  *  &#x60;CustomFieldContextDefaultValueProject&#x60; (type &#x60;project&#x60;) for project pickers.  *  &#x60;CustomFieldContextDefaultValueFloat&#x60; (type &#x60;float&#x60;) for floats (floating-point numbers).  *  &#x60;CustomFieldContextDefaultValueLabels&#x60; (type &#x60;labels&#x60;) for labels.  *  &#x60;CustomFieldContextDefaultValueTextField&#x60; (type &#x60;textfield&#x60;) for text fields.  *  &#x60;CustomFieldContextDefaultValueTextArea&#x60; (type &#x60;textarea&#x60;) for text area fields.  *  &#x60;CustomFieldContextDefaultValueReadOnly&#x60; (type &#x60;readonly&#x60;) for read only (text) fields.  *  &#x60;CustomFieldContextDefaultValueMultipleVersion&#x60; (type &#x60;version.multiple&#x60;) for single choice version pickers.  *  &#x60;CustomFieldContextDefaultValueSingleVersion&#x60; (type &#x60;version.single&#x60;) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  &#x60;CustomFieldContextDefaultValueForgeStringFieldBean&#x60; (type &#x60;forge.string&#x60;) for Forge string fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiStringFieldBean&#x60; (type &#x60;forge.string.list&#x60;) for Forge string collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeObjectFieldBean&#x60; (type &#x60;forge.object&#x60;) for Forge object fields.  *  &#x60;CustomFieldContextDefaultValueForgeDateTimeFieldBean&#x60; (type &#x60;forge.datetime&#x60;) for Forge date-time fields.  *  &#x60;CustomFieldContextDefaultValueForgeGroupFieldBean&#x60; (type &#x60;forge.group&#x60;) for Forge group fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiGroupFieldBean&#x60; (type &#x60;forge.group.list&#x60;) for Forge group collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeNumberFieldBean&#x60; (type &#x60;forge.number&#x60;) for Forge number fields.  *  &#x60;CustomFieldContextDefaultValueForgeUserFieldBean&#x60; (type &#x60;forge.user&#x60;) for Forge user fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiUserFieldBean&#x60; (type &#x60;forge.user.list&#x60;) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to &#x60;null&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param customFieldContextDefaultValueUpdate  (required)
     * @return SetDefaultValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if operation is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultValuesRequestBuilder setDefaultValues(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new SetDefaultValuesRequestBuilder(fieldId);
    }
    private okhttp3.Call updateCustomFieldContextCall(String fieldId, Long contextId, CustomFieldContextUpdateDetails customFieldContextUpdateDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldContextUpdateDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldContextValidateBeforeCall(String fieldId, Long contextId, CustomFieldContextUpdateDetails customFieldContextUpdateDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateCustomFieldContext(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling updateCustomFieldContext(Async)");
        }

        // verify the required parameter 'customFieldContextUpdateDetails' is set
        if (customFieldContextUpdateDetails == null) {
            throw new ApiException("Missing the required parameter 'customFieldContextUpdateDetails' when calling updateCustomFieldContext(Async)");
        }

        return updateCustomFieldContextCall(fieldId, contextId, customFieldContextUpdateDetails, _callback);

    }


    private ApiResponse<Object> updateCustomFieldContextWithHttpInfo(String fieldId, Long contextId, CustomFieldContextUpdateDetails customFieldContextUpdateDetails) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldContextValidateBeforeCall(fieldId, contextId, customFieldContextUpdateDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldContextAsync(String fieldId, Long contextId, CustomFieldContextUpdateDetails customFieldContextUpdateDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldContextValidateBeforeCall(fieldId, contextId, customFieldContextUpdateDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldContextRequestBuilder {
        private final String fieldId;
        private final Long contextId;
        private String description;
        private String name;

        private UpdateCustomFieldContextRequestBuilder(String fieldId, Long contextId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Set description
         * @param description The description of the custom field context. The maximum length is 255 characters. (optional)
         * @return UpdateCustomFieldContextRequestBuilder
         */
        public UpdateCustomFieldContextRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the custom field context. The name must be unique. The maximum length is 255 characters. (optional)
         * @return UpdateCustomFieldContextRequestBuilder
         */
        public UpdateCustomFieldContextRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateCustomFieldContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldContextUpdateDetails customFieldContextUpdateDetails = buildBodyParams();
            return updateCustomFieldContextCall(fieldId, contextId, customFieldContextUpdateDetails, _callback);
        }

        private CustomFieldContextUpdateDetails buildBodyParams() {
            CustomFieldContextUpdateDetails customFieldContextUpdateDetails = new CustomFieldContextUpdateDetails();
            customFieldContextUpdateDetails.description(this.description);
            customFieldContextUpdateDetails.name(this.name);
            return customFieldContextUpdateDetails;
        }

        /**
         * Execute updateCustomFieldContext request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CustomFieldContextUpdateDetails customFieldContextUpdateDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateCustomFieldContextWithHttpInfo(fieldId, contextId, customFieldContextUpdateDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomFieldContext request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CustomFieldContextUpdateDetails customFieldContextUpdateDetails = buildBodyParams();
            return updateCustomFieldContextWithHttpInfo(fieldId, contextId, customFieldContextUpdateDetails);
        }

        /**
         * Execute updateCustomFieldContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the context is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CustomFieldContextUpdateDetails customFieldContextUpdateDetails = buildBodyParams();
            return updateCustomFieldContextAsync(fieldId, contextId, customFieldContextUpdateDetails, _callback);
        }
    }

    /**
     * Update custom field context
     * Updates a [custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param customFieldContextUpdateDetails  (required)
     * @return UpdateCustomFieldContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the context is updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldContextRequestBuilder updateCustomFieldContext(String fieldId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new UpdateCustomFieldContextRequestBuilder(fieldId, contextId);
    }
}
