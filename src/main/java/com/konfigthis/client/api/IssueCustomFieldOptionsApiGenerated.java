/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkCustomFieldOptionCreateRequest;
import com.konfigthis.client.model.BulkCustomFieldOptionUpdateRequest;
import com.konfigthis.client.model.CustomFieldCreatedContextOptionsList;
import com.konfigthis.client.model.CustomFieldOption;
import com.konfigthis.client.model.CustomFieldOptionCreate;
import com.konfigthis.client.model.CustomFieldOptionUpdate;
import com.konfigthis.client.model.CustomFieldUpdatedContextOptionsList;
import com.konfigthis.client.model.OrderOfCustomFieldOptions;
import com.konfigthis.client.model.PageBeanCustomFieldContextOption;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCustomFieldOptionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCustomFieldOptionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldOptionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomFieldOptionCall(String fieldId, Long contextId, BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkCustomFieldOptionCreateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldOptionValidateBeforeCall(String fieldId, Long contextId, BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling createCustomFieldOption(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling createCustomFieldOption(Async)");
        }

        // verify the required parameter 'bulkCustomFieldOptionCreateRequest' is set
        if (bulkCustomFieldOptionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkCustomFieldOptionCreateRequest' when calling createCustomFieldOption(Async)");
        }

        return createCustomFieldOptionCall(fieldId, contextId, bulkCustomFieldOptionCreateRequest, _callback);

    }


    private ApiResponse<CustomFieldCreatedContextOptionsList> createCustomFieldOptionWithHttpInfo(String fieldId, Long contextId, BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldOptionValidateBeforeCall(fieldId, contextId, bulkCustomFieldOptionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldCreatedContextOptionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldOptionAsync(String fieldId, Long contextId, BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest, final ApiCallback<CustomFieldCreatedContextOptionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldOptionValidateBeforeCall(fieldId, contextId, bulkCustomFieldOptionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldCreatedContextOptionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldOptionRequestBuilder {
        private final String fieldId;
        private final Long contextId;
        private List<CustomFieldOptionCreate> options;

        private CreateCustomFieldOptionRequestBuilder(String fieldId, Long contextId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Set options
         * @param options Details of options to create. (optional)
         * @return CreateCustomFieldOptionRequestBuilder
         */
        public CreateCustomFieldOptionRequestBuilder options(List<CustomFieldOptionCreate> options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for createCustomFieldOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest = buildBodyParams();
            return createCustomFieldOptionCall(fieldId, contextId, bulkCustomFieldOptionCreateRequest, _callback);
        }

        private BulkCustomFieldOptionCreateRequest buildBodyParams() {
            BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest = new BulkCustomFieldOptionCreateRequest();
            bulkCustomFieldOptionCreateRequest.options(this.options);
            return bulkCustomFieldOptionCreateRequest;
        }

        /**
         * Execute createCustomFieldOption request
         * @return CustomFieldCreatedContextOptionsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldCreatedContextOptionsList execute() throws ApiException {
            BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest = buildBodyParams();
            ApiResponse<CustomFieldCreatedContextOptionsList> localVarResp = createCustomFieldOptionWithHttpInfo(fieldId, contextId, bulkCustomFieldOptionCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomFieldOption request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldCreatedContextOptionsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldCreatedContextOptionsList> executeWithHttpInfo() throws ApiException {
            BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest = buildBodyParams();
            return createCustomFieldOptionWithHttpInfo(fieldId, contextId, bulkCustomFieldOptionCreateRequest);
        }

        /**
         * Execute createCustomFieldOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldCreatedContextOptionsList> _callback) throws ApiException {
            BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest = buildBodyParams();
            return createCustomFieldOptionAsync(fieldId, contextId, bulkCustomFieldOptionCreateRequest, _callback);
        }
    }

    /**
     * Create custom field options (context)
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](https://dac-static.atlassian.com) operations.**  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param bulkCustomFieldOptionCreateRequest  (required)
     * @return CreateCustomFieldOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldOptionRequestBuilder createCustomFieldOption(String fieldId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new CreateCustomFieldOptionRequestBuilder(fieldId, contextId);
    }
    private okhttp3.Call deleteCustomFieldOptionCall(String fieldId, Long contextId, Long optionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldOptionValidateBeforeCall(String fieldId, Long contextId, Long optionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteCustomFieldOption(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling deleteCustomFieldOption(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling deleteCustomFieldOption(Async)");
        }

        return deleteCustomFieldOptionCall(fieldId, contextId, optionId, _callback);

    }


    private ApiResponse<Void> deleteCustomFieldOptionWithHttpInfo(String fieldId, Long contextId, Long optionId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldOptionValidateBeforeCall(fieldId, contextId, optionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomFieldOptionAsync(String fieldId, Long contextId, Long optionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldOptionValidateBeforeCall(fieldId, contextId, optionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldOptionRequestBuilder {
        private final String fieldId;
        private final Long contextId;
        private final Long optionId;

        private DeleteCustomFieldOptionRequestBuilder(String fieldId, Long contextId, Long optionId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
            this.optionId = optionId;
        }

        /**
         * Build call for deleteCustomFieldOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the option is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldOptionCall(fieldId, contextId, optionId, _callback);
        }


        /**
         * Execute deleteCustomFieldOption request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the option is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomFieldOptionWithHttpInfo(fieldId, contextId, optionId);
        }

        /**
         * Execute deleteCustomFieldOption request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the option is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldOptionWithHttpInfo(fieldId, contextId, optionId);
        }

        /**
         * Execute deleteCustomFieldOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the option is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomFieldOptionAsync(fieldId, contextId, optionId, _callback);
        }
    }

    /**
     * Delete custom field options (context)
     * Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](https://dac-static.atlassian.com) operations.**  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context from which an option should be deleted. (required)
     * @param optionId The ID of the option to delete. (required)
     * @return DeleteCustomFieldOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the option is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldOptionRequestBuilder deleteCustomFieldOption(String fieldId, Long contextId, Long optionId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        return new DeleteCustomFieldOptionRequestBuilder(fieldId, contextId, optionId);
    }
    private okhttp3.Call getContextOptionsCall(String fieldId, Long contextId, Long optionId, Boolean onlyOptions, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optionId", optionId));
        }

        if (onlyOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyOptions", onlyOptions));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContextOptionsValidateBeforeCall(String fieldId, Long contextId, Long optionId, Boolean onlyOptions, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getContextOptions(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling getContextOptions(Async)");
        }

        return getContextOptionsCall(fieldId, contextId, optionId, onlyOptions, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanCustomFieldContextOption> getContextOptionsWithHttpInfo(String fieldId, Long contextId, Long optionId, Boolean onlyOptions, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getContextOptionsValidateBeforeCall(fieldId, contextId, optionId, onlyOptions, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContextOptionsAsync(String fieldId, Long contextId, Long optionId, Boolean onlyOptions, Long startAt, Integer maxResults, final ApiCallback<PageBeanCustomFieldContextOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContextOptionsValidateBeforeCall(fieldId, contextId, optionId, onlyOptions, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanCustomFieldContextOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContextOptionsRequestBuilder {
        private final String fieldId;
        private final Long contextId;
        private Long optionId;
        private Boolean onlyOptions;
        private Long startAt;
        private Integer maxResults;

        private GetContextOptionsRequestBuilder(String fieldId, Long contextId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Set optionId
         * @param optionId The ID of the option. (optional)
         * @return GetContextOptionsRequestBuilder
         */
        public GetContextOptionsRequestBuilder optionId(Long optionId) {
            this.optionId = optionId;
            return this;
        }
        
        /**
         * Set onlyOptions
         * @param onlyOptions Whether only options are returned. (optional, default to false)
         * @return GetContextOptionsRequestBuilder
         */
        public GetContextOptionsRequestBuilder onlyOptions(Boolean onlyOptions) {
            this.onlyOptions = onlyOptions;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetContextOptionsRequestBuilder
         */
        public GetContextOptionsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return GetContextOptionsRequestBuilder
         */
        public GetContextOptionsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getContextOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContextOptionsCall(fieldId, contextId, optionId, onlyOptions, startAt, maxResults, _callback);
        }


        /**
         * Execute getContextOptions request
         * @return PageBeanCustomFieldContextOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanCustomFieldContextOption execute() throws ApiException {
            ApiResponse<PageBeanCustomFieldContextOption> localVarResp = getContextOptionsWithHttpInfo(fieldId, contextId, optionId, onlyOptions, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContextOptions request with HTTP info returned
         * @return ApiResponse&lt;PageBeanCustomFieldContextOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanCustomFieldContextOption> executeWithHttpInfo() throws ApiException {
            return getContextOptionsWithHttpInfo(fieldId, contextId, optionId, onlyOptions, startAt, maxResults);
        }

        /**
         * Execute getContextOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanCustomFieldContextOption> _callback) throws ApiException {
            return getContextOptionsAsync(fieldId, contextId, optionId, onlyOptions, startAt, maxResults, _callback);
        }
    }

    /**
     * Get custom field options (context)
     * Returns a [paginated](https://dac-static.atlassian.com) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](https://dac-static.atlassian.com) operations.**  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @return GetContextOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetContextOptionsRequestBuilder getContextOptions(String fieldId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new GetContextOptionsRequestBuilder(fieldId, contextId);
    }
    private okhttp3.Call getOptionByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/customFieldOption/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOptionById(Async)");
        }

        return getOptionByIdCall(id, _callback);

    }


    private ApiResponse<CustomFieldOption> getOptionByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOptionByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptionByIdAsync(String id, final ApiCallback<CustomFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptionByIdRequestBuilder {
        private final String id;

        private GetOptionByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getOptionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptionByIdCall(id, _callback);
        }


        /**
         * Execute getOptionById request
         * @return CustomFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldOption execute() throws ApiException {
            ApiResponse<CustomFieldOption> localVarResp = getOptionByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptionById request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldOption> executeWithHttpInfo() throws ApiException {
            return getOptionByIdWithHttpInfo(id);
        }

        /**
         * Execute getOptionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldOption> _callback) throws ApiException {
            return getOptionByIdAsync(id, _callback);
        }
    }

    /**
     * Get custom field option
     * Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     * @param id The ID of the custom field option. (required)
     * @return GetOptionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptionByIdRequestBuilder getOptionById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOptionByIdRequestBuilder(id);
    }
    private okhttp3.Call reorderCustomFieldOptionsCall(String fieldId, Long contextId, OrderOfCustomFieldOptions orderOfCustomFieldOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderOfCustomFieldOptions;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option/move"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reorderCustomFieldOptionsValidateBeforeCall(String fieldId, Long contextId, OrderOfCustomFieldOptions orderOfCustomFieldOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling reorderCustomFieldOptions(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling reorderCustomFieldOptions(Async)");
        }

        // verify the required parameter 'orderOfCustomFieldOptions' is set
        if (orderOfCustomFieldOptions == null) {
            throw new ApiException("Missing the required parameter 'orderOfCustomFieldOptions' when calling reorderCustomFieldOptions(Async)");
        }

        return reorderCustomFieldOptionsCall(fieldId, contextId, orderOfCustomFieldOptions, _callback);

    }


    private ApiResponse<Object> reorderCustomFieldOptionsWithHttpInfo(String fieldId, Long contextId, OrderOfCustomFieldOptions orderOfCustomFieldOptions) throws ApiException {
        okhttp3.Call localVarCall = reorderCustomFieldOptionsValidateBeforeCall(fieldId, contextId, orderOfCustomFieldOptions, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reorderCustomFieldOptionsAsync(String fieldId, Long contextId, OrderOfCustomFieldOptions orderOfCustomFieldOptions, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reorderCustomFieldOptionsValidateBeforeCall(fieldId, contextId, orderOfCustomFieldOptions, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReorderCustomFieldOptionsRequestBuilder {
        private final List<String> customFieldOptionIds;
        private final String fieldId;
        private final Long contextId;
        private String after;
        private String position;

        private ReorderCustomFieldOptionsRequestBuilder(List<String> customFieldOptionIds, String fieldId, Long contextId) {
            this.customFieldOptionIds = customFieldOptionIds;
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Set after
         * @param after The ID of the custom field option or cascading option to place the moved options after. Required if &#x60;position&#x60; isn&#39;t provided. (optional)
         * @return ReorderCustomFieldOptionsRequestBuilder
         */
        public ReorderCustomFieldOptionsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set position
         * @param position The position the custom field options should be moved to. Required if &#x60;after&#x60; isn&#39;t provided. (optional)
         * @return ReorderCustomFieldOptionsRequestBuilder
         */
        public ReorderCustomFieldOptionsRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for reorderCustomFieldOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if options are reordered. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderOfCustomFieldOptions orderOfCustomFieldOptions = buildBodyParams();
            return reorderCustomFieldOptionsCall(fieldId, contextId, orderOfCustomFieldOptions, _callback);
        }

        private OrderOfCustomFieldOptions buildBodyParams() {
            OrderOfCustomFieldOptions orderOfCustomFieldOptions = new OrderOfCustomFieldOptions();
            orderOfCustomFieldOptions.after(this.after);
            orderOfCustomFieldOptions.customFieldOptionIds(this.customFieldOptionIds);
            if (this.position != null)
            orderOfCustomFieldOptions.position(OrderOfCustomFieldOptions.PositionEnum.fromValue(this.position));
            return orderOfCustomFieldOptions;
        }

        /**
         * Execute reorderCustomFieldOptions request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if options are reordered. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            OrderOfCustomFieldOptions orderOfCustomFieldOptions = buildBodyParams();
            ApiResponse<Object> localVarResp = reorderCustomFieldOptionsWithHttpInfo(fieldId, contextId, orderOfCustomFieldOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reorderCustomFieldOptions request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if options are reordered. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            OrderOfCustomFieldOptions orderOfCustomFieldOptions = buildBodyParams();
            return reorderCustomFieldOptionsWithHttpInfo(fieldId, contextId, orderOfCustomFieldOptions);
        }

        /**
         * Execute reorderCustomFieldOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if options are reordered. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            OrderOfCustomFieldOptions orderOfCustomFieldOptions = buildBodyParams();
            return reorderCustomFieldOptionsAsync(fieldId, contextId, orderOfCustomFieldOptions, _callback);
        }
    }

    /**
     * Reorder custom field options (context)
     * Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](https://dac-static.atlassian.com) operations.**  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param orderOfCustomFieldOptions  (required)
     * @return ReorderCustomFieldOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if options are reordered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ReorderCustomFieldOptionsRequestBuilder reorderCustomFieldOptions(List<String> customFieldOptionIds, String fieldId, Long contextId) throws IllegalArgumentException {
        if (customFieldOptionIds == null) throw new IllegalArgumentException("\"customFieldOptionIds\" is required but got null");
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new ReorderCustomFieldOptionsRequestBuilder(customFieldOptionIds, fieldId, contextId);
    }
    private okhttp3.Call replaceOptionsCall(String fieldId, Long optionId, Long contextId, Long replaceWith, String jql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceWith", replaceWith));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceOptionsValidateBeforeCall(String fieldId, Long optionId, Long contextId, Long replaceWith, String jql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling replaceOptions(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling replaceOptions(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling replaceOptions(Async)");
        }

        return replaceOptionsCall(fieldId, optionId, contextId, replaceWith, jql, _callback);

    }


    private ApiResponse<Void> replaceOptionsWithHttpInfo(String fieldId, Long optionId, Long contextId, Long replaceWith, String jql) throws ApiException {
        okhttp3.Call localVarCall = replaceOptionsValidateBeforeCall(fieldId, optionId, contextId, replaceWith, jql, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call replaceOptionsAsync(String fieldId, Long optionId, Long contextId, Long replaceWith, String jql, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceOptionsValidateBeforeCall(fieldId, optionId, contextId, replaceWith, jql, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReplaceOptionsRequestBuilder {
        private final String fieldId;
        private final Long optionId;
        private final Long contextId;
        private Long replaceWith;
        private String jql;

        private ReplaceOptionsRequestBuilder(String fieldId, Long optionId, Long contextId) {
            this.fieldId = fieldId;
            this.optionId = optionId;
            this.contextId = contextId;
        }

        /**
         * Set replaceWith
         * @param replaceWith The ID of the option that will replace the currently selected option. (optional)
         * @return ReplaceOptionsRequestBuilder
         */
        public ReplaceOptionsRequestBuilder replaceWith(Long replaceWith) {
            this.replaceWith = replaceWith;
            return this;
        }
        
        /**
         * Set jql
         * @param jql A JQL query that specifies the issues to be updated. For example, *project&#x3D;10000*. (optional)
         * @return ReplaceOptionsRequestBuilder
         */
        public ReplaceOptionsRequestBuilder jql(String jql) {
            this.jql = jql;
            return this;
        }
        
        /**
         * Build call for replaceOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return replaceOptionsCall(fieldId, optionId, contextId, replaceWith, jql, _callback);
        }


        /**
         * Execute replaceOptions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            replaceOptionsWithHttpInfo(fieldId, optionId, contextId, replaceWith, jql);
        }

        /**
         * Execute replaceOptions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return replaceOptionsWithHttpInfo(fieldId, optionId, contextId, replaceWith, jql);
        }

        /**
         * Execute replaceOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return replaceOptionsAsync(fieldId, optionId, contextId, replaceWith, jql, _callback);
        }
    }

    /**
     * Replace custom field options
     * Replaces the options of a custom field.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param optionId The ID of the option to be deselected. (required)
     * @param contextId The ID of the context. (required)
     * @return ReplaceOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
     </table>
     */
    public ReplaceOptionsRequestBuilder replaceOptions(String fieldId, Long optionId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new ReplaceOptionsRequestBuilder(fieldId, optionId, contextId);
    }
    private okhttp3.Call updateContextOptionCall(String fieldId, Long contextId, BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkCustomFieldOptionUpdateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/context/{contextId}/option"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()))
            .replace("{" + "contextId" + "}", localVarApiClient.escapeString(contextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContextOptionValidateBeforeCall(String fieldId, Long contextId, BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateContextOption(Async)");
        }

        // verify the required parameter 'contextId' is set
        if (contextId == null) {
            throw new ApiException("Missing the required parameter 'contextId' when calling updateContextOption(Async)");
        }

        // verify the required parameter 'bulkCustomFieldOptionUpdateRequest' is set
        if (bulkCustomFieldOptionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkCustomFieldOptionUpdateRequest' when calling updateContextOption(Async)");
        }

        return updateContextOptionCall(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, _callback);

    }


    private ApiResponse<CustomFieldUpdatedContextOptionsList> updateContextOptionWithHttpInfo(String fieldId, Long contextId, BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateContextOptionValidateBeforeCall(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldUpdatedContextOptionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContextOptionAsync(String fieldId, Long contextId, BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest, final ApiCallback<CustomFieldUpdatedContextOptionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContextOptionValidateBeforeCall(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldUpdatedContextOptionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContextOptionRequestBuilder {
        private final String fieldId;
        private final Long contextId;
        private List<CustomFieldOptionUpdate> options;

        private UpdateContextOptionRequestBuilder(String fieldId, Long contextId) {
            this.fieldId = fieldId;
            this.contextId = contextId;
        }

        /**
         * Set options
         * @param options Details of the options to update. (optional)
         * @return UpdateContextOptionRequestBuilder
         */
        public UpdateContextOptionRequestBuilder options(List<CustomFieldOptionUpdate> options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateContextOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest = buildBodyParams();
            return updateContextOptionCall(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, _callback);
        }

        private BulkCustomFieldOptionUpdateRequest buildBodyParams() {
            BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest = new BulkCustomFieldOptionUpdateRequest();
            bulkCustomFieldOptionUpdateRequest.options(this.options);
            return bulkCustomFieldOptionUpdateRequest;
        }

        /**
         * Execute updateContextOption request
         * @return CustomFieldUpdatedContextOptionsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldUpdatedContextOptionsList execute() throws ApiException {
            BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest = buildBodyParams();
            ApiResponse<CustomFieldUpdatedContextOptionsList> localVarResp = updateContextOptionWithHttpInfo(fieldId, contextId, bulkCustomFieldOptionUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContextOption request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldUpdatedContextOptionsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldUpdatedContextOptionsList> executeWithHttpInfo() throws ApiException {
            BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest = buildBodyParams();
            return updateContextOptionWithHttpInfo(fieldId, contextId, bulkCustomFieldOptionUpdateRequest);
        }

        /**
         * Execute updateContextOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldUpdatedContextOptionsList> _callback) throws ApiException {
            BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest = buildBodyParams();
            return updateContextOptionAsync(fieldId, contextId, bulkCustomFieldOptionUpdateRequest, _callback);
        }
    }

    /**
     * Update custom field options (context)
     * Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren&#39;t updated and aren&#39;t reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param bulkCustomFieldOptionUpdateRequest  (required)
     * @return UpdateContextOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContextOptionRequestBuilder updateContextOption(String fieldId, Long contextId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (contextId == null) throw new IllegalArgumentException("\"contextId\" is required but got null");
        return new UpdateContextOptionRequestBuilder(fieldId, contextId);
    }
}
