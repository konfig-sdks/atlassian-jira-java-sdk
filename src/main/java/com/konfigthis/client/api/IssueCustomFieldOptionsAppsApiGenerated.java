/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.IssueFieldOption;
import com.konfigthis.client.model.IssueFieldOptionConfiguration;
import com.konfigthis.client.model.IssueFieldOptionCreateBean;
import com.konfigthis.client.model.PageBeanIssueFieldOption;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCustomFieldOptionsAppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCustomFieldOptionsAppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldOptionsAppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFieldOptionCall(String fieldKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldOptionValidateBeforeCall(String fieldKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling createFieldOption(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createFieldOption(Async)");
        }

        return createFieldOptionCall(fieldKey, requestBody, _callback);

    }


    private ApiResponse<IssueFieldOption> createFieldOptionWithHttpInfo(String fieldKey, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createFieldOptionValidateBeforeCall(fieldKey, requestBody, null);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFieldOptionAsync(String fieldKey, Map<String, Object> requestBody, final ApiCallback<IssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldOptionValidateBeforeCall(fieldKey, requestBody, _callback);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFieldOptionRequestBuilder {
        private final String value;
        private final String fieldKey;
        private IssueFieldOptionConfiguration config;
        private Map<String, Object> properties;

        private CreateFieldOptionRequestBuilder(String value, String fieldKey) {
            this.value = value;
            this.fieldKey = fieldKey;
        }

        /**
         * Set config
         * @param config  (optional)
         * @return CreateFieldOptionRequestBuilder
         */
        public CreateFieldOptionRequestBuilder config(IssueFieldOptionConfiguration config) {
            this.config = config;
            return this;
        }
        
        /**
         * Set properties
         * @param properties The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module. (optional)
         * @return CreateFieldOptionRequestBuilder
         */
        public CreateFieldOptionRequestBuilder properties(Map<String, Object> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for createFieldOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createFieldOptionCall(fieldKey, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("config", this.config);
            requestBody.put("properties", this.properties);
            requestBody.put("value", this.value);
            return requestBody;
        }

        /**
         * Execute createFieldOption request
         * @return IssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public IssueFieldOption execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<IssueFieldOption> localVarResp = createFieldOptionWithHttpInfo(fieldKey, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFieldOption request with HTTP info returned
         * @return ApiResponse&lt;IssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueFieldOption> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createFieldOptionWithHttpInfo(fieldKey, requestBody);
        }

        /**
         * Execute createFieldOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueFieldOption> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createFieldOptionAsync(fieldKey, requestBody, _callback);
        }
    }

    /**
     * Create issue field option
     * Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param requestBody  (required)
     * @return CreateFieldOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the option is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldOptionRequestBuilder createFieldOption(String value, String fieldKey) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        return new CreateFieldOptionRequestBuilder(value, fieldKey);
    }
    private okhttp3.Call deleteOptionCall(String fieldKey, Long optionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/{optionId}"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOptionValidateBeforeCall(String fieldKey, Long optionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling deleteOption(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling deleteOption(Async)");
        }

        return deleteOptionCall(fieldKey, optionId, _callback);

    }


    private ApiResponse<Object> deleteOptionWithHttpInfo(String fieldKey, Long optionId) throws ApiException {
        okhttp3.Call localVarCall = deleteOptionValidateBeforeCall(fieldKey, optionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteOptionAsync(String fieldKey, Long optionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOptionValidateBeforeCall(fieldKey, optionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteOptionRequestBuilder {
        private final String fieldKey;
        private final Long optionId;

        private DeleteOptionRequestBuilder(String fieldKey, Long optionId) {
            this.fieldKey = fieldKey;
            this.optionId = optionId;
        }

        /**
         * Build call for deleteOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the field option is deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field or option is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the option is selected for the field in any issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOptionCall(fieldKey, optionId, _callback);
        }


        /**
         * Execute deleteOption request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the field option is deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field or option is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the option is selected for the field in any issue. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteOptionWithHttpInfo(fieldKey, optionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteOption request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the field option is deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field or option is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the option is selected for the field in any issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteOptionWithHttpInfo(fieldKey, optionId);
        }

        /**
         * Execute deleteOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the field option is deleted. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field or option is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the option is selected for the field in any issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteOptionAsync(fieldKey, optionId, _callback);
        }
    }

    /**
     * Delete issue field option
     * Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be deleted. (required)
     * @return DeleteOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the field option is deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field or option is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the option is selected for the field in any issue. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOptionRequestBuilder deleteOption(String fieldKey, Long optionId) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        return new DeleteOptionRequestBuilder(fieldKey, optionId);
    }
    private okhttp3.Call deselectOptionFromIssuesCall(String fieldKey, Long optionId, Long replaceWith, String jql, Boolean overrideScreenSecurity, Boolean overrideEditableFlag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/{optionId}/issue"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceWith", replaceWith));
        }

        if (jql != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jql", jql));
        }

        if (overrideScreenSecurity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideScreenSecurity", overrideScreenSecurity));
        }

        if (overrideEditableFlag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideEditableFlag", overrideEditableFlag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deselectOptionFromIssuesValidateBeforeCall(String fieldKey, Long optionId, Long replaceWith, String jql, Boolean overrideScreenSecurity, Boolean overrideEditableFlag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling deselectOptionFromIssues(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling deselectOptionFromIssues(Async)");
        }

        return deselectOptionFromIssuesCall(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag, _callback);

    }


    private ApiResponse<Void> deselectOptionFromIssuesWithHttpInfo(String fieldKey, Long optionId, Long replaceWith, String jql, Boolean overrideScreenSecurity, Boolean overrideEditableFlag) throws ApiException {
        okhttp3.Call localVarCall = deselectOptionFromIssuesValidateBeforeCall(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deselectOptionFromIssuesAsync(String fieldKey, Long optionId, Long replaceWith, String jql, Boolean overrideScreenSecurity, Boolean overrideEditableFlag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deselectOptionFromIssuesValidateBeforeCall(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeselectOptionFromIssuesRequestBuilder {
        private final String fieldKey;
        private final Long optionId;
        private Long replaceWith;
        private String jql;
        private Boolean overrideScreenSecurity;
        private Boolean overrideEditableFlag;

        private DeselectOptionFromIssuesRequestBuilder(String fieldKey, Long optionId) {
            this.fieldKey = fieldKey;
            this.optionId = optionId;
        }

        /**
         * Set replaceWith
         * @param replaceWith The ID of the option that will replace the currently selected option. (optional)
         * @return DeselectOptionFromIssuesRequestBuilder
         */
        public DeselectOptionFromIssuesRequestBuilder replaceWith(Long replaceWith) {
            this.replaceWith = replaceWith;
            return this;
        }
        
        /**
         * Set jql
         * @param jql A JQL query that specifies the issues to be updated. For example, *project&#x3D;10000*. (optional)
         * @return DeselectOptionFromIssuesRequestBuilder
         */
        public DeselectOptionFromIssuesRequestBuilder jql(String jql) {
            this.jql = jql;
            return this;
        }
        
        /**
         * Set overrideScreenSecurity
         * @param overrideScreenSecurity Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission. (optional, default to false)
         * @return DeselectOptionFromIssuesRequestBuilder
         */
        public DeselectOptionFromIssuesRequestBuilder overrideScreenSecurity(Boolean overrideScreenSecurity) {
            this.overrideScreenSecurity = overrideScreenSecurity;
            return this;
        }
        
        /**
         * Set overrideEditableFlag
         * @param overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
         * @return DeselectOptionFromIssuesRequestBuilder
         */
        public DeselectOptionFromIssuesRequestBuilder overrideEditableFlag(Boolean overrideEditableFlag) {
            this.overrideEditableFlag = overrideEditableFlag;
            return this;
        }
        
        /**
         * Build call for deselectOptionFromIssues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deselectOptionFromIssuesCall(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag, _callback);
        }


        /**
         * Execute deselectOptionFromIssues request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deselectOptionFromIssuesWithHttpInfo(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag);
        }

        /**
         * Execute deselectOptionFromIssues request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deselectOptionFromIssuesWithHttpInfo(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag);
        }

        /**
         * Execute deselectOptionFromIssues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deselectOptionFromIssuesAsync(fieldKey, optionId, replaceWith, jql, overrideScreenSecurity, overrideEditableFlag, _callback);
        }
    }

    /**
     * Replace issue field option
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using &#x60;overrideScreenSecurity&#x60; and &#x60;overrideEditableFlag&#x60;.  This is an [asynchronous operation](https://dac-static.atlassian.com). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be deselected. (required)
     * @return DeselectOptionFromIssuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found or does not support options, or the options to be replaced are not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeselectOptionFromIssuesRequestBuilder deselectOptionFromIssues(String fieldKey, Long optionId) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        return new DeselectOptionFromIssuesRequestBuilder(fieldKey, optionId);
    }
    private okhttp3.Call getAllIssueFieldOptionsCall(String fieldKey, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIssueFieldOptionsValidateBeforeCall(String fieldKey, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling getAllIssueFieldOptions(Async)");
        }

        return getAllIssueFieldOptionsCall(fieldKey, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanIssueFieldOption> getAllIssueFieldOptionsWithHttpInfo(String fieldKey, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getAllIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllIssueFieldOptionsAsync(String fieldKey, Long startAt, Integer maxResults, final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllIssueFieldOptionsRequestBuilder {
        private final String fieldKey;
        private Long startAt;
        private Integer maxResults;

        private GetAllIssueFieldOptionsRequestBuilder(String fieldKey) {
            this.fieldKey = fieldKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetAllIssueFieldOptionsRequestBuilder
         */
        public GetAllIssueFieldOptionsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetAllIssueFieldOptionsRequestBuilder
         */
        public GetAllIssueFieldOptionsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getAllIssueFieldOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllIssueFieldOptionsCall(fieldKey, startAt, maxResults, _callback);
        }


        /**
         * Execute getAllIssueFieldOptions request
         * @return PageBeanIssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueFieldOption execute() throws ApiException {
            ApiResponse<PageBeanIssueFieldOption> localVarResp = getAllIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllIssueFieldOptions request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueFieldOption> executeWithHttpInfo() throws ApiException {
            return getAllIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults);
        }

        /**
         * Execute getAllIssueFieldOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {
            return getAllIssueFieldOptionsAsync(fieldKey, startAt, maxResults, _callback);
        }
    }

    /**
     * Get all issue field options
     * Returns a [paginated](https://dac-static.atlassian.com) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @return GetAllIssueFieldOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllIssueFieldOptionsRequestBuilder getAllIssueFieldOptions(String fieldKey) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        return new GetAllIssueFieldOptionsRequestBuilder(fieldKey);
    }
    private okhttp3.Call getIssueFieldOptionCall(String fieldKey, Long optionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/{optionId}"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueFieldOptionValidateBeforeCall(String fieldKey, Long optionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling getIssueFieldOption(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling getIssueFieldOption(Async)");
        }

        return getIssueFieldOptionCall(fieldKey, optionId, _callback);

    }


    private ApiResponse<IssueFieldOption> getIssueFieldOptionWithHttpInfo(String fieldKey, Long optionId) throws ApiException {
        okhttp3.Call localVarCall = getIssueFieldOptionValidateBeforeCall(fieldKey, optionId, null);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueFieldOptionAsync(String fieldKey, Long optionId, final ApiCallback<IssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueFieldOptionValidateBeforeCall(fieldKey, optionId, _callback);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueFieldOptionRequestBuilder {
        private final String fieldKey;
        private final Long optionId;

        private GetIssueFieldOptionRequestBuilder(String fieldKey, Long optionId) {
            this.fieldKey = fieldKey;
            this.optionId = optionId;
        }

        /**
         * Build call for getIssueFieldOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the requested option is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the option is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueFieldOptionCall(fieldKey, optionId, _callback);
        }


        /**
         * Execute getIssueFieldOption request
         * @return IssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the requested option is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the option is not found. </td><td>  -  </td></tr>
         </table>
         */
        public IssueFieldOption execute() throws ApiException {
            ApiResponse<IssueFieldOption> localVarResp = getIssueFieldOptionWithHttpInfo(fieldKey, optionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueFieldOption request with HTTP info returned
         * @return ApiResponse&lt;IssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the requested option is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the option is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueFieldOption> executeWithHttpInfo() throws ApiException {
            return getIssueFieldOptionWithHttpInfo(fieldKey, optionId);
        }

        /**
         * Execute getIssueFieldOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the requested option is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the option is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueFieldOption> _callback) throws ApiException {
            return getIssueFieldOptionAsync(fieldKey, optionId, _callback);
        }
    }

    /**
     * Get issue field option
     * Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be returned. (required)
     * @return GetIssueFieldOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the requested option is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the option is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueFieldOptionRequestBuilder getIssueFieldOption(String fieldKey, Long optionId) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        return new GetIssueFieldOptionRequestBuilder(fieldKey, optionId);
    }
    private okhttp3.Call getSelectableIssueFieldOptionsCall(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/suggestions/edit"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelectableIssueFieldOptionsValidateBeforeCall(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling getSelectableIssueFieldOptions(Async)");
        }

        return getSelectableIssueFieldOptionsCall(fieldKey, startAt, maxResults, projectId, _callback);

    }


    private ApiResponse<PageBeanIssueFieldOption> getSelectableIssueFieldOptionsWithHttpInfo(String fieldKey, Long startAt, Integer maxResults, Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getSelectableIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, projectId, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSelectableIssueFieldOptionsAsync(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelectableIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, projectId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSelectableIssueFieldOptionsRequestBuilder {
        private final String fieldKey;
        private Long startAt;
        private Integer maxResults;
        private Long projectId;

        private GetSelectableIssueFieldOptionsRequestBuilder(String fieldKey) {
            this.fieldKey = fieldKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetSelectableIssueFieldOptionsRequestBuilder
         */
        public GetSelectableIssueFieldOptionsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetSelectableIssueFieldOptionsRequestBuilder
         */
        public GetSelectableIssueFieldOptionsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Filters the results to options that are only available in the specified project. (optional)
         * @return GetSelectableIssueFieldOptionsRequestBuilder
         */
        public GetSelectableIssueFieldOptionsRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for getSelectableIssueFieldOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSelectableIssueFieldOptionsCall(fieldKey, startAt, maxResults, projectId, _callback);
        }


        /**
         * Execute getSelectableIssueFieldOptions request
         * @return PageBeanIssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueFieldOption execute() throws ApiException {
            ApiResponse<PageBeanIssueFieldOption> localVarResp = getSelectableIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults, projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSelectableIssueFieldOptions request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueFieldOption> executeWithHttpInfo() throws ApiException {
            return getSelectableIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults, projectId);
        }

        /**
         * Execute getSelectableIssueFieldOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {
            return getSelectableIssueFieldOptionsAsync(fieldKey, startAt, maxResults, projectId, _callback);
        }
    }

    /**
     * Get selectable issue field options
     * Returns a [paginated](https://dac-static.atlassian.com) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @return GetSelectableIssueFieldOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
     </table>
     */
    public GetSelectableIssueFieldOptionsRequestBuilder getSelectableIssueFieldOptions(String fieldKey) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        return new GetSelectableIssueFieldOptionsRequestBuilder(fieldKey);
    }
    private okhttp3.Call getVisibleIssueFieldOptionsCall(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/suggestions/search"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVisibleIssueFieldOptionsValidateBeforeCall(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling getVisibleIssueFieldOptions(Async)");
        }

        return getVisibleIssueFieldOptionsCall(fieldKey, startAt, maxResults, projectId, _callback);

    }


    private ApiResponse<PageBeanIssueFieldOption> getVisibleIssueFieldOptionsWithHttpInfo(String fieldKey, Long startAt, Integer maxResults, Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getVisibleIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, projectId, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVisibleIssueFieldOptionsAsync(String fieldKey, Long startAt, Integer maxResults, Long projectId, final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVisibleIssueFieldOptionsValidateBeforeCall(fieldKey, startAt, maxResults, projectId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVisibleIssueFieldOptionsRequestBuilder {
        private final String fieldKey;
        private Long startAt;
        private Integer maxResults;
        private Long projectId;

        private GetVisibleIssueFieldOptionsRequestBuilder(String fieldKey) {
            this.fieldKey = fieldKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetVisibleIssueFieldOptionsRequestBuilder
         */
        public GetVisibleIssueFieldOptionsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetVisibleIssueFieldOptionsRequestBuilder
         */
        public GetVisibleIssueFieldOptionsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId Filters the results to options that are only available in the specified project. (optional)
         * @return GetVisibleIssueFieldOptionsRequestBuilder
         */
        public GetVisibleIssueFieldOptionsRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for getVisibleIssueFieldOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVisibleIssueFieldOptionsCall(fieldKey, startAt, maxResults, projectId, _callback);
        }


        /**
         * Execute getVisibleIssueFieldOptions request
         * @return PageBeanIssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueFieldOption execute() throws ApiException {
            ApiResponse<PageBeanIssueFieldOption> localVarResp = getVisibleIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults, projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVisibleIssueFieldOptions request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueFieldOption> executeWithHttpInfo() throws ApiException {
            return getVisibleIssueFieldOptionsWithHttpInfo(fieldKey, startAt, maxResults, projectId);
        }

        /**
         * Execute getVisibleIssueFieldOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueFieldOption> _callback) throws ApiException {
            return getVisibleIssueFieldOptionsAsync(fieldKey, startAt, maxResults, projectId, _callback);
        }
    }

    /**
     * Get visible issue field options
     * Returns a [paginated](https://dac-static.atlassian.com) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @return GetVisibleIssueFieldOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found or does not support options. </td><td>  -  </td></tr>
     </table>
     */
    public GetVisibleIssueFieldOptionsRequestBuilder getVisibleIssueFieldOptions(String fieldKey) throws IllegalArgumentException {
        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        return new GetVisibleIssueFieldOptionsRequestBuilder(fieldKey);
    }
    private okhttp3.Call updateOptionByIdCall(String fieldKey, Long optionId, IssueFieldOption issueFieldOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueFieldOption;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldKey}/option/{optionId}"
            .replace("{" + "fieldKey" + "}", localVarApiClient.escapeString(fieldKey.toString()))
            .replace("{" + "optionId" + "}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOptionByIdValidateBeforeCall(String fieldKey, Long optionId, IssueFieldOption issueFieldOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldKey' is set
        if (fieldKey == null) {
            throw new ApiException("Missing the required parameter 'fieldKey' when calling updateOptionById(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling updateOptionById(Async)");
        }

        // verify the required parameter 'issueFieldOption' is set
        if (issueFieldOption == null) {
            throw new ApiException("Missing the required parameter 'issueFieldOption' when calling updateOptionById(Async)");
        }

        return updateOptionByIdCall(fieldKey, optionId, issueFieldOption, _callback);

    }


    private ApiResponse<IssueFieldOption> updateOptionByIdWithHttpInfo(String fieldKey, Long optionId, IssueFieldOption issueFieldOption) throws ApiException {
        okhttp3.Call localVarCall = updateOptionByIdValidateBeforeCall(fieldKey, optionId, issueFieldOption, null);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOptionByIdAsync(String fieldKey, Long optionId, IssueFieldOption issueFieldOption, final ApiCallback<IssueFieldOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOptionByIdValidateBeforeCall(fieldKey, optionId, issueFieldOption, _callback);
        Type localVarReturnType = new TypeToken<IssueFieldOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOptionByIdRequestBuilder {
        private final Long id;
        private final String value;
        private final String fieldKey;
        private final Long optionId;
        private IssueFieldOptionConfiguration config;
        private Map<String, Object> properties;

        private UpdateOptionByIdRequestBuilder(Long id, String value, String fieldKey, Long optionId) {
            this.id = id;
            this.value = value;
            this.fieldKey = fieldKey;
            this.optionId = optionId;
        }

        /**
         * Set config
         * @param config  (optional)
         * @return UpdateOptionByIdRequestBuilder
         */
        public UpdateOptionByIdRequestBuilder config(IssueFieldOptionConfiguration config) {
            this.config = config;
            return this;
        }
        
        /**
         * Set properties
         * @param properties The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module. (optional)
         * @return UpdateOptionByIdRequestBuilder
         */
        public UpdateOptionByIdRequestBuilder properties(Map<String, Object> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for updateOptionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the option is updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueFieldOption issueFieldOption = buildBodyParams();
            return updateOptionByIdCall(fieldKey, optionId, issueFieldOption, _callback);
        }

        private IssueFieldOption buildBodyParams() {
            IssueFieldOption issueFieldOption = new IssueFieldOption();
            issueFieldOption.config(this.config);
            issueFieldOption.id(this.id);
            issueFieldOption.properties(this.properties);
            issueFieldOption.value(this.value);
            return issueFieldOption;
        }

        /**
         * Execute updateOptionById request
         * @return IssueFieldOption
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the option is updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public IssueFieldOption execute() throws ApiException {
            IssueFieldOption issueFieldOption = buildBodyParams();
            ApiResponse<IssueFieldOption> localVarResp = updateOptionByIdWithHttpInfo(fieldKey, optionId, issueFieldOption);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOptionById request with HTTP info returned
         * @return ApiResponse&lt;IssueFieldOption&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the option is updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueFieldOption> executeWithHttpInfo() throws ApiException {
            IssueFieldOption issueFieldOption = buildBodyParams();
            return updateOptionByIdWithHttpInfo(fieldKey, optionId, issueFieldOption);
        }

        /**
         * Execute updateOptionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the option is updated or created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueFieldOption> _callback) throws ApiException {
            IssueFieldOption issueFieldOption = buildBodyParams();
            return updateOptionByIdAsync(fieldKey, optionId, issueFieldOption, _callback);
        }
    }

    /**
     * Update issue field option
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](https://dac-static.atlassian.com) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be updated. (required)
     * @param issueFieldOption  (required)
     * @return UpdateOptionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the option is updated or created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as a Jira administrator or the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOptionByIdRequestBuilder updateOptionById(Long id, String value, String fieldKey, Long optionId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (fieldKey == null) throw new IllegalArgumentException("\"fieldKey\" is required but got null");
            

        if (optionId == null) throw new IllegalArgumentException("\"optionId\" is required but got null");
        return new UpdateOptionByIdRequestBuilder(id, value, fieldKey, optionId);
    }
}
