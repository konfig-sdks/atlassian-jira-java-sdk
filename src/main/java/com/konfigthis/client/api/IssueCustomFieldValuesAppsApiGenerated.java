/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldValueUpdate;
import com.konfigthis.client.model.CustomFieldValueUpdateDetails;
import com.konfigthis.client.model.MultipleCustomFieldValuesUpdate;
import com.konfigthis.client.model.MultipleCustomFieldValuesUpdateDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueCustomFieldValuesAppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueCustomFieldValuesAppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldValuesAppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call updateValueCall(String fieldIdOrKey, CustomFieldValueUpdateDetails customFieldValueUpdateDetails, Boolean generateChangelog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldValueUpdateDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/app/field/{fieldIdOrKey}/value"
            .replace("{" + "fieldIdOrKey" + "}", localVarApiClient.escapeString(fieldIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generateChangelog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generateChangelog", generateChangelog));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValueValidateBeforeCall(String fieldIdOrKey, CustomFieldValueUpdateDetails customFieldValueUpdateDetails, Boolean generateChangelog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldIdOrKey' is set
        if (fieldIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'fieldIdOrKey' when calling updateValue(Async)");
        }

        // verify the required parameter 'customFieldValueUpdateDetails' is set
        if (customFieldValueUpdateDetails == null) {
            throw new ApiException("Missing the required parameter 'customFieldValueUpdateDetails' when calling updateValue(Async)");
        }

        return updateValueCall(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog, _callback);

    }


    private ApiResponse<Object> updateValueWithHttpInfo(String fieldIdOrKey, CustomFieldValueUpdateDetails customFieldValueUpdateDetails, Boolean generateChangelog) throws ApiException {
        okhttp3.Call localVarCall = updateValueValidateBeforeCall(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateValueAsync(String fieldIdOrKey, CustomFieldValueUpdateDetails customFieldValueUpdateDetails, Boolean generateChangelog, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValueValidateBeforeCall(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateValueRequestBuilder {
        private final String fieldIdOrKey;
        private List<CustomFieldValueUpdate> updates;
        private Boolean generateChangelog;

        private UpdateValueRequestBuilder(String fieldIdOrKey) {
            this.fieldIdOrKey = fieldIdOrKey;
        }

        /**
         * Set updates
         * @param updates The list of custom field update details. (optional)
         * @return UpdateValueRequestBuilder
         */
        public UpdateValueRequestBuilder updates(List<CustomFieldValueUpdate> updates) {
            this.updates = updates;
            return this;
        }
        
        /**
         * Set generateChangelog
         * @param generateChangelog Whether to generate a changelog for this update. (optional, default to true)
         * @return UpdateValueRequestBuilder
         */
        public UpdateValueRequestBuilder generateChangelog(Boolean generateChangelog) {
            this.generateChangelog = generateChangelog;
            return this;
        }
        
        /**
         * Build call for updateValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldValueUpdateDetails customFieldValueUpdateDetails = buildBodyParams();
            return updateValueCall(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog, _callback);
        }

        private CustomFieldValueUpdateDetails buildBodyParams() {
            CustomFieldValueUpdateDetails customFieldValueUpdateDetails = new CustomFieldValueUpdateDetails();
            customFieldValueUpdateDetails.updates(this.updates);
            return customFieldValueUpdateDetails;
        }

        /**
         * Execute updateValue request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CustomFieldValueUpdateDetails customFieldValueUpdateDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateValueWithHttpInfo(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateValue request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CustomFieldValueUpdateDetails customFieldValueUpdateDetails = buildBodyParams();
            return updateValueWithHttpInfo(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog);
        }

        /**
         * Execute updateValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CustomFieldValueUpdateDetails customFieldValueUpdateDetails = buildBodyParams();
            return updateValueAsync(fieldIdOrKey, customFieldValueUpdateDetails, generateChangelog, _callback);
        }
    }

    /**
     * Update custom field value
     * Updates the value of a custom field on one or more issues.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](https://dac-static.atlassian.com) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateDetails  (required)
     * @return UpdateValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateValueRequestBuilder updateValue(String fieldIdOrKey) throws IllegalArgumentException {
        if (fieldIdOrKey == null) throw new IllegalArgumentException("\"fieldIdOrKey\" is required but got null");
            

        return new UpdateValueRequestBuilder(fieldIdOrKey);
    }
    private okhttp3.Call updateValuesCall(MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails, Boolean generateChangelog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multipleCustomFieldValuesUpdateDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/app/field/value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (generateChangelog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generateChangelog", generateChangelog));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValuesValidateBeforeCall(MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails, Boolean generateChangelog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'multipleCustomFieldValuesUpdateDetails' is set
        if (multipleCustomFieldValuesUpdateDetails == null) {
            throw new ApiException("Missing the required parameter 'multipleCustomFieldValuesUpdateDetails' when calling updateValues(Async)");
        }

        return updateValuesCall(multipleCustomFieldValuesUpdateDetails, generateChangelog, _callback);

    }


    private ApiResponse<Object> updateValuesWithHttpInfo(MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails, Boolean generateChangelog) throws ApiException {
        okhttp3.Call localVarCall = updateValuesValidateBeforeCall(multipleCustomFieldValuesUpdateDetails, generateChangelog, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateValuesAsync(MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails, Boolean generateChangelog, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValuesValidateBeforeCall(multipleCustomFieldValuesUpdateDetails, generateChangelog, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateValuesRequestBuilder {
        private List<MultipleCustomFieldValuesUpdate> updates;
        private Boolean generateChangelog;

        private UpdateValuesRequestBuilder() {
        }

        /**
         * Set updates
         * @param updates  (optional)
         * @return UpdateValuesRequestBuilder
         */
        public UpdateValuesRequestBuilder updates(List<MultipleCustomFieldValuesUpdate> updates) {
            this.updates = updates;
            return this;
        }
        
        /**
         * Set generateChangelog
         * @param generateChangelog Whether to generate a changelog for this update. (optional, default to true)
         * @return UpdateValuesRequestBuilder
         */
        public UpdateValuesRequestBuilder generateChangelog(Boolean generateChangelog) {
            this.generateChangelog = generateChangelog;
            return this;
        }
        
        /**
         * Build call for updateValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided all the fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails = buildBodyParams();
            return updateValuesCall(multipleCustomFieldValuesUpdateDetails, generateChangelog, _callback);
        }

        private MultipleCustomFieldValuesUpdateDetails buildBodyParams() {
            MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails = new MultipleCustomFieldValuesUpdateDetails();
            multipleCustomFieldValuesUpdateDetails.updates(this.updates);
            return multipleCustomFieldValuesUpdateDetails;
        }

        /**
         * Execute updateValues request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided all the fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateValuesWithHttpInfo(multipleCustomFieldValuesUpdateDetails, generateChangelog);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateValues request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided all the fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails = buildBodyParams();
            return updateValuesWithHttpInfo(multipleCustomFieldValuesUpdateDetails, generateChangelog);
        }

        /**
         * Execute updateValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided all the fields. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails = buildBodyParams();
            return updateValuesAsync(multipleCustomFieldValuesUpdateDetails, generateChangelog, _callback);
        }
    }

    /**
     * Update custom fields
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](https://dac-static.atlassian.com) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     * @param multipleCustomFieldValuesUpdateDetails  (required)
     * @return UpdateValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided all the fields. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateValuesRequestBuilder updateValues() throws IllegalArgumentException {
        return new UpdateValuesRequestBuilder();
    }
}
