/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociateFieldConfigurationsWithIssueTypesRequest;
import com.konfigthis.client.model.FieldConfiguration;
import com.konfigthis.client.model.FieldConfigurationDetails;
import com.konfigthis.client.model.FieldConfigurationItem;
import com.konfigthis.client.model.FieldConfigurationItemsDetails;
import com.konfigthis.client.model.FieldConfigurationScheme;
import com.konfigthis.client.model.FieldConfigurationSchemeProjectAssociation;
import com.konfigthis.client.model.FieldConfigurationToIssueTypeMapping;
import com.konfigthis.client.model.IssueTypeIdsToRemove;
import com.konfigthis.client.model.PageBeanFieldConfigurationDetails;
import com.konfigthis.client.model.PageBeanFieldConfigurationIssueTypeItem;
import com.konfigthis.client.model.PageBeanFieldConfigurationItem;
import com.konfigthis.client.model.PageBeanFieldConfigurationScheme;
import com.konfigthis.client.model.PageBeanFieldConfigurationSchemeProjects;
import java.util.Set;
import com.konfigthis.client.model.UpdateFieldConfigurationSchemeDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueFieldConfigurationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueFieldConfigurationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueFieldConfigurationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignFieldConfigurationSchemeToProjectCall(FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldConfigurationSchemeProjectAssociation;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignFieldConfigurationSchemeToProjectValidateBeforeCall(FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldConfigurationSchemeProjectAssociation' is set
        if (fieldConfigurationSchemeProjectAssociation == null) {
            throw new ApiException("Missing the required parameter 'fieldConfigurationSchemeProjectAssociation' when calling assignFieldConfigurationSchemeToProject(Async)");
        }

        return assignFieldConfigurationSchemeToProjectCall(fieldConfigurationSchemeProjectAssociation, _callback);

    }


    private ApiResponse<Object> assignFieldConfigurationSchemeToProjectWithHttpInfo(FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation) throws ApiException {
        okhttp3.Call localVarCall = assignFieldConfigurationSchemeToProjectValidateBeforeCall(fieldConfigurationSchemeProjectAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignFieldConfigurationSchemeToProjectAsync(FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignFieldConfigurationSchemeToProjectValidateBeforeCall(fieldConfigurationSchemeProjectAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignFieldConfigurationSchemeToProjectRequestBuilder {
        private final String projectId;
        private String fieldConfigurationSchemeId;

        private AssignFieldConfigurationSchemeToProjectRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set fieldConfigurationSchemeId
         * @param fieldConfigurationSchemeId The ID of the field configuration scheme. If the field configuration scheme ID is &#x60;null&#x60;, the operation assigns the default field configuration scheme. (optional)
         * @return AssignFieldConfigurationSchemeToProjectRequestBuilder
         */
        public AssignFieldConfigurationSchemeToProjectRequestBuilder fieldConfigurationSchemeId(String fieldConfigurationSchemeId) {
            this.fieldConfigurationSchemeId = fieldConfigurationSchemeId;
            return this;
        }
        
        /**
         * Build call for assignFieldConfigurationSchemeToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation = buildBodyParams();
            return assignFieldConfigurationSchemeToProjectCall(fieldConfigurationSchemeProjectAssociation, _callback);
        }

        private FieldConfigurationSchemeProjectAssociation buildBodyParams() {
            FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation = new FieldConfigurationSchemeProjectAssociation();
            fieldConfigurationSchemeProjectAssociation.fieldConfigurationSchemeId(this.fieldConfigurationSchemeId);
            fieldConfigurationSchemeProjectAssociation.projectId(this.projectId);
            return fieldConfigurationSchemeProjectAssociation;
        }

        /**
         * Execute assignFieldConfigurationSchemeToProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation = buildBodyParams();
            ApiResponse<Object> localVarResp = assignFieldConfigurationSchemeToProjectWithHttpInfo(fieldConfigurationSchemeProjectAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignFieldConfigurationSchemeToProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation = buildBodyParams();
            return assignFieldConfigurationSchemeToProjectWithHttpInfo(fieldConfigurationSchemeProjectAssociation);
        }

        /**
         * Execute assignFieldConfigurationSchemeToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation = buildBodyParams();
            return assignFieldConfigurationSchemeToProjectAsync(fieldConfigurationSchemeProjectAssociation, _callback);
        }
    }

    /**
     * Assign field configuration scheme to project
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is &#x60;null&#x60;, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldConfigurationSchemeProjectAssociation  (required)
     * @return AssignFieldConfigurationSchemeToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AssignFieldConfigurationSchemeToProjectRequestBuilder assignFieldConfigurationSchemeToProject(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new AssignFieldConfigurationSchemeToProjectRequestBuilder(projectId);
    }
    private okhttp3.Call assignIssueTypesToFieldConfigurationSchemeCall(Long id, AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateFieldConfigurationsWithIssueTypesRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/{id}/mapping"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignIssueTypesToFieldConfigurationSchemeValidateBeforeCall(Long id, AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignIssueTypesToFieldConfigurationScheme(Async)");
        }

        // verify the required parameter 'associateFieldConfigurationsWithIssueTypesRequest' is set
        if (associateFieldConfigurationsWithIssueTypesRequest == null) {
            throw new ApiException("Missing the required parameter 'associateFieldConfigurationsWithIssueTypesRequest' when calling assignIssueTypesToFieldConfigurationScheme(Async)");
        }

        return assignIssueTypesToFieldConfigurationSchemeCall(id, associateFieldConfigurationsWithIssueTypesRequest, _callback);

    }


    private ApiResponse<Object> assignIssueTypesToFieldConfigurationSchemeWithHttpInfo(Long id, AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest) throws ApiException {
        okhttp3.Call localVarCall = assignIssueTypesToFieldConfigurationSchemeValidateBeforeCall(id, associateFieldConfigurationsWithIssueTypesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignIssueTypesToFieldConfigurationSchemeAsync(Long id, AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignIssueTypesToFieldConfigurationSchemeValidateBeforeCall(id, associateFieldConfigurationsWithIssueTypesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignIssueTypesToFieldConfigurationSchemeRequestBuilder {
        private final Set<FieldConfigurationToIssueTypeMapping> mappings;
        private final Long id;

        private AssignIssueTypesToFieldConfigurationSchemeRequestBuilder(Set<FieldConfigurationToIssueTypeMapping> mappings, Long id) {
            this.mappings = mappings;
            this.id = id;
        }

        /**
         * Build call for assignIssueTypesToFieldConfigurationScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme, the field configuration, or the issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest = buildBodyParams();
            return assignIssueTypesToFieldConfigurationSchemeCall(id, associateFieldConfigurationsWithIssueTypesRequest, _callback);
        }

        private AssociateFieldConfigurationsWithIssueTypesRequest buildBodyParams() {
            AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest = new AssociateFieldConfigurationsWithIssueTypesRequest();
            associateFieldConfigurationsWithIssueTypesRequest.mappings(this.mappings);
            return associateFieldConfigurationsWithIssueTypesRequest;
        }

        /**
         * Execute assignIssueTypesToFieldConfigurationScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme, the field configuration, or the issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = assignIssueTypesToFieldConfigurationSchemeWithHttpInfo(id, associateFieldConfigurationsWithIssueTypesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignIssueTypesToFieldConfigurationScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme, the field configuration, or the issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest = buildBodyParams();
            return assignIssueTypesToFieldConfigurationSchemeWithHttpInfo(id, associateFieldConfigurationsWithIssueTypesRequest);
        }

        /**
         * Execute assignIssueTypesToFieldConfigurationScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme, the field configuration, or the issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest = buildBodyParams();
            return assignIssueTypesToFieldConfigurationSchemeAsync(id, associateFieldConfigurationsWithIssueTypesRequest, _callback);
        }
    }

    /**
     * Assign issue types to field configurations
     * Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration scheme. (required)
     * @param associateFieldConfigurationsWithIssueTypesRequest  (required)
     * @return AssignIssueTypesToFieldConfigurationSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration scheme, the field configuration, or the issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public AssignIssueTypesToFieldConfigurationSchemeRequestBuilder assignIssueTypesToFieldConfigurationScheme(Set<FieldConfigurationToIssueTypeMapping> mappings, Long id) throws IllegalArgumentException {
        if (mappings == null) throw new IllegalArgumentException("\"mappings\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AssignIssueTypesToFieldConfigurationSchemeRequestBuilder(mappings, id);
    }
    private okhttp3.Call createFieldConfigurationCall(FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldConfigurationDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldConfigurationValidateBeforeCall(FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldConfigurationDetails' is set
        if (fieldConfigurationDetails == null) {
            throw new ApiException("Missing the required parameter 'fieldConfigurationDetails' when calling createFieldConfiguration(Async)");
        }

        return createFieldConfigurationCall(fieldConfigurationDetails, _callback);

    }


    private ApiResponse<FieldConfiguration> createFieldConfigurationWithHttpInfo(FieldConfigurationDetails fieldConfigurationDetails) throws ApiException {
        okhttp3.Call localVarCall = createFieldConfigurationValidateBeforeCall(fieldConfigurationDetails, null);
        Type localVarReturnType = new TypeToken<FieldConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFieldConfigurationAsync(FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback<FieldConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldConfigurationValidateBeforeCall(fieldConfigurationDetails, _callback);
        Type localVarReturnType = new TypeToken<FieldConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFieldConfigurationRequestBuilder {
        private final String name;
        private String description;

        private CreateFieldConfigurationRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the field configuration. (optional)
         * @return CreateFieldConfigurationRequestBuilder
         */
        public CreateFieldConfigurationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createFieldConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return createFieldConfigurationCall(fieldConfigurationDetails, _callback);
        }

        private FieldConfigurationDetails buildBodyParams() {
            FieldConfigurationDetails fieldConfigurationDetails = new FieldConfigurationDetails();
            fieldConfigurationDetails.description(this.description);
            fieldConfigurationDetails.name(this.name);
            return fieldConfigurationDetails;
        }

        /**
         * Execute createFieldConfiguration request
         * @return FieldConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public FieldConfiguration execute() throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            ApiResponse<FieldConfiguration> localVarResp = createFieldConfigurationWithHttpInfo(fieldConfigurationDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFieldConfiguration request with HTTP info returned
         * @return ApiResponse&lt;FieldConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FieldConfiguration> executeWithHttpInfo() throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return createFieldConfigurationWithHttpInfo(fieldConfigurationDetails);
        }

        /**
         * Execute createFieldConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FieldConfiguration> _callback) throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return createFieldConfigurationAsync(fieldConfigurationDetails, _callback);
        }
    }

    /**
     * Create field configuration
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldConfigurationDetails  (required)
     * @return CreateFieldConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldConfigurationRequestBuilder createFieldConfiguration(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateFieldConfigurationRequestBuilder(name);
    }
    private okhttp3.Call createFieldConfigurationSchemeCall(UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFieldConfigurationSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldConfigurationSchemeValidateBeforeCall(UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateFieldConfigurationSchemeDetails' is set
        if (updateFieldConfigurationSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'updateFieldConfigurationSchemeDetails' when calling createFieldConfigurationScheme(Async)");
        }

        return createFieldConfigurationSchemeCall(updateFieldConfigurationSchemeDetails, _callback);

    }


    private ApiResponse<FieldConfigurationScheme> createFieldConfigurationSchemeWithHttpInfo(UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = createFieldConfigurationSchemeValidateBeforeCall(updateFieldConfigurationSchemeDetails, null);
        Type localVarReturnType = new TypeToken<FieldConfigurationScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFieldConfigurationSchemeAsync(UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback<FieldConfigurationScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldConfigurationSchemeValidateBeforeCall(updateFieldConfigurationSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<FieldConfigurationScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFieldConfigurationSchemeRequestBuilder {
        private final String name;
        private String description;

        private CreateFieldConfigurationSchemeRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the field configuration scheme. (optional)
         * @return CreateFieldConfigurationSchemeRequestBuilder
         */
        public CreateFieldConfigurationSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createFieldConfigurationScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return createFieldConfigurationSchemeCall(updateFieldConfigurationSchemeDetails, _callback);
        }

        private UpdateFieldConfigurationSchemeDetails buildBodyParams() {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = new UpdateFieldConfigurationSchemeDetails();
            updateFieldConfigurationSchemeDetails.description(this.description);
            updateFieldConfigurationSchemeDetails.name(this.name);
            return updateFieldConfigurationSchemeDetails;
        }

        /**
         * Execute createFieldConfigurationScheme request
         * @return FieldConfigurationScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public FieldConfigurationScheme execute() throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            ApiResponse<FieldConfigurationScheme> localVarResp = createFieldConfigurationSchemeWithHttpInfo(updateFieldConfigurationSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFieldConfigurationScheme request with HTTP info returned
         * @return ApiResponse&lt;FieldConfigurationScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FieldConfigurationScheme> executeWithHttpInfo() throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return createFieldConfigurationSchemeWithHttpInfo(updateFieldConfigurationSchemeDetails);
        }

        /**
         * Execute createFieldConfigurationScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FieldConfigurationScheme> _callback) throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return createFieldConfigurationSchemeAsync(updateFieldConfigurationSchemeDetails, _callback);
        }
    }

    /**
     * Create field configuration scheme
     * Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param updateFieldConfigurationSchemeDetails The details of the field configuration scheme. (required)
     * @return CreateFieldConfigurationSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldConfigurationSchemeRequestBuilder createFieldConfigurationScheme(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateFieldConfigurationSchemeRequestBuilder(name);
    }
    private okhttp3.Call deleteFieldConfigurationCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldConfigurationValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFieldConfiguration(Async)");
        }

        return deleteFieldConfigurationCall(id, _callback);

    }


    private ApiResponse<Object> deleteFieldConfigurationWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldConfigurationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFieldConfigurationAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldConfigurationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFieldConfigurationRequestBuilder {
        private final Long id;

        private DeleteFieldConfigurationRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteFieldConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldConfigurationCall(id, _callback);
        }


        /**
         * Execute deleteFieldConfiguration request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteFieldConfigurationWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFieldConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteFieldConfigurationWithHttpInfo(id);
        }

        /**
         * Execute deleteFieldConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteFieldConfigurationAsync(id, _callback);
        }
    }

    /**
     * Delete field configuration
     * Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration. (required)
     * @return DeleteFieldConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFieldConfigurationRequestBuilder deleteFieldConfiguration(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteFieldConfigurationRequestBuilder(id);
    }
    private okhttp3.Call deleteSchemeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScheme(Async)");
        }

        return deleteSchemeCall(id, _callback);

    }


    private ApiResponse<Object> deleteSchemeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSchemeAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSchemeRequestBuilder {
        private final Long id;

        private DeleteSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeCall(id, _callback);
        }


        /**
         * Execute deleteScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSchemeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSchemeWithHttpInfo(id);
        }

        /**
         * Execute deleteScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSchemeAsync(id, _callback);
        }
    }

    /**
     * Delete field configuration scheme
     * Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration scheme. (required)
     * @return DeleteSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeRequestBuilder deleteScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteSchemeRequestBuilder(id);
    }
    private okhttp3.Call getAllFieldConfigurationsCall(Long startAt, Integer maxResults, Set<Long> id, Boolean isDefault, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (isDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDefault", isDefault));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFieldConfigurationsValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, Boolean isDefault, String query, final ApiCallback _callback) throws ApiException {
        return getAllFieldConfigurationsCall(startAt, maxResults, id, isDefault, query, _callback);

    }


    private ApiResponse<PageBeanFieldConfigurationDetails> getAllFieldConfigurationsWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id, Boolean isDefault, String query) throws ApiException {
        okhttp3.Call localVarCall = getAllFieldConfigurationsValidateBeforeCall(startAt, maxResults, id, isDefault, query, null);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFieldConfigurationsAsync(Long startAt, Integer maxResults, Set<Long> id, Boolean isDefault, String query, final ApiCallback<PageBeanFieldConfigurationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFieldConfigurationsValidateBeforeCall(startAt, maxResults, id, isDefault, query, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFieldConfigurationsRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;
        private Boolean isDefault;
        private String query;

        private GetAllFieldConfigurationsRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetAllFieldConfigurationsRequestBuilder
         */
        public GetAllFieldConfigurationsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetAllFieldConfigurationsRequestBuilder
         */
        public GetAllFieldConfigurationsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return GetAllFieldConfigurationsRequestBuilder
         */
        public GetAllFieldConfigurationsRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault If *true* returns default field configurations only. (optional, default to false)
         * @return GetAllFieldConfigurationsRequestBuilder
         */
        public GetAllFieldConfigurationsRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set query
         * @param query The query string used to match against field configuration names and descriptions. (optional, default to )
         * @return GetAllFieldConfigurationsRequestBuilder
         */
        public GetAllFieldConfigurationsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for getAllFieldConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllFieldConfigurationsCall(startAt, maxResults, id, isDefault, query, _callback);
        }


        /**
         * Execute getAllFieldConfigurations request
         * @return PageBeanFieldConfigurationDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFieldConfigurationDetails execute() throws ApiException {
            ApiResponse<PageBeanFieldConfigurationDetails> localVarResp = getAllFieldConfigurationsWithHttpInfo(startAt, maxResults, id, isDefault, query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFieldConfigurations request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFieldConfigurationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFieldConfigurationDetails> executeWithHttpInfo() throws ApiException {
            return getAllFieldConfigurationsWithHttpInfo(startAt, maxResults, id, isDefault, query);
        }

        /**
         * Execute getAllFieldConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFieldConfigurationDetails> _callback) throws ApiException {
            return getAllFieldConfigurationsAsync(startAt, maxResults, id, isDefault, query, _callback);
        }
    }

    /**
     * Get all field configurations
     * Returns a [paginated](https://dac-static.atlassian.com) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetAllFieldConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFieldConfigurationsRequestBuilder getAllFieldConfigurations() throws IllegalArgumentException {
        return new GetAllFieldConfigurationsRequestBuilder();
    }
    private okhttp3.Call getConfigurationItemsCall(Long id, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration/{id}/fields"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationItemsValidateBeforeCall(Long id, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConfigurationItems(Async)");
        }

        return getConfigurationItemsCall(id, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanFieldConfigurationItem> getConfigurationItemsWithHttpInfo(Long id, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationItemsValidateBeforeCall(id, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationItemsAsync(Long id, Long startAt, Integer maxResults, final ApiCallback<PageBeanFieldConfigurationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationItemsValidateBeforeCall(id, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigurationItemsRequestBuilder {
        private final Long id;
        private Long startAt;
        private Integer maxResults;

        private GetConfigurationItemsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetConfigurationItemsRequestBuilder
         */
        public GetConfigurationItemsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetConfigurationItemsRequestBuilder
         */
        public GetConfigurationItemsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getConfigurationItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationItemsCall(id, startAt, maxResults, _callback);
        }


        /**
         * Execute getConfigurationItems request
         * @return PageBeanFieldConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFieldConfigurationItem execute() throws ApiException {
            ApiResponse<PageBeanFieldConfigurationItem> localVarResp = getConfigurationItemsWithHttpInfo(id, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfigurationItems request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFieldConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFieldConfigurationItem> executeWithHttpInfo() throws ApiException {
            return getConfigurationItemsWithHttpInfo(id, startAt, maxResults);
        }

        /**
         * Execute getConfigurationItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFieldConfigurationItem> _callback) throws ApiException {
            return getConfigurationItemsAsync(id, startAt, maxResults, _callback);
        }
    }

    /**
     * Get field configuration items
     * Returns a [paginated](https://dac-static.atlassian.com) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration. (required)
     * @return GetConfigurationItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigurationItemsRequestBuilder getConfigurationItems(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetConfigurationItemsRequestBuilder(id);
    }
    private okhttp3.Call getConfigurationSchemeMappingCall(Long startAt, Integer maxResults, Set<Long> fieldConfigurationSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/mapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (fieldConfigurationSchemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fieldConfigurationSchemeId", fieldConfigurationSchemeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationSchemeMappingValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> fieldConfigurationSchemeId, final ApiCallback _callback) throws ApiException {
        return getConfigurationSchemeMappingCall(startAt, maxResults, fieldConfigurationSchemeId, _callback);

    }


    private ApiResponse<PageBeanFieldConfigurationIssueTypeItem> getConfigurationSchemeMappingWithHttpInfo(Long startAt, Integer maxResults, Set<Long> fieldConfigurationSchemeId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationSchemeMappingValidateBeforeCall(startAt, maxResults, fieldConfigurationSchemeId, null);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationIssueTypeItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationSchemeMappingAsync(Long startAt, Integer maxResults, Set<Long> fieldConfigurationSchemeId, final ApiCallback<PageBeanFieldConfigurationIssueTypeItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationSchemeMappingValidateBeforeCall(startAt, maxResults, fieldConfigurationSchemeId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationIssueTypeItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigurationSchemeMappingRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> fieldConfigurationSchemeId;

        private GetConfigurationSchemeMappingRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetConfigurationSchemeMappingRequestBuilder
         */
        public GetConfigurationSchemeMappingRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetConfigurationSchemeMappingRequestBuilder
         */
        public GetConfigurationSchemeMappingRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set fieldConfigurationSchemeId
         * @param fieldConfigurationSchemeId The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: &#x60;fieldConfigurationSchemeId&#x3D;10000&amp;fieldConfigurationSchemeId&#x3D;10001&#x60;. (optional)
         * @return GetConfigurationSchemeMappingRequestBuilder
         */
        public GetConfigurationSchemeMappingRequestBuilder fieldConfigurationSchemeId(Set<Long> fieldConfigurationSchemeId) {
            this.fieldConfigurationSchemeId = fieldConfigurationSchemeId;
            return this;
        }
        
        /**
         * Build call for getConfigurationSchemeMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no field configuration schemes are found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationSchemeMappingCall(startAt, maxResults, fieldConfigurationSchemeId, _callback);
        }


        /**
         * Execute getConfigurationSchemeMapping request
         * @return PageBeanFieldConfigurationIssueTypeItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no field configuration schemes are found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFieldConfigurationIssueTypeItem execute() throws ApiException {
            ApiResponse<PageBeanFieldConfigurationIssueTypeItem> localVarResp = getConfigurationSchemeMappingWithHttpInfo(startAt, maxResults, fieldConfigurationSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfigurationSchemeMapping request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFieldConfigurationIssueTypeItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no field configuration schemes are found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFieldConfigurationIssueTypeItem> executeWithHttpInfo() throws ApiException {
            return getConfigurationSchemeMappingWithHttpInfo(startAt, maxResults, fieldConfigurationSchemeId);
        }

        /**
         * Execute getConfigurationSchemeMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no field configuration schemes are found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFieldConfigurationIssueTypeItem> _callback) throws ApiException {
            return getConfigurationSchemeMappingAsync(startAt, maxResults, fieldConfigurationSchemeId, _callback);
        }
    }

    /**
     * Get field configuration issue type items
     * Returns a [paginated](https://dac-static.atlassian.com) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetConfigurationSchemeMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if no field configuration schemes are found. </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigurationSchemeMappingRequestBuilder getConfigurationSchemeMapping() throws IllegalArgumentException {
        return new GetConfigurationSchemeMappingRequestBuilder();
    }
    private okhttp3.Call getFieldConfigurationSchemesForProjectsCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldConfigurationSchemesForProjectsValidateBeforeCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFieldConfigurationSchemesForProjects(Async)");
        }

        return getFieldConfigurationSchemesForProjectsCall(projectId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanFieldConfigurationSchemeProjects> getFieldConfigurationSchemesForProjectsWithHttpInfo(Set<Long> projectId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getFieldConfigurationSchemesForProjectsValidateBeforeCall(projectId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationSchemeProjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldConfigurationSchemesForProjectsAsync(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback<PageBeanFieldConfigurationSchemeProjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldConfigurationSchemesForProjectsValidateBeforeCall(projectId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationSchemeProjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldConfigurationSchemesForProjectsRequestBuilder {
        private final Set<Long> projectId;
        private Long startAt;
        private Integer maxResults;

        private GetFieldConfigurationSchemesForProjectsRequestBuilder(Set<Long> projectId) {
            this.projectId = projectId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetFieldConfigurationSchemesForProjectsRequestBuilder
         */
        public GetFieldConfigurationSchemesForProjectsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetFieldConfigurationSchemesForProjectsRequestBuilder
         */
        public GetFieldConfigurationSchemesForProjectsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getFieldConfigurationSchemesForProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldConfigurationSchemesForProjectsCall(projectId, startAt, maxResults, _callback);
        }


        /**
         * Execute getFieldConfigurationSchemesForProjects request
         * @return PageBeanFieldConfigurationSchemeProjects
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFieldConfigurationSchemeProjects execute() throws ApiException {
            ApiResponse<PageBeanFieldConfigurationSchemeProjects> localVarResp = getFieldConfigurationSchemesForProjectsWithHttpInfo(projectId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFieldConfigurationSchemesForProjects request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFieldConfigurationSchemeProjects&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFieldConfigurationSchemeProjects> executeWithHttpInfo() throws ApiException {
            return getFieldConfigurationSchemesForProjectsWithHttpInfo(projectId, startAt, maxResults);
        }

        /**
         * Execute getFieldConfigurationSchemesForProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFieldConfigurationSchemeProjects> _callback) throws ApiException {
            return getFieldConfigurationSchemesForProjectsAsync(projectId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get field configuration schemes for projects
     * Returns a [paginated](https://dac-static.atlassian.com) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @return GetFieldConfigurationSchemesForProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldConfigurationSchemesForProjectsRequestBuilder getFieldConfigurationSchemesForProjects(Set<Long> projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        return new GetFieldConfigurationSchemesForProjectsRequestBuilder(projectId);
    }
    private okhttp3.Call listFieldConfigurationSchemesCall(Long startAt, Integer maxResults, Set<Long> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldConfigurationSchemesValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, final ApiCallback _callback) throws ApiException {
        return listFieldConfigurationSchemesCall(startAt, maxResults, id, _callback);

    }


    private ApiResponse<PageBeanFieldConfigurationScheme> listFieldConfigurationSchemesWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id) throws ApiException {
        okhttp3.Call localVarCall = listFieldConfigurationSchemesValidateBeforeCall(startAt, maxResults, id, null);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFieldConfigurationSchemesAsync(Long startAt, Integer maxResults, Set<Long> id, final ApiCallback<PageBeanFieldConfigurationScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldConfigurationSchemesValidateBeforeCall(startAt, maxResults, id, _callback);
        Type localVarReturnType = new TypeToken<PageBeanFieldConfigurationScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFieldConfigurationSchemesRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;

        private ListFieldConfigurationSchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListFieldConfigurationSchemesRequestBuilder
         */
        public ListFieldConfigurationSchemesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListFieldConfigurationSchemesRequestBuilder
         */
        public ListFieldConfigurationSchemesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return ListFieldConfigurationSchemesRequestBuilder
         */
        public ListFieldConfigurationSchemesRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for listFieldConfigurationSchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFieldConfigurationSchemesCall(startAt, maxResults, id, _callback);
        }


        /**
         * Execute listFieldConfigurationSchemes request
         * @return PageBeanFieldConfigurationScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanFieldConfigurationScheme execute() throws ApiException {
            ApiResponse<PageBeanFieldConfigurationScheme> localVarResp = listFieldConfigurationSchemesWithHttpInfo(startAt, maxResults, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFieldConfigurationSchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanFieldConfigurationScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanFieldConfigurationScheme> executeWithHttpInfo() throws ApiException {
            return listFieldConfigurationSchemesWithHttpInfo(startAt, maxResults, id);
        }

        /**
         * Execute listFieldConfigurationSchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanFieldConfigurationScheme> _callback) throws ApiException {
            return listFieldConfigurationSchemesAsync(startAt, maxResults, id, _callback);
        }
    }

    /**
     * Get all field configuration schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListFieldConfigurationSchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldConfigurationSchemesRequestBuilder listFieldConfigurationSchemes() throws IllegalArgumentException {
        return new ListFieldConfigurationSchemesRequestBuilder();
    }
    private okhttp3.Call removeIssueTypesFromFieldConfigSchemeCall(Long id, IssueTypeIdsToRemove issueTypeIdsToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeIdsToRemove;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIssueTypesFromFieldConfigSchemeValidateBeforeCall(Long id, IssueTypeIdsToRemove issueTypeIdsToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeIssueTypesFromFieldConfigScheme(Async)");
        }

        // verify the required parameter 'issueTypeIdsToRemove' is set
        if (issueTypeIdsToRemove == null) {
            throw new ApiException("Missing the required parameter 'issueTypeIdsToRemove' when calling removeIssueTypesFromFieldConfigScheme(Async)");
        }

        return removeIssueTypesFromFieldConfigSchemeCall(id, issueTypeIdsToRemove, _callback);

    }


    private ApiResponse<Object> removeIssueTypesFromFieldConfigSchemeWithHttpInfo(Long id, IssueTypeIdsToRemove issueTypeIdsToRemove) throws ApiException {
        okhttp3.Call localVarCall = removeIssueTypesFromFieldConfigSchemeValidateBeforeCall(id, issueTypeIdsToRemove, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIssueTypesFromFieldConfigSchemeAsync(Long id, IssueTypeIdsToRemove issueTypeIdsToRemove, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIssueTypesFromFieldConfigSchemeValidateBeforeCall(id, issueTypeIdsToRemove, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIssueTypesFromFieldConfigSchemeRequestBuilder {
        private final List<String> issueTypeIds;
        private final Long id;

        private RemoveIssueTypesFromFieldConfigSchemeRequestBuilder(List<String> issueTypeIds, Long id) {
            this.issueTypeIds = issueTypeIds;
            this.id = id;
        }

        /**
         * Build call for removeIssueTypesFromFieldConfigScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeIdsToRemove issueTypeIdsToRemove = buildBodyParams();
            return removeIssueTypesFromFieldConfigSchemeCall(id, issueTypeIdsToRemove, _callback);
        }

        private IssueTypeIdsToRemove buildBodyParams() {
            IssueTypeIdsToRemove issueTypeIdsToRemove = new IssueTypeIdsToRemove();
            issueTypeIdsToRemove.issueTypeIds(this.issueTypeIds);
            return issueTypeIdsToRemove;
        }

        /**
         * Execute removeIssueTypesFromFieldConfigScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeIdsToRemove issueTypeIdsToRemove = buildBodyParams();
            ApiResponse<Object> localVarResp = removeIssueTypesFromFieldConfigSchemeWithHttpInfo(id, issueTypeIdsToRemove);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIssueTypesFromFieldConfigScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeIdsToRemove issueTypeIdsToRemove = buildBodyParams();
            return removeIssueTypesFromFieldConfigSchemeWithHttpInfo(id, issueTypeIdsToRemove);
        }

        /**
         * Execute removeIssueTypesFromFieldConfigScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeIdsToRemove issueTypeIdsToRemove = buildBodyParams();
            return removeIssueTypesFromFieldConfigSchemeAsync(id, issueTypeIdsToRemove, _callback);
        }
    }

    /**
     * Remove issue types from field configuration scheme
     * Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration scheme. (required)
     * @param issueTypeIdsToRemove The issue type IDs to remove. (required)
     * @return RemoveIssueTypesFromFieldConfigSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveIssueTypesFromFieldConfigSchemeRequestBuilder removeIssueTypesFromFieldConfigScheme(List<String> issueTypeIds, Long id) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveIssueTypesFromFieldConfigSchemeRequestBuilder(issueTypeIds, id);
    }
    private okhttp3.Call updateFieldConfigItemsCall(Long id, FieldConfigurationItemsDetails fieldConfigurationItemsDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldConfigurationItemsDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration/{id}/fields"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldConfigItemsValidateBeforeCall(Long id, FieldConfigurationItemsDetails fieldConfigurationItemsDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldConfigItems(Async)");
        }

        // verify the required parameter 'fieldConfigurationItemsDetails' is set
        if (fieldConfigurationItemsDetails == null) {
            throw new ApiException("Missing the required parameter 'fieldConfigurationItemsDetails' when calling updateFieldConfigItems(Async)");
        }

        return updateFieldConfigItemsCall(id, fieldConfigurationItemsDetails, _callback);

    }


    private ApiResponse<Object> updateFieldConfigItemsWithHttpInfo(Long id, FieldConfigurationItemsDetails fieldConfigurationItemsDetails) throws ApiException {
        okhttp3.Call localVarCall = updateFieldConfigItemsValidateBeforeCall(id, fieldConfigurationItemsDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFieldConfigItemsAsync(Long id, FieldConfigurationItemsDetails fieldConfigurationItemsDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldConfigItemsValidateBeforeCall(id, fieldConfigurationItemsDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFieldConfigItemsRequestBuilder {
        private final List<FieldConfigurationItem> fieldConfigurationItems;
        private final Long id;

        private UpdateFieldConfigItemsRequestBuilder(List<FieldConfigurationItem> fieldConfigurationItems, Long id) {
            this.fieldConfigurationItems = fieldConfigurationItems;
            this.id = id;
        }

        /**
         * Build call for updateFieldConfigItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldConfigurationItemsDetails fieldConfigurationItemsDetails = buildBodyParams();
            return updateFieldConfigItemsCall(id, fieldConfigurationItemsDetails, _callback);
        }

        private FieldConfigurationItemsDetails buildBodyParams() {
            FieldConfigurationItemsDetails fieldConfigurationItemsDetails = new FieldConfigurationItemsDetails();
            fieldConfigurationItemsDetails.fieldConfigurationItems(this.fieldConfigurationItems);
            return fieldConfigurationItemsDetails;
        }

        /**
         * Execute updateFieldConfigItems request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            FieldConfigurationItemsDetails fieldConfigurationItemsDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateFieldConfigItemsWithHttpInfo(id, fieldConfigurationItemsDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFieldConfigItems request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            FieldConfigurationItemsDetails fieldConfigurationItemsDetails = buildBodyParams();
            return updateFieldConfigItemsWithHttpInfo(id, fieldConfigurationItemsDetails);
        }

        /**
         * Execute updateFieldConfigItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            FieldConfigurationItemsDetails fieldConfigurationItemsDetails = buildBodyParams();
            return updateFieldConfigItemsAsync(id, fieldConfigurationItemsDetails, _callback);
        }
    }

    /**
     * Update field configuration items
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (&#x60;text-renderer&#x60;) or wiki style renderer (&#x60;wiki-renderer&#x60;). However, the renderer cannot be updated for fields using the autocomplete renderer (&#x60;autocomplete-renderer&#x60;).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration. (required)
     * @param fieldConfigurationItemsDetails  (required)
     * @return UpdateFieldConfigItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldConfigItemsRequestBuilder updateFieldConfigItems(List<FieldConfigurationItem> fieldConfigurationItems, Long id) throws IllegalArgumentException {
        if (fieldConfigurationItems == null) throw new IllegalArgumentException("\"fieldConfigurationItems\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateFieldConfigItemsRequestBuilder(fieldConfigurationItems, id);
    }
    private okhttp3.Call updateFieldConfigurationCall(Long id, FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldConfigurationDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfiguration/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldConfigurationValidateBeforeCall(Long id, FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldConfiguration(Async)");
        }

        // verify the required parameter 'fieldConfigurationDetails' is set
        if (fieldConfigurationDetails == null) {
            throw new ApiException("Missing the required parameter 'fieldConfigurationDetails' when calling updateFieldConfiguration(Async)");
        }

        return updateFieldConfigurationCall(id, fieldConfigurationDetails, _callback);

    }


    private ApiResponse<Object> updateFieldConfigurationWithHttpInfo(Long id, FieldConfigurationDetails fieldConfigurationDetails) throws ApiException {
        okhttp3.Call localVarCall = updateFieldConfigurationValidateBeforeCall(id, fieldConfigurationDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFieldConfigurationAsync(Long id, FieldConfigurationDetails fieldConfigurationDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldConfigurationValidateBeforeCall(id, fieldConfigurationDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFieldConfigurationRequestBuilder {
        private final String name;
        private final Long id;
        private String description;

        private UpdateFieldConfigurationRequestBuilder(String name, Long id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the field configuration. (optional)
         * @return UpdateFieldConfigurationRequestBuilder
         */
        public UpdateFieldConfigurationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for updateFieldConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return updateFieldConfigurationCall(id, fieldConfigurationDetails, _callback);
        }

        private FieldConfigurationDetails buildBodyParams() {
            FieldConfigurationDetails fieldConfigurationDetails = new FieldConfigurationDetails();
            fieldConfigurationDetails.description(this.description);
            fieldConfigurationDetails.name(this.name);
            return fieldConfigurationDetails;
        }

        /**
         * Execute updateFieldConfiguration request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateFieldConfigurationWithHttpInfo(id, fieldConfigurationDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFieldConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return updateFieldConfigurationWithHttpInfo(id, fieldConfigurationDetails);
        }

        /**
         * Execute updateFieldConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            FieldConfigurationDetails fieldConfigurationDetails = buildBodyParams();
            return updateFieldConfigurationAsync(id, fieldConfigurationDetails, _callback);
        }
    }

    /**
     * Update field configuration
     * Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration. (required)
     * @param fieldConfigurationDetails  (required)
     * @return UpdateFieldConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field configuration is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldConfigurationRequestBuilder updateFieldConfiguration(String name, Long id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateFieldConfigurationRequestBuilder(name, id);
    }
    private okhttp3.Call updateSchemeCall(Long id, UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFieldConfigurationSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/fieldconfigurationscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeValidateBeforeCall(Long id, UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateScheme(Async)");
        }

        // verify the required parameter 'updateFieldConfigurationSchemeDetails' is set
        if (updateFieldConfigurationSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'updateFieldConfigurationSchemeDetails' when calling updateScheme(Async)");
        }

        return updateSchemeCall(id, updateFieldConfigurationSchemeDetails, _callback);

    }


    private ApiResponse<Object> updateSchemeWithHttpInfo(Long id, UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(id, updateFieldConfigurationSchemeDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeAsync(Long id, UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(id, updateFieldConfigurationSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeRequestBuilder {
        private final String name;
        private final Long id;
        private String description;

        private UpdateSchemeRequestBuilder(String name, Long id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the field configuration scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for updateScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return updateSchemeCall(id, updateFieldConfigurationSchemeDetails, _callback);
        }

        private UpdateFieldConfigurationSchemeDetails buildBodyParams() {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = new UpdateFieldConfigurationSchemeDetails();
            updateFieldConfigurationSchemeDetails.description(this.description);
            updateFieldConfigurationSchemeDetails.name(this.name);
            return updateFieldConfigurationSchemeDetails;
        }

        /**
         * Execute updateScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSchemeWithHttpInfo(id, updateFieldConfigurationSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return updateSchemeWithHttpInfo(id, updateFieldConfigurationSchemeDetails);
        }

        /**
         * Execute updateScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails = buildBodyParams();
            return updateSchemeAsync(id, updateFieldConfigurationSchemeDetails, _callback);
        }
    }

    /**
     * Update field configuration scheme
     * Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the field configuration scheme. (required)
     * @param updateFieldConfigurationSchemeDetails The details of the field configuration scheme. (required)
     * @return UpdateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeRequestBuilder updateScheme(String name, Long id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateSchemeRequestBuilder(name, id);
    }
}
