/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldDefinitionJsonBean;
import com.konfigthis.client.model.FieldDetails;
import com.konfigthis.client.model.PageBeanContext;
import com.konfigthis.client.model.PageBeanField;
import java.util.Set;
import com.konfigthis.client.model.UpdateCustomFieldDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomFieldCall(CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDefinitionJsonBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldValidateBeforeCall(CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldDefinitionJsonBean' is set
        if (customFieldDefinitionJsonBean == null) {
            throw new ApiException("Missing the required parameter 'customFieldDefinitionJsonBean' when calling createCustomField(Async)");
        }

        return createCustomFieldCall(customFieldDefinitionJsonBean, _callback);

    }


    private ApiResponse<FieldDetails> createCustomFieldWithHttpInfo(CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(customFieldDefinitionJsonBean, null);
        Type localVarReturnType = new TypeToken<FieldDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomFieldAsync(CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean, final ApiCallback<FieldDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(customFieldDefinitionJsonBean, _callback);
        Type localVarReturnType = new TypeToken<FieldDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomFieldRequestBuilder {
        private final String name;
        private final String type;
        private String description;
        private String searcherKey;

        private CreateCustomFieldRequestBuilder(String name, String type) {
            this.name = name;
            this.type = type;
        }

        /**
         * Set description
         * @param description The description of the custom field, which is displayed in Jira. (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set searcherKey
         * @param searcherKey The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.   The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):   *  &#x60;cascadingselect&#x60;: &#x60;cascadingselectsearcher&#x60;  *  &#x60;datepicker&#x60;: &#x60;daterange&#x60;  *  &#x60;datetime&#x60;: &#x60;datetimerange&#x60;  *  &#x60;float&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;grouppicker&#x60;: &#x60;grouppickersearcher&#x60;  *  &#x60;importid&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;labels&#x60;: &#x60;labelsearcher&#x60;  *  &#x60;multicheckboxes&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multigrouppicker&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiselect&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiuserpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;multiversion&#x60;: &#x60;versionsearcher&#x60;  *  &#x60;project&#x60;: &#x60;projectsearcher&#x60;  *  &#x60;radiobuttons&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;readonlyfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;select&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;textarea&#x60;: &#x60;textsearcher&#x60;  *  &#x60;textfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;url&#x60;: &#x60;exacttextsearcher&#x60;  *  &#x60;userpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;version&#x60;: &#x60;versionsearcher&#x60;  If no searcher is provided, the field isn&#39;t searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable. (optional)
         * @return CreateCustomFieldRequestBuilder
         */
        public CreateCustomFieldRequestBuilder searcherKey(String searcherKey) {
            this.searcherKey = searcherKey;
            return this;
        }
        
        /**
         * Build call for createCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean = buildBodyParams();
            return createCustomFieldCall(customFieldDefinitionJsonBean, _callback);
        }

        private CustomFieldDefinitionJsonBean buildBodyParams() {
            CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean = new CustomFieldDefinitionJsonBean();
            customFieldDefinitionJsonBean.description(this.description);
            customFieldDefinitionJsonBean.name(this.name);
            if (this.searcherKey != null)
            customFieldDefinitionJsonBean.searcherKey(CustomFieldDefinitionJsonBean.SearcherKeyEnum.fromValue(this.searcherKey));
            customFieldDefinitionJsonBean.type(this.type);
            return customFieldDefinitionJsonBean;
        }

        /**
         * Execute createCustomField request
         * @return FieldDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. </td><td>  -  </td></tr>
         </table>
         */
        public FieldDetails execute() throws ApiException {
            CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean = buildBodyParams();
            ApiResponse<FieldDetails> localVarResp = createCustomFieldWithHttpInfo(customFieldDefinitionJsonBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomField request with HTTP info returned
         * @return ApiResponse&lt;FieldDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FieldDetails> executeWithHttpInfo() throws ApiException {
            CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean = buildBodyParams();
            return createCustomFieldWithHttpInfo(customFieldDefinitionJsonBean);
        }

        /**
         * Execute createCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the custom field is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FieldDetails> _callback) throws ApiException {
            CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean = buildBodyParams();
            return createCustomFieldAsync(customFieldDefinitionJsonBean, _callback);
        }
    }

    /**
     * Create custom field
     * Creates a custom field.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param customFieldDefinitionJsonBean Definition of the custom field to be created (required)
     * @return CreateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the custom field is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomFieldRequestBuilder createCustomField(String name, String type) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateCustomFieldRequestBuilder(name, type);
    }
    private okhttp3.Call deleteCustomFieldCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomField(Async)");
        }

        return deleteCustomFieldCall(id, _callback);

    }


    private ApiResponse<Void> deleteCustomFieldWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomFieldAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomFieldRequestBuilder {
        private final String id;

        private DeleteCustomFieldRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomFieldCall(id, _callback);
        }


        /**
         * Execute deleteCustomField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomFieldWithHttpInfo(id);
        }

        /**
         * Execute deleteCustomField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomFieldWithHttpInfo(id);
        }

        /**
         * Execute deleteCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomFieldAsync(id, _callback);
        }
    }

    /**
     * Delete custom field
     * Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of a custom field. (required)
     * @return DeleteCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomFieldRequestBuilder deleteCustomField(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteCustomFieldRequestBuilder(id);
    }
    private okhttp3.Call getContextsForFieldCall(String fieldId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/contexts"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContextsForFieldValidateBeforeCall(String fieldId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getContextsForField(Async)");
        }

        return getContextsForFieldCall(fieldId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanContext> getContextsForFieldWithHttpInfo(String fieldId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getContextsForFieldValidateBeforeCall(fieldId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContextsForFieldAsync(String fieldId, Long startAt, Integer maxResults, final ApiCallback<PageBeanContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContextsForFieldValidateBeforeCall(fieldId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContextsForFieldRequestBuilder {
        private final String fieldId;
        private Long startAt;
        private Integer maxResults;

        private GetContextsForFieldRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetContextsForFieldRequestBuilder
         */
        public GetContextsForFieldRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 20)
         * @return GetContextsForFieldRequestBuilder
         */
        public GetContextsForFieldRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getContextsForField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContextsForFieldCall(fieldId, startAt, maxResults, _callback);
        }


        /**
         * Execute getContextsForField request
         * @return PageBeanContext
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public PageBeanContext execute() throws ApiException {
            ApiResponse<PageBeanContext> localVarResp = getContextsForFieldWithHttpInfo(fieldId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContextsForField request with HTTP info returned
         * @return ApiResponse&lt;PageBeanContext&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<PageBeanContext> executeWithHttpInfo() throws ApiException {
            return getContextsForFieldWithHttpInfo(fieldId, startAt, maxResults);
        }

        /**
         * Execute getContextsForField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanContext> _callback) throws ApiException {
            return getContextsForFieldAsync(fieldId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get contexts for a field
     * Returns a [paginated](https://dac-static.atlassian.com) list of the contexts a field is used in. Deprecated, use [Get custom field contexts](https://dac-static.atlassian.com).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the field to return contexts for. (required)
     * @return GetContextsForFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetContextsForFieldRequestBuilder getContextsForField(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetContextsForFieldRequestBuilder(fieldId);
    }
    private okhttp3.Call getFieldsPaginatedCall(Long startAt, Integer maxResults, List<String> type, Set<String> id, String query, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsPaginatedValidateBeforeCall(Long startAt, Integer maxResults, List<String> type, Set<String> id, String query, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        return getFieldsPaginatedCall(startAt, maxResults, type, id, query, orderBy, expand, _callback);

    }


    private ApiResponse<PageBeanField> getFieldsPaginatedWithHttpInfo(Long startAt, Integer maxResults, List<String> type, Set<String> id, String query, String orderBy, String expand) throws ApiException {
        okhttp3.Call localVarCall = getFieldsPaginatedValidateBeforeCall(startAt, maxResults, type, id, query, orderBy, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldsPaginatedAsync(Long startAt, Integer maxResults, List<String> type, Set<String> id, String query, String orderBy, String expand, final ApiCallback<PageBeanField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsPaginatedValidateBeforeCall(startAt, maxResults, type, id, query, orderBy, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldsPaginatedRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private List<String> type;
        private Set<String> id;
        private String query;
        private String orderBy;
        private String expand;

        private GetFieldsPaginatedRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of fields to search. (optional)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder type(List<String> type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set id
         * @param id The IDs of the custom fields to return or, where &#x60;query&#x60; is specified, filter. (optional)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set query
         * @param query String used to perform a case-insensitive partial match with field names or descriptions. (optional)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;contextsCount&#x60; sorts by the number of contexts related to a field  *  &#x60;lastUsed&#x60; sorts by the date when the value of the field last changed  *  &#x60;name&#x60; sorts by the field name  *  &#x60;screensCount&#x60; sorts by the number of screens related to a field (optional)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;key&#x60; returns the key for each field  *  &#x60;lastUsed&#x60; returns the date when the value of the field last changed  *  &#x60;screensCount&#x60; returns the number of screens related to a field  *  &#x60;contextsCount&#x60; returns the number of contexts related to a field  *  &#x60;isLocked&#x60; returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)  *  &#x60;searcherKey&#x60; returns the searcher key for each custom field (optional)
         * @return GetFieldsPaginatedRequestBuilder
         */
        public GetFieldsPaginatedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getFieldsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldsPaginatedCall(startAt, maxResults, type, id, query, orderBy, expand, _callback);
        }


        /**
         * Execute getFieldsPaginated request
         * @return PageBeanField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanField execute() throws ApiException {
            ApiResponse<PageBeanField> localVarResp = getFieldsPaginatedWithHttpInfo(startAt, maxResults, type, id, query, orderBy, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFieldsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanField> executeWithHttpInfo() throws ApiException {
            return getFieldsPaginatedWithHttpInfo(startAt, maxResults, type, id, query, orderBy, expand);
        }

        /**
         * Execute getFieldsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanField> _callback) throws ApiException {
            return getFieldsPaginatedAsync(startAt, maxResults, type, id, query, orderBy, expand, _callback);
        }
    }

    /**
     * Get fields paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of fields for Classic Jira projects. The list can include:   *  all fields  *  specific fields, by defining &#x60;id&#x60;  *  fields that contain a string in the field name or description, by defining &#x60;query&#x60;  *  specific fields that contain a string in the field name or description, by defining &#x60;id&#x60; and &#x60;query&#x60;  Only custom fields can be queried, &#x60;type&#x60; must be set to &#x60;custom&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetFieldsPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldsPaginatedRequestBuilder getFieldsPaginated() throws IllegalArgumentException {
        return new GetFieldsPaginatedRequestBuilder();
    }
    private okhttp3.Call getSystemAndCustomFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemAndCustomFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSystemAndCustomFieldsCall(_callback);

    }


    private ApiResponse<List<FieldDetails>> getSystemAndCustomFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSystemAndCustomFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<FieldDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSystemAndCustomFieldsAsync(final ApiCallback<List<FieldDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemAndCustomFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<FieldDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSystemAndCustomFieldsRequestBuilder {

        private GetSystemAndCustomFieldsRequestBuilder() {
        }

        /**
         * Build call for getSystemAndCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSystemAndCustomFieldsCall(_callback);
        }


        /**
         * Execute getSystemAndCustomFields request
         * @return List&lt;FieldDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public List<FieldDetails> execute() throws ApiException {
            ApiResponse<List<FieldDetails>> localVarResp = getSystemAndCustomFieldsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSystemAndCustomFields request with HTTP info returned
         * @return ApiResponse&lt;List&lt;FieldDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<FieldDetails>> executeWithHttpInfo() throws ApiException {
            return getSystemAndCustomFieldsWithHttpInfo();
        }

        /**
         * Execute getSystemAndCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<FieldDetails>> _callback) throws ApiException {
            return getSystemAndCustomFieldsAsync(_callback);
        }
    }

    /**
     * Get fields
     * Returns system and custom issue fields according to the following rules:   *  Fields that cannot be added to the issue navigator are always returned.  *  Fields that cannot be placed on an issue screen are always returned.  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return GetSystemAndCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetSystemAndCustomFieldsRequestBuilder getSystemAndCustomFields() throws IllegalArgumentException {
        return new GetSystemAndCustomFieldsRequestBuilder();
    }
    private okhttp3.Call listFieldsInTrashPaginatedCall(Long startAt, Integer maxResults, Set<String> id, String query, String expand, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/search/trashed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldsInTrashPaginatedValidateBeforeCall(Long startAt, Integer maxResults, Set<String> id, String query, String expand, String orderBy, final ApiCallback _callback) throws ApiException {
        return listFieldsInTrashPaginatedCall(startAt, maxResults, id, query, expand, orderBy, _callback);

    }


    private ApiResponse<PageBeanField> listFieldsInTrashPaginatedWithHttpInfo(Long startAt, Integer maxResults, Set<String> id, String query, String expand, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listFieldsInTrashPaginatedValidateBeforeCall(startAt, maxResults, id, query, expand, orderBy, null);
        Type localVarReturnType = new TypeToken<PageBeanField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFieldsInTrashPaginatedAsync(Long startAt, Integer maxResults, Set<String> id, String query, String expand, String orderBy, final ApiCallback<PageBeanField> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldsInTrashPaginatedValidateBeforeCall(startAt, maxResults, id, query, expand, orderBy, _callback);
        Type localVarReturnType = new TypeToken<PageBeanField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFieldsInTrashPaginatedRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<String> id;
        private String query;
        private String expand;
        private String orderBy;

        private ListFieldsInTrashPaginatedRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set query
         * @param query String used to perform a case-insensitive partial match with field names or descriptions. (optional)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;name&#x60; sorts by the field name  *  &#x60;trashDate&#x60; sorts by the date the field was moved to the trash  *  &#x60;plannedDeletionDate&#x60; sorts by the planned deletion date (optional)
         * @return ListFieldsInTrashPaginatedRequestBuilder
         */
        public ListFieldsInTrashPaginatedRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for listFieldsInTrashPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFieldsInTrashPaginatedCall(startAt, maxResults, id, query, expand, orderBy, _callback);
        }


        /**
         * Execute listFieldsInTrashPaginated request
         * @return PageBeanField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanField execute() throws ApiException {
            ApiResponse<PageBeanField> localVarResp = listFieldsInTrashPaginatedWithHttpInfo(startAt, maxResults, id, query, expand, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFieldsInTrashPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanField> executeWithHttpInfo() throws ApiException {
            return listFieldsInTrashPaginatedWithHttpInfo(startAt, maxResults, id, query, expand, orderBy);
        }

        /**
         * Execute listFieldsInTrashPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanField> _callback) throws ApiException {
            return listFieldsInTrashPaginatedAsync(startAt, maxResults, id, query, expand, orderBy, _callback);
        }
    }

    /**
     * Get fields in trash paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.  Only custom fields can be queried, &#x60;type&#x60; must be set to &#x60;custom&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListFieldsInTrashPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldsInTrashPaginatedRequestBuilder listFieldsInTrashPaginated() throws IllegalArgumentException {
        return new ListFieldsInTrashPaginatedRequestBuilder();
    }
    private okhttp3.Call moveCustomFieldToTrashCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{id}/trash"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveCustomFieldToTrashValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling moveCustomFieldToTrash(Async)");
        }

        return moveCustomFieldToTrashCall(id, _callback);

    }


    private ApiResponse<Object> moveCustomFieldToTrashWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = moveCustomFieldToTrashValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveCustomFieldToTrashAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveCustomFieldToTrashValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MoveCustomFieldToTrashRequestBuilder {
        private final String id;

        private MoveCustomFieldToTrashRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for moveCustomFieldToTrash
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveCustomFieldToTrashCall(id, _callback);
        }


        /**
         * Execute moveCustomFieldToTrash request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = moveCustomFieldToTrashWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute moveCustomFieldToTrash request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return moveCustomFieldToTrashWithHttpInfo(id);
        }

        /**
         * Execute moveCustomFieldToTrash request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return moveCustomFieldToTrashAsync(id, _callback);
        }
    }

    /**
     * Move custom field to trash
     * Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of a custom field. (required)
     * @return MoveCustomFieldToTrashRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public MoveCustomFieldToTrashRequestBuilder moveCustomFieldToTrash(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new MoveCustomFieldToTrashRequestBuilder(id);
    }
    private okhttp3.Call restoreCustomFieldFromTrashCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{id}/restore"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreCustomFieldFromTrashValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling restoreCustomFieldFromTrash(Async)");
        }

        return restoreCustomFieldFromTrashCall(id, _callback);

    }


    private ApiResponse<Object> restoreCustomFieldFromTrashWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = restoreCustomFieldFromTrashValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restoreCustomFieldFromTrashAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreCustomFieldFromTrashValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestoreCustomFieldFromTrashRequestBuilder {
        private final String id;

        private RestoreCustomFieldFromTrashRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for restoreCustomFieldFromTrash
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restoreCustomFieldFromTrashCall(id, _callback);
        }


        /**
         * Execute restoreCustomFieldFromTrash request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = restoreCustomFieldFromTrashWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restoreCustomFieldFromTrash request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return restoreCustomFieldFromTrashWithHttpInfo(id);
        }

        /**
         * Execute restoreCustomFieldFromTrash request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return restoreCustomFieldFromTrashAsync(id, _callback);
        }
    }

    /**
     * Restore custom field from trash
     * Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of a custom field. (required)
     * @return RestoreCustomFieldFromTrashRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreCustomFieldFromTrashRequestBuilder restoreCustomFieldFromTrash(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RestoreCustomFieldFromTrashRequestBuilder(id);
    }
    private okhttp3.Call updateCustomFieldCall(String fieldId, UpdateCustomFieldDetails updateCustomFieldDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCustomFieldDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(String fieldId, UpdateCustomFieldDetails updateCustomFieldDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'updateCustomFieldDetails' is set
        if (updateCustomFieldDetails == null) {
            throw new ApiException("Missing the required parameter 'updateCustomFieldDetails' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(fieldId, updateCustomFieldDetails, _callback);

    }


    private ApiResponse<Object> updateCustomFieldWithHttpInfo(String fieldId, UpdateCustomFieldDetails updateCustomFieldDetails) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(fieldId, updateCustomFieldDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldAsync(String fieldId, UpdateCustomFieldDetails updateCustomFieldDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(fieldId, updateCustomFieldDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldRequestBuilder {
        private final String fieldId;
        private String description;
        private String name;
        private String searcherKey;

        private UpdateCustomFieldRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set description
         * @param description The description of the custom field. The maximum length is 40000 characters. (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the custom field. It doesn&#39;t have to be unique. The maximum length is 255 characters. (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set searcherKey
         * @param searcherKey The searcher that defines the way the field is searched in Jira. It can be set to &#x60;null&#x60;, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):   *  &#x60;cascadingselect&#x60;: &#x60;cascadingselectsearcher&#x60;  *  &#x60;datepicker&#x60;: &#x60;daterange&#x60;  *  &#x60;datetime&#x60;: &#x60;datetimerange&#x60;  *  &#x60;float&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;grouppicker&#x60;: &#x60;grouppickersearcher&#x60;  *  &#x60;importid&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;labels&#x60;: &#x60;labelsearcher&#x60;  *  &#x60;multicheckboxes&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multigrouppicker&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiselect&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiuserpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;multiversion&#x60;: &#x60;versionsearcher&#x60;  *  &#x60;project&#x60;: &#x60;projectsearcher&#x60;  *  &#x60;radiobuttons&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;readonlyfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;select&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;textarea&#x60;: &#x60;textsearcher&#x60;  *  &#x60;textfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;url&#x60;: &#x60;exacttextsearcher&#x60;  *  &#x60;userpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;version&#x60;: &#x60;versionsearcher&#x60; (optional)
         * @return UpdateCustomFieldRequestBuilder
         */
        public UpdateCustomFieldRequestBuilder searcherKey(String searcherKey) {
            this.searcherKey = searcherKey;
            return this;
        }
        
        /**
         * Build call for updateCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCustomFieldDetails updateCustomFieldDetails = buildBodyParams();
            return updateCustomFieldCall(fieldId, updateCustomFieldDetails, _callback);
        }

        private UpdateCustomFieldDetails buildBodyParams() {
            UpdateCustomFieldDetails updateCustomFieldDetails = new UpdateCustomFieldDetails();
            updateCustomFieldDetails.description(this.description);
            updateCustomFieldDetails.name(this.name);
            if (this.searcherKey != null)
            updateCustomFieldDetails.searcherKey(UpdateCustomFieldDetails.SearcherKeyEnum.fromValue(this.searcherKey));
            return updateCustomFieldDetails;
        }

        /**
         * Execute updateCustomField request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateCustomFieldDetails updateCustomFieldDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateCustomFieldWithHttpInfo(fieldId, updateCustomFieldDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomField request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateCustomFieldDetails updateCustomFieldDetails = buildBodyParams();
            return updateCustomFieldWithHttpInfo(fieldId, updateCustomFieldDetails);
        }

        /**
         * Execute updateCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateCustomFieldDetails updateCustomFieldDetails = buildBodyParams();
            return updateCustomFieldAsync(fieldId, updateCustomFieldDetails, _callback);
        }
    }

    /**
     * Update custom field
     * Updates a custom field.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the custom field. (required)
     * @param updateCustomFieldDetails The custom field update details. (required)
     * @return UpdateCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldRequestBuilder updateCustomField(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new UpdateCustomFieldRequestBuilder(fieldId);
    }
}
