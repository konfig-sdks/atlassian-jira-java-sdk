/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.IssueLinkType;
import com.konfigthis.client.model.IssueLinkTypes;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueLinkTypesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueLinkTypesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueLinkTypesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLinkTypeCall(IssueLinkType issueLinkType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLinkType;

        // create path and map variables
        String localVarPath = "/rest/api/3/issueLinkType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkTypeValidateBeforeCall(IssueLinkType issueLinkType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueLinkType' is set
        if (issueLinkType == null) {
            throw new ApiException("Missing the required parameter 'issueLinkType' when calling createLinkType(Async)");
        }

        return createLinkTypeCall(issueLinkType, _callback);

    }


    private ApiResponse<IssueLinkType> createLinkTypeWithHttpInfo(IssueLinkType issueLinkType) throws ApiException {
        okhttp3.Call localVarCall = createLinkTypeValidateBeforeCall(issueLinkType, null);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLinkTypeAsync(IssueLinkType issueLinkType, final ApiCallback<IssueLinkType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkTypeValidateBeforeCall(issueLinkType, _callback);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLinkTypeRequestBuilder {
        private String id;
        private String inward;
        private String name;
        private String outward;
        private URI self;

        private CreateLinkTypeRequestBuilder() {
        }

        /**
         * Set id
         * @param id The ID of the issue link type and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is the type of issue link. Required on create when &#x60;name&#x60; isn&#39;t provided. Otherwise, read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is read only. (optional)
         * @return CreateLinkTypeRequestBuilder
         */
        public CreateLinkTypeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set inward
         * @param inward The description of the issue link type inward link and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return CreateLinkTypeRequestBuilder
         */
        public CreateLinkTypeRequestBuilder inward(String inward) {
            this.inward = inward;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the issue link type and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is the type of issue link. Required on create when &#x60;id&#x60; isn&#39;t provided. Otherwise, read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return CreateLinkTypeRequestBuilder
         */
        public CreateLinkTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set outward
         * @param outward The description of the issue link type outward link and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return CreateLinkTypeRequestBuilder
         */
        public CreateLinkTypeRequestBuilder outward(String outward) {
            this.outward = outward;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the issue link type. Read only. (optional)
         * @return CreateLinkTypeRequestBuilder
         */
        public CreateLinkTypeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Build call for createLinkType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return createLinkTypeCall(issueLinkType, _callback);
        }

        private IssueLinkType buildBodyParams() {
            IssueLinkType issueLinkType = new IssueLinkType();
            issueLinkType.id(this.id);
            issueLinkType.inward(this.inward);
            issueLinkType.name(this.name);
            issueLinkType.outward(this.outward);
            issueLinkType.self(this.self);
            return issueLinkType;
        }

        /**
         * Execute createLinkType request
         * @return IssueLinkType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public IssueLinkType execute() throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            ApiResponse<IssueLinkType> localVarResp = createLinkTypeWithHttpInfo(issueLinkType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLinkType request with HTTP info returned
         * @return ApiResponse&lt;IssueLinkType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueLinkType> executeWithHttpInfo() throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return createLinkTypeWithHttpInfo(issueLinkType);
        }

        /**
         * Execute createLinkType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueLinkType> _callback) throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return createLinkTypeAsync(issueLinkType, _callback);
        }
    }

    /**
     * Create issue link type
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link&#39;s inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkType  (required)
     * @return CreateLinkTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public CreateLinkTypeRequestBuilder createLinkType() throws IllegalArgumentException {
        return new CreateLinkTypeRequestBuilder();
    }
    private okhttp3.Call deleteTypeCall(String issueLinkTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issueLinkType/{issueLinkTypeId}"
            .replace("{" + "issueLinkTypeId" + "}", localVarApiClient.escapeString(issueLinkTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTypeValidateBeforeCall(String issueLinkTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueLinkTypeId' is set
        if (issueLinkTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueLinkTypeId' when calling deleteType(Async)");
        }

        return deleteTypeCall(issueLinkTypeId, _callback);

    }


    private ApiResponse<Void> deleteTypeWithHttpInfo(String issueLinkTypeId) throws ApiException {
        okhttp3.Call localVarCall = deleteTypeValidateBeforeCall(issueLinkTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTypeAsync(String issueLinkTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTypeValidateBeforeCall(issueLinkTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTypeRequestBuilder {
        private final String issueLinkTypeId;

        private DeleteTypeRequestBuilder(String issueLinkTypeId) {
            this.issueLinkTypeId = issueLinkTypeId;
        }

        /**
         * Build call for deleteType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTypeCall(issueLinkTypeId, _callback);
        }


        /**
         * Execute deleteType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTypeWithHttpInfo(issueLinkTypeId);
        }

        /**
         * Execute deleteType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTypeWithHttpInfo(issueLinkTypeId);
        }

        /**
         * Execute deleteType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTypeAsync(issueLinkTypeId, _callback);
        }
    }

    /**
     * Delete issue link type
     * Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @return DeleteTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTypeRequestBuilder deleteType(String issueLinkTypeId) throws IllegalArgumentException {
        if (issueLinkTypeId == null) throw new IllegalArgumentException("\"issueLinkTypeId\" is required but got null");
            

        return new DeleteTypeRequestBuilder(issueLinkTypeId);
    }
    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issueLinkType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<IssueLinkTypes> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IssueLinkTypes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<IssueLinkTypes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IssueLinkTypes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return IssueLinkTypes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
         </table>
         */
        public IssueLinkTypes execute() throws ApiException {
            ApiResponse<IssueLinkTypes> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;IssueLinkTypes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueLinkTypes> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueLinkTypes> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * Get issue link types
     * Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getLinkTypeCall(String issueLinkTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issueLinkType/{issueLinkTypeId}"
            .replace("{" + "issueLinkTypeId" + "}", localVarApiClient.escapeString(issueLinkTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkTypeValidateBeforeCall(String issueLinkTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueLinkTypeId' is set
        if (issueLinkTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueLinkTypeId' when calling getLinkType(Async)");
        }

        return getLinkTypeCall(issueLinkTypeId, _callback);

    }


    private ApiResponse<IssueLinkType> getLinkTypeWithHttpInfo(String issueLinkTypeId) throws ApiException {
        okhttp3.Call localVarCall = getLinkTypeValidateBeforeCall(issueLinkTypeId, null);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkTypeAsync(String issueLinkTypeId, final ApiCallback<IssueLinkType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkTypeValidateBeforeCall(issueLinkTypeId, _callback);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkTypeRequestBuilder {
        private final String issueLinkTypeId;

        private GetLinkTypeRequestBuilder(String issueLinkTypeId) {
            this.issueLinkTypeId = issueLinkTypeId;
        }

        /**
         * Build call for getLinkType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkTypeCall(issueLinkTypeId, _callback);
        }


        /**
         * Execute getLinkType request
         * @return IssueLinkType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public IssueLinkType execute() throws ApiException {
            ApiResponse<IssueLinkType> localVarResp = getLinkTypeWithHttpInfo(issueLinkTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLinkType request with HTTP info returned
         * @return ApiResponse&lt;IssueLinkType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueLinkType> executeWithHttpInfo() throws ApiException {
            return getLinkTypeWithHttpInfo(issueLinkTypeId);
        }

        /**
         * Execute getLinkType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueLinkType> _callback) throws ApiException {
            return getLinkTypeAsync(issueLinkTypeId, _callback);
        }
    }

    /**
     * Get issue link type
     * Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @return GetLinkTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue link type ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkTypeRequestBuilder getLinkType(String issueLinkTypeId) throws IllegalArgumentException {
        if (issueLinkTypeId == null) throw new IllegalArgumentException("\"issueLinkTypeId\" is required but got null");
            

        return new GetLinkTypeRequestBuilder(issueLinkTypeId);
    }
    private okhttp3.Call updateTypeCall(String issueLinkTypeId, IssueLinkType issueLinkType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLinkType;

        // create path and map variables
        String localVarPath = "/rest/api/3/issueLinkType/{issueLinkTypeId}"
            .replace("{" + "issueLinkTypeId" + "}", localVarApiClient.escapeString(issueLinkTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTypeValidateBeforeCall(String issueLinkTypeId, IssueLinkType issueLinkType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueLinkTypeId' is set
        if (issueLinkTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueLinkTypeId' when calling updateType(Async)");
        }

        // verify the required parameter 'issueLinkType' is set
        if (issueLinkType == null) {
            throw new ApiException("Missing the required parameter 'issueLinkType' when calling updateType(Async)");
        }

        return updateTypeCall(issueLinkTypeId, issueLinkType, _callback);

    }


    private ApiResponse<IssueLinkType> updateTypeWithHttpInfo(String issueLinkTypeId, IssueLinkType issueLinkType) throws ApiException {
        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(issueLinkTypeId, issueLinkType, null);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTypeAsync(String issueLinkTypeId, IssueLinkType issueLinkType, final ApiCallback<IssueLinkType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(issueLinkTypeId, issueLinkType, _callback);
        Type localVarReturnType = new TypeToken<IssueLinkType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTypeRequestBuilder {
        private final String issueLinkTypeId;
        private String id;
        private String inward;
        private String name;
        private String outward;
        private URI self;

        private UpdateTypeRequestBuilder(String issueLinkTypeId) {
            this.issueLinkTypeId = issueLinkTypeId;
        }

        /**
         * Set id
         * @param id The ID of the issue link type and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is the type of issue link. Required on create when &#x60;name&#x60; isn&#39;t provided. Otherwise, read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is read only. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set inward
         * @param inward The description of the issue link type inward link and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder inward(String inward) {
            this.inward = inward;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the issue link type and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is the type of issue link. Required on create when &#x60;id&#x60; isn&#39;t provided. Otherwise, read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set outward
         * @param outward The description of the issue link type outward link and is used as follows:   *  In the [issueLink](https://dac-static.atlassian.com) resource it is read only.  *  In the [issueLinkType](https://dac-static.atlassian.com) resource it is required on create and optional on update. Otherwise, read only. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder outward(String outward) {
            this.outward = outward;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the issue link type. Read only. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Build call for updateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID or the request body are invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return updateTypeCall(issueLinkTypeId, issueLinkType, _callback);
        }

        private IssueLinkType buildBodyParams() {
            IssueLinkType issueLinkType = new IssueLinkType();
            issueLinkType.id(this.id);
            issueLinkType.inward(this.inward);
            issueLinkType.name(this.name);
            issueLinkType.outward(this.outward);
            issueLinkType.self(this.self);
            return issueLinkType;
        }

        /**
         * Execute updateType request
         * @return IssueLinkType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID or the request body are invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public IssueLinkType execute() throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            ApiResponse<IssueLinkType> localVarResp = updateTypeWithHttpInfo(issueLinkTypeId, issueLinkType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateType request with HTTP info returned
         * @return ApiResponse&lt;IssueLinkType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID or the request body are invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueLinkType> executeWithHttpInfo() throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return updateTypeWithHttpInfo(issueLinkTypeId, issueLinkType);
        }

        /**
         * Execute updateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue link type ID or the request body are invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueLinkType> _callback) throws ApiException {
            IssueLinkType issueLinkType = buildBodyParams();
            return updateTypeAsync(issueLinkTypeId, issueLinkType, _callback);
        }
    }

    /**
     * Update issue link type
     * Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @param issueLinkType  (required)
     * @return UpdateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue link type ID or the request body are invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTypeRequestBuilder updateType(String issueLinkTypeId) throws IllegalArgumentException {
        if (issueLinkTypeId == null) throw new IllegalArgumentException("\"issueLinkTypeId\" is required but got null");
            

        return new UpdateTypeRequestBuilder(issueLinkTypeId);
    }
}
