/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddNotificationsDetails;
import com.konfigthis.client.model.CreateNotificationSchemeDetails;
import com.konfigthis.client.model.NotificationScheme;
import com.konfigthis.client.model.NotificationSchemeEventDetails;
import com.konfigthis.client.model.NotificationSchemeId;
import com.konfigthis.client.model.PageBeanNotificationScheme;
import com.konfigthis.client.model.PageBeanNotificationSchemeAndProjectMappingJsonBean;
import java.util.Set;
import com.konfigthis.client.model.UpdateNotificationSchemeDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueNotificationSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueNotificationSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueNotificationSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNotificationsToSchemeCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/{id}/notification"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNotificationsToSchemeValidateBeforeCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addNotificationsToScheme(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addNotificationsToScheme(Async)");
        }

        return addNotificationsToSchemeCall(id, requestBody, _callback);

    }


    private ApiResponse<Object> addNotificationsToSchemeWithHttpInfo(String id, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addNotificationsToSchemeValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNotificationsToSchemeAsync(String id, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNotificationsToSchemeValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNotificationsToSchemeRequestBuilder {
        private final List<NotificationSchemeEventDetails> notificationSchemeEvents;
        private final String id;

        private AddNotificationsToSchemeRequestBuilder(List<NotificationSchemeEventDetails> notificationSchemeEvents, String id) {
            this.notificationSchemeEvents = notificationSchemeEvents;
            this.id = id;
        }

        /**
         * Build call for addNotificationsToScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addNotificationsToSchemeCall(id, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("notificationSchemeEvents", this.notificationSchemeEvents);
            return requestBody;
        }

        /**
         * Execute addNotificationsToScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = addNotificationsToSchemeWithHttpInfo(id, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNotificationsToScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addNotificationsToSchemeWithHttpInfo(id, requestBody);
        }

        /**
         * Execute addNotificationsToScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return addNotificationsToSchemeAsync(id, requestBody, _callback);
        }
    }

    /**
     * Add notifications to notification scheme
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.  *Deprecated: The notification type &#x60;EmailAddress&#x60; is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the notification scheme. (required)
     * @param requestBody  (required)
     * @return AddNotificationsToSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public AddNotificationsToSchemeRequestBuilder addNotificationsToScheme(List<NotificationSchemeEventDetails> notificationSchemeEvents, String id) throws IllegalArgumentException {
        if (notificationSchemeEvents == null) throw new IllegalArgumentException("\"notificationSchemeEvents\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddNotificationsToSchemeRequestBuilder(notificationSchemeEvents, id);
    }
    private okhttp3.Call createNotificationSchemeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNotificationSchemeValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createNotificationScheme(Async)");
        }

        return createNotificationSchemeCall(requestBody, _callback);

    }


    private ApiResponse<NotificationSchemeId> createNotificationSchemeWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createNotificationSchemeValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<NotificationSchemeId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNotificationSchemeAsync(Map<String, Object> requestBody, final ApiCallback<NotificationSchemeId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNotificationSchemeValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<NotificationSchemeId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNotificationSchemeRequestBuilder {
        private final String name;
        private String description;
        private List<NotificationSchemeEventDetails> notificationSchemeEvents;

        private CreateNotificationSchemeRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the notification scheme. (optional)
         * @return CreateNotificationSchemeRequestBuilder
         */
        public CreateNotificationSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set notificationSchemeEvents
         * @param notificationSchemeEvents The list of notifications which should be added to the notification scheme. (optional)
         * @return CreateNotificationSchemeRequestBuilder
         */
        public CreateNotificationSchemeRequestBuilder notificationSchemeEvents(List<NotificationSchemeEventDetails> notificationSchemeEvents) {
            this.notificationSchemeEvents = notificationSchemeEvents;
            return this;
        }
        
        /**
         * Build call for createNotificationScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNotificationSchemeCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            requestBody.put("notificationSchemeEvents", this.notificationSchemeEvents);
            return requestBody;
        }

        /**
         * Execute createNotificationScheme request
         * @return NotificationSchemeId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public NotificationSchemeId execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<NotificationSchemeId> localVarResp = createNotificationSchemeWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNotificationScheme request with HTTP info returned
         * @return ApiResponse&lt;NotificationSchemeId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NotificationSchemeId> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNotificationSchemeWithHttpInfo(requestBody);
        }

        /**
         * Execute createNotificationScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NotificationSchemeId> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNotificationSchemeAsync(requestBody, _callback);
        }
    }

    /**
     * Create notification scheme
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param requestBody  (required)
     * @return CreateNotificationSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNotificationSchemeRequestBuilder createNotificationScheme(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNotificationSchemeRequestBuilder(name);
    }
    private okhttp3.Call deleteNotificationFromSchemeCall(String notificationSchemeId, String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}"
            .replace("{" + "notificationSchemeId" + "}", localVarApiClient.escapeString(notificationSchemeId.toString()))
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationFromSchemeValidateBeforeCall(String notificationSchemeId, String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationSchemeId' is set
        if (notificationSchemeId == null) {
            throw new ApiException("Missing the required parameter 'notificationSchemeId' when calling deleteNotificationFromScheme(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling deleteNotificationFromScheme(Async)");
        }

        return deleteNotificationFromSchemeCall(notificationSchemeId, notificationId, _callback);

    }


    private ApiResponse<Object> deleteNotificationFromSchemeWithHttpInfo(String notificationSchemeId, String notificationId) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationFromSchemeValidateBeforeCall(notificationSchemeId, notificationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteNotificationFromSchemeAsync(String notificationSchemeId, String notificationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNotificationFromSchemeValidateBeforeCall(notificationSchemeId, notificationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteNotificationFromSchemeRequestBuilder {
        private final String notificationSchemeId;
        private final String notificationId;

        private DeleteNotificationFromSchemeRequestBuilder(String notificationSchemeId, String notificationId) {
            this.notificationSchemeId = notificationSchemeId;
            this.notificationId = notificationId;
        }

        /**
         * Build call for deleteNotificationFromScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNotificationFromSchemeCall(notificationSchemeId, notificationId, _callback);
        }


        /**
         * Execute deleteNotificationFromScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteNotificationFromSchemeWithHttpInfo(notificationSchemeId, notificationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteNotificationFromScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteNotificationFromSchemeWithHttpInfo(notificationSchemeId, notificationId);
        }

        /**
         * Execute deleteNotificationFromScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteNotificationFromSchemeAsync(notificationSchemeId, notificationId, _callback);
        }
    }

    /**
     * Remove notification from notification scheme
     * Removes a notification from a notification scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param notificationSchemeId The ID of the notification scheme. (required)
     * @param notificationId The ID of the notification. (required)
     * @return DeleteNotificationFromSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteNotificationFromSchemeRequestBuilder deleteNotificationFromScheme(String notificationSchemeId, String notificationId) throws IllegalArgumentException {
        if (notificationSchemeId == null) throw new IllegalArgumentException("\"notificationSchemeId\" is required but got null");
            

        if (notificationId == null) throw new IllegalArgumentException("\"notificationId\" is required but got null");
            

        return new DeleteNotificationFromSchemeRequestBuilder(notificationSchemeId, notificationId);
    }
    private okhttp3.Call getDetailsByIdCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByIdValidateBeforeCall(Long id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetailsById(Async)");
        }

        return getDetailsByIdCall(id, expand, _callback);

    }


    private ApiResponse<NotificationScheme> getDetailsByIdWithHttpInfo(Long id, String expand) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<NotificationScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByIdAsync(Long id, String expand, final ApiCallback<NotificationScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<NotificationScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByIdRequestBuilder {
        private final Long id;
        private String expand;

        private GetDetailsByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
         * @return GetDetailsByIdRequestBuilder
         */
        public GetDetailsByIdRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getDetailsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the notification scheme is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByIdCall(id, expand, _callback);
        }


        /**
         * Execute getDetailsById request
         * @return NotificationScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the notification scheme is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public NotificationScheme execute() throws ApiException {
            ApiResponse<NotificationScheme> localVarResp = getDetailsByIdWithHttpInfo(id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsById request with HTTP info returned
         * @return ApiResponse&lt;NotificationScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the notification scheme is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NotificationScheme> executeWithHttpInfo() throws ApiException {
            return getDetailsByIdWithHttpInfo(id, expand);
        }

        /**
         * Execute getDetailsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the notification scheme is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NotificationScheme> _callback) throws ApiException {
            return getDetailsByIdAsync(id, expand, _callback);
        }
    }

    /**
     * Get notification scheme
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
     * @param id The ID of the notification scheme. Use [Get notification schemes paginated](https://dac-static.atlassian.com) to get a list of notification scheme IDs. (required)
     * @return GetDetailsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the notification scheme is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByIdRequestBuilder getDetailsById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDetailsByIdRequestBuilder(id);
    }
    private okhttp3.Call getProjectsUsingNotificationSchemesPaginatedCall(String startAt, String maxResults, Set<String> notificationSchemeId, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (notificationSchemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "notificationSchemeId", notificationSchemeId));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsUsingNotificationSchemesPaginatedValidateBeforeCall(String startAt, String maxResults, Set<String> notificationSchemeId, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        return getProjectsUsingNotificationSchemesPaginatedCall(startAt, maxResults, notificationSchemeId, projectId, _callback);

    }


    private ApiResponse<PageBeanNotificationSchemeAndProjectMappingJsonBean> getProjectsUsingNotificationSchemesPaginatedWithHttpInfo(String startAt, String maxResults, Set<String> notificationSchemeId, Set<String> projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectsUsingNotificationSchemesPaginatedValidateBeforeCall(startAt, maxResults, notificationSchemeId, projectId, null);
        Type localVarReturnType = new TypeToken<PageBeanNotificationSchemeAndProjectMappingJsonBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectsUsingNotificationSchemesPaginatedAsync(String startAt, String maxResults, Set<String> notificationSchemeId, Set<String> projectId, final ApiCallback<PageBeanNotificationSchemeAndProjectMappingJsonBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsUsingNotificationSchemesPaginatedValidateBeforeCall(startAt, maxResults, notificationSchemeId, projectId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanNotificationSchemeAndProjectMappingJsonBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectsUsingNotificationSchemesPaginatedRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> notificationSchemeId;
        private Set<String> projectId;

        private GetProjectsUsingNotificationSchemesPaginatedRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetProjectsUsingNotificationSchemesPaginatedRequestBuilder
         */
        public GetProjectsUsingNotificationSchemesPaginatedRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetProjectsUsingNotificationSchemesPaginatedRequestBuilder
         */
        public GetProjectsUsingNotificationSchemesPaginatedRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set notificationSchemeId
         * @param notificationSchemeId The list of notifications scheme IDs to be filtered out (optional)
         * @return GetProjectsUsingNotificationSchemesPaginatedRequestBuilder
         */
        public GetProjectsUsingNotificationSchemesPaginatedRequestBuilder notificationSchemeId(Set<String> notificationSchemeId) {
            this.notificationSchemeId = notificationSchemeId;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The list of project IDs to be filtered out (optional)
         * @return GetProjectsUsingNotificationSchemesPaginatedRequestBuilder
         */
        public GetProjectsUsingNotificationSchemesPaginatedRequestBuilder projectId(Set<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for getProjectsUsingNotificationSchemesPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectsUsingNotificationSchemesPaginatedCall(startAt, maxResults, notificationSchemeId, projectId, _callback);
        }


        /**
         * Execute getProjectsUsingNotificationSchemesPaginated request
         * @return PageBeanNotificationSchemeAndProjectMappingJsonBean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanNotificationSchemeAndProjectMappingJsonBean execute() throws ApiException {
            ApiResponse<PageBeanNotificationSchemeAndProjectMappingJsonBean> localVarResp = getProjectsUsingNotificationSchemesPaginatedWithHttpInfo(startAt, maxResults, notificationSchemeId, projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectsUsingNotificationSchemesPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanNotificationSchemeAndProjectMappingJsonBean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanNotificationSchemeAndProjectMappingJsonBean> executeWithHttpInfo() throws ApiException {
            return getProjectsUsingNotificationSchemesPaginatedWithHttpInfo(startAt, maxResults, notificationSchemeId, projectId);
        }

        /**
         * Execute getProjectsUsingNotificationSchemesPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanNotificationSchemeAndProjectMappingJsonBean> _callback) throws ApiException {
            return getProjectsUsingNotificationSchemesPaginatedAsync(startAt, maxResults, notificationSchemeId, projectId, _callback);
        }
    }

    /**
     * Get projects using notification schemes paginated
     * Returns a [paginated](https://dac-static.atlassian.com) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don&#39;t have a concept of a default notification scheme. The mappings are ordered by projectId.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @return GetProjectsUsingNotificationSchemesPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectsUsingNotificationSchemesPaginatedRequestBuilder getProjectsUsingNotificationSchemesPaginated() throws IllegalArgumentException {
        return new GetProjectsUsingNotificationSchemesPaginatedRequestBuilder();
    }
    private okhttp3.Call listNotificationSchemesPaginatedCall(String startAt, String maxResults, Set<String> id, Set<String> projectId, Boolean onlyDefault, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        if (onlyDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyDefault", onlyDefault));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNotificationSchemesPaginatedValidateBeforeCall(String startAt, String maxResults, Set<String> id, Set<String> projectId, Boolean onlyDefault, String expand, final ApiCallback _callback) throws ApiException {
        return listNotificationSchemesPaginatedCall(startAt, maxResults, id, projectId, onlyDefault, expand, _callback);

    }


    private ApiResponse<PageBeanNotificationScheme> listNotificationSchemesPaginatedWithHttpInfo(String startAt, String maxResults, Set<String> id, Set<String> projectId, Boolean onlyDefault, String expand) throws ApiException {
        okhttp3.Call localVarCall = listNotificationSchemesPaginatedValidateBeforeCall(startAt, maxResults, id, projectId, onlyDefault, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanNotificationScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listNotificationSchemesPaginatedAsync(String startAt, String maxResults, Set<String> id, Set<String> projectId, Boolean onlyDefault, String expand, final ApiCallback<PageBeanNotificationScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNotificationSchemesPaginatedValidateBeforeCall(startAt, maxResults, id, projectId, onlyDefault, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanNotificationScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListNotificationSchemesPaginatedRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> id;
        private Set<String> projectId;
        private Boolean onlyDefault;
        private String expand;

        private ListNotificationSchemesPaginatedRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of notification schemes IDs to be filtered by (optional)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The list of projects IDs to be filtered by (optional)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder projectId(Set<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set onlyDefault
         * @param onlyDefault When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false. (optional, default to false)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder onlyDefault(Boolean onlyDefault) {
            this.onlyDefault = onlyDefault;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
         * @return ListNotificationSchemesPaginatedRequestBuilder
         */
        public ListNotificationSchemesPaginatedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listNotificationSchemesPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listNotificationSchemesPaginatedCall(startAt, maxResults, id, projectId, onlyDefault, expand, _callback);
        }


        /**
         * Execute listNotificationSchemesPaginated request
         * @return PageBeanNotificationScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanNotificationScheme execute() throws ApiException {
            ApiResponse<PageBeanNotificationScheme> localVarResp = listNotificationSchemesPaginatedWithHttpInfo(startAt, maxResults, id, projectId, onlyDefault, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listNotificationSchemesPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanNotificationScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanNotificationScheme> executeWithHttpInfo() throws ApiException {
            return listNotificationSchemesPaginatedWithHttpInfo(startAt, maxResults, id, projectId, onlyDefault, expand);
        }

        /**
         * Execute listNotificationSchemesPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanNotificationScheme> _callback) throws ApiException {
            return listNotificationSchemesPaginatedAsync(startAt, maxResults, id, projectId, onlyDefault, expand, _callback);
        }
    }

    /**
     * Get notification schemes paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.  *Note that you should allow for events without recipients to appear in responses.*  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     * @return ListNotificationSchemesPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListNotificationSchemesPaginatedRequestBuilder listNotificationSchemesPaginated() throws IllegalArgumentException {
        return new ListNotificationSchemesPaginatedRequestBuilder();
    }
    private okhttp3.Call removeSchemeCall(String notificationSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/{notificationSchemeId}"
            .replace("{" + "notificationSchemeId" + "}", localVarApiClient.escapeString(notificationSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSchemeValidateBeforeCall(String notificationSchemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationSchemeId' is set
        if (notificationSchemeId == null) {
            throw new ApiException("Missing the required parameter 'notificationSchemeId' when calling removeScheme(Async)");
        }

        return removeSchemeCall(notificationSchemeId, _callback);

    }


    private ApiResponse<Object> removeSchemeWithHttpInfo(String notificationSchemeId) throws ApiException {
        okhttp3.Call localVarCall = removeSchemeValidateBeforeCall(notificationSchemeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSchemeAsync(String notificationSchemeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSchemeValidateBeforeCall(notificationSchemeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSchemeRequestBuilder {
        private final String notificationSchemeId;

        private RemoveSchemeRequestBuilder(String notificationSchemeId) {
            this.notificationSchemeId = notificationSchemeId;
        }

        /**
         * Build call for removeScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSchemeCall(notificationSchemeId, _callback);
        }


        /**
         * Execute removeScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeSchemeWithHttpInfo(notificationSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeSchemeWithHttpInfo(notificationSchemeId);
        }

        /**
         * Execute removeScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeSchemeAsync(notificationSchemeId, _callback);
        }
    }

    /**
     * Delete notification scheme
     * Deletes a notification scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param notificationSchemeId The ID of the notification scheme. (required)
     * @return RemoveSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSchemeRequestBuilder removeScheme(String notificationSchemeId) throws IllegalArgumentException {
        if (notificationSchemeId == null) throw new IllegalArgumentException("\"notificationSchemeId\" is required but got null");
            

        return new RemoveSchemeRequestBuilder(notificationSchemeId);
    }
    private okhttp3.Call updateSchemeCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/notificationscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeValidateBeforeCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateScheme(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateScheme(Async)");
        }

        return updateSchemeCall(id, requestBody, _callback);

    }


    private ApiResponse<Object> updateSchemeWithHttpInfo(String id, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeAsync(String id, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeRequestBuilder {
        private final String id;
        private String description;
        private String name;

        private UpdateSchemeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the notification scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the notification scheme. Must be unique. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeCall(id, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            return requestBody;
        }

        /**
         * Execute updateScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSchemeWithHttpInfo(id, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeWithHttpInfo(id, requestBody);
        }

        /**
         * Execute updateScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeAsync(id, requestBody, _callback);
        }
    }

    /**
     * Update notification scheme
     * Updates a notification scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the notification scheme. (required)
     * @param requestBody  (required)
     * @return UpdateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeRequestBuilder updateScheme(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateSchemeRequestBuilder(id);
    }
}
