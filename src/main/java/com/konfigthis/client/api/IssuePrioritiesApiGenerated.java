/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatePriorityDetails;
import com.konfigthis.client.model.PageBeanPriority;
import com.konfigthis.client.model.Priority;
import com.konfigthis.client.model.PriorityId;
import com.konfigthis.client.model.ReorderIssuePriorities;
import com.konfigthis.client.model.SetDefaultPriorityRequest;
import com.konfigthis.client.model.UpdatePriorityDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssuePrioritiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuePrioritiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssuePrioritiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call changeOrderCall(ReorderIssuePriorities reorderIssuePriorities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reorderIssuePriorities;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/move";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderValidateBeforeCall(ReorderIssuePriorities reorderIssuePriorities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reorderIssuePriorities' is set
        if (reorderIssuePriorities == null) {
            throw new ApiException("Missing the required parameter 'reorderIssuePriorities' when calling changeOrder(Async)");
        }

        return changeOrderCall(reorderIssuePriorities, _callback);

    }


    private ApiResponse<Object> changeOrderWithHttpInfo(ReorderIssuePriorities reorderIssuePriorities) throws ApiException {
        okhttp3.Call localVarCall = changeOrderValidateBeforeCall(reorderIssuePriorities, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changeOrderAsync(ReorderIssuePriorities reorderIssuePriorities, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderValidateBeforeCall(reorderIssuePriorities, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangeOrderRequestBuilder {
        private final List<String> ids;
        private String after;
        private String position;

        private ChangeOrderRequestBuilder(List<String> ids) {
            this.ids = ids;
        }

        /**
         * Set after
         * @param after The ID of the priority. Required if &#x60;position&#x60; isn&#39;t provided. (optional)
         * @return ChangeOrderRequestBuilder
         */
        public ChangeOrderRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set position
         * @param position The position for issue priorities to be moved to. Required if &#x60;after&#x60; isn&#39;t provided. (optional)
         * @return ChangeOrderRequestBuilder
         */
        public ChangeOrderRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for changeOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReorderIssuePriorities reorderIssuePriorities = buildBodyParams();
            return changeOrderCall(reorderIssuePriorities, _callback);
        }

        private ReorderIssuePriorities buildBodyParams() {
            ReorderIssuePriorities reorderIssuePriorities = new ReorderIssuePriorities();
            reorderIssuePriorities.after(this.after);
            reorderIssuePriorities.ids(this.ids);
            reorderIssuePriorities.position(this.position);
            return reorderIssuePriorities;
        }

        /**
         * Execute changeOrder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ReorderIssuePriorities reorderIssuePriorities = buildBodyParams();
            ApiResponse<Object> localVarResp = changeOrderWithHttpInfo(reorderIssuePriorities);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changeOrder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ReorderIssuePriorities reorderIssuePriorities = buildBodyParams();
            return changeOrderWithHttpInfo(reorderIssuePriorities);
        }

        /**
         * Execute changeOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ReorderIssuePriorities reorderIssuePriorities = buildBodyParams();
            return changeOrderAsync(reorderIssuePriorities, _callback);
        }
    }

    /**
     * Move priorities
     * Changes the order of issue priorities.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param reorderIssuePriorities  (required)
     * @return ChangeOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeOrderRequestBuilder changeOrder(List<String> ids) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        return new ChangeOrderRequestBuilder(ids);
    }
    private okhttp3.Call createIssuePriorityCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIssuePriorityValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createIssuePriority(Async)");
        }

        return createIssuePriorityCall(requestBody, _callback);

    }


    private ApiResponse<PriorityId> createIssuePriorityWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createIssuePriorityValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<PriorityId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIssuePriorityAsync(Map<String, Object> requestBody, final ApiCallback<PriorityId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIssuePriorityValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<PriorityId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIssuePriorityRequestBuilder {
        private final String name;
        private final String statusColor;
        private String description;
        private String iconUrl;

        private CreateIssuePriorityRequestBuilder(String name, String statusColor) {
            this.name = name;
            this.statusColor = statusColor;
        }

        /**
         * Set description
         * @param description The description of the priority. (optional)
         * @return CreateIssuePriorityRequestBuilder
         */
        public CreateIssuePriorityRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set iconUrl
         * @param iconUrl The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. (optional)
         * @return CreateIssuePriorityRequestBuilder
         */
        public CreateIssuePriorityRequestBuilder iconUrl(String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }
        
        /**
         * Build call for createIssuePriority
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createIssuePriorityCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            if (this.iconUrl != null)
            requestBody.put("iconUrl", Map<String, Object>.IconUrlEnum.fromValue(this.iconUrl));
            requestBody.put("name", this.name);
            requestBody.put("statusColor", this.statusColor);
            return requestBody;
        }

        /**
         * Execute createIssuePriority request
         * @return PriorityId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PriorityId execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PriorityId> localVarResp = createIssuePriorityWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIssuePriority request with HTTP info returned
         * @return ApiResponse&lt;PriorityId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PriorityId> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createIssuePriorityWithHttpInfo(requestBody);
        }

        /**
         * Execute createIssuePriority request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PriorityId> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createIssuePriorityAsync(requestBody, _callback);
        }
    }

    /**
     * Create priority
     * Creates an issue priority.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param requestBody  (required)
     * @return CreateIssuePriorityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public CreateIssuePriorityRequestBuilder createIssuePriority(String name, String statusColor) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (statusColor == null) throw new IllegalArgumentException("\"statusColor\" is required but got null");
            

        return new CreateIssuePriorityRequestBuilder(name, statusColor);
    }
    private okhttp3.Call deleteIssuePriorityCall(String id, String replaceWith, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceWith", replaceWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssuePriorityValidateBeforeCall(String id, String replaceWith, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIssuePriority(Async)");
        }

        // verify the required parameter 'replaceWith' is set
        if (replaceWith == null) {
            throw new ApiException("Missing the required parameter 'replaceWith' when calling deleteIssuePriority(Async)");
        }

        return deleteIssuePriorityCall(id, replaceWith, _callback);

    }


    private ApiResponse<Void> deleteIssuePriorityWithHttpInfo(String id, String replaceWith) throws ApiException {
        okhttp3.Call localVarCall = deleteIssuePriorityValidateBeforeCall(id, replaceWith, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteIssuePriorityAsync(String id, String replaceWith, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssuePriorityValidateBeforeCall(id, replaceWith, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteIssuePriorityRequestBuilder {
        private final String id;
        private final String replaceWith;

        private DeleteIssuePriorityRequestBuilder(String id, String replaceWith) {
            this.id = id;
            this.replaceWith = replaceWith;
        }

        /**
         * Build call for deleteIssuePriority
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIssuePriorityCall(id, replaceWith, _callback);
        }


        /**
         * Execute deleteIssuePriority request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteIssuePriorityWithHttpInfo(id, replaceWith);
        }

        /**
         * Execute deleteIssuePriority request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteIssuePriorityWithHttpInfo(id, replaceWith);
        }

        /**
         * Execute deleteIssuePriority request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteIssuePriorityAsync(id, replaceWith, _callback);
        }
    }

    /**
     * Delete priority
     * *Deprecated: please refer to the* [changelog](https://developer.atlassian.com/changelog/#CHANGE-1066) *for more details.*  Deletes an issue priority.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the issue priority. (required)
     * @param replaceWith The ID of the issue priority that will replace the currently selected resolution. (required)
     * @return DeleteIssuePriorityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeleteIssuePriorityRequestBuilder deleteIssuePriority(String id, String replaceWith) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (replaceWith == null) throw new IllegalArgumentException("\"replaceWith\" is required but got null");
            

        return new DeleteIssuePriorityRequestBuilder(id, replaceWith);
    }
    private okhttp3.Call getPriorityByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriorityByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPriorityById(Async)");
        }

        return getPriorityByIdCall(id, _callback);

    }


    private ApiResponse<Priority> getPriorityByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPriorityByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Priority>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPriorityByIdAsync(String id, final ApiCallback<Priority> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriorityByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Priority>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPriorityByIdRequestBuilder {
        private final String id;

        private GetPriorityByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getPriorityById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue priority isn&#39;t found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPriorityByIdCall(id, _callback);
        }


        /**
         * Execute getPriorityById request
         * @return Priority
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue priority isn&#39;t found. </td><td>  -  </td></tr>
         </table>
         */
        public Priority execute() throws ApiException {
            ApiResponse<Priority> localVarResp = getPriorityByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPriorityById request with HTTP info returned
         * @return ApiResponse&lt;Priority&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue priority isn&#39;t found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Priority> executeWithHttpInfo() throws ApiException {
            return getPriorityByIdWithHttpInfo(id);
        }

        /**
         * Execute getPriorityById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue priority isn&#39;t found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Priority> _callback) throws ApiException {
            return getPriorityByIdAsync(id, _callback);
        }
    }

    /**
     * Get priority
     * Returns an issue priority.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param id The ID of the issue priority. (required)
     * @return GetPriorityByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue priority isn&#39;t found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPriorityByIdRequestBuilder getPriorityById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetPriorityByIdRequestBuilder(id);
    }
    private okhttp3.Call listGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listGetCall(_callback);

    }


    private ApiResponse<List<Priority>> listGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Priority>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGetAsync(final ApiCallback<List<Priority>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Priority>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGetRequestBuilder {

        private ListGetRequestBuilder() {
        }

        /**
         * Build call for listGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGetCall(_callback);
        }


        /**
         * Execute listGet request
         * @return List&lt;Priority&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public List<Priority> execute() throws ApiException {
            ApiResponse<List<Priority>> localVarResp = listGetWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGet request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Priority&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<List<Priority>> executeWithHttpInfo() throws ApiException {
            return listGetWithHttpInfo();
        }

        /**
         * Execute listGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<List<Priority>> _callback) throws ApiException {
            return listGetAsync(_callback);
        }
    }

    /**
     * Get priorities
     * Returns the list of all issue priorities.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @return ListGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListGetRequestBuilder listGet() throws IllegalArgumentException {
        return new ListGetRequestBuilder();
    }
    private okhttp3.Call searchCall(String startAt, String maxResults, List<String> id, List<String> projectId, String priorityName, Boolean onlyDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        if (priorityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priorityName", priorityName));
        }

        if (onlyDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyDefault", onlyDefault));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String startAt, String maxResults, List<String> id, List<String> projectId, String priorityName, Boolean onlyDefault, final ApiCallback _callback) throws ApiException {
        return searchCall(startAt, maxResults, id, projectId, priorityName, onlyDefault, _callback);

    }


    private ApiResponse<PageBeanPriority> searchWithHttpInfo(String startAt, String maxResults, List<String> id, List<String> projectId, String priorityName, Boolean onlyDefault) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(startAt, maxResults, id, projectId, priorityName, onlyDefault, null);
        Type localVarReturnType = new TypeToken<PageBeanPriority>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAsync(String startAt, String maxResults, List<String> id, List<String> projectId, String priorityName, Boolean onlyDefault, final ApiCallback<PageBeanPriority> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(startAt, maxResults, id, projectId, priorityName, onlyDefault, _callback);
        Type localVarReturnType = new TypeToken<PageBeanPriority>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchRequestBuilder {
        private String startAt;
        private String maxResults;
        private List<String> id;
        private List<String> projectId;
        private String priorityName;
        private Boolean onlyDefault;

        private SearchRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;2&amp;id&#x3D;3&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder id(List<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10010&amp;projectId&#x3D;10111&#x60;. (optional)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder projectId(List<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set priorityName
         * @param priorityName The name of priority to search for. (optional, default to )
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder priorityName(String priorityName) {
            this.priorityName = priorityName;
            return this;
        }
        
        /**
         * Set onlyDefault
         * @param onlyDefault Whether only the default priority is returned. (optional, default to false)
         * @return SearchRequestBuilder
         */
        public SearchRequestBuilder onlyDefault(Boolean onlyDefault) {
            this.onlyDefault = onlyDefault;
            return this;
        }
        
        /**
         * Build call for search
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCall(startAt, maxResults, id, projectId, priorityName, onlyDefault, _callback);
        }


        /**
         * Execute search request
         * @return PageBeanPriority
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanPriority execute() throws ApiException {
            ApiResponse<PageBeanPriority> localVarResp = searchWithHttpInfo(startAt, maxResults, id, projectId, priorityName, onlyDefault);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute search request with HTTP info returned
         * @return ApiResponse&lt;PageBeanPriority&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanPriority> executeWithHttpInfo() throws ApiException {
            return searchWithHttpInfo(startAt, maxResults, id, projectId, priorityName, onlyDefault);
        }

        /**
         * Execute search request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanPriority> _callback) throws ApiException {
            return searchAsync(startAt, maxResults, id, projectId, priorityName, onlyDefault, _callback);
        }
    }

    /**
     * Search priorities
     * Returns a [paginated](https://dac-static.atlassian.com) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:   *  a list of priority IDs. Any invalid priority IDs are ignored.  *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @return SearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public SearchRequestBuilder search() throws IllegalArgumentException {
        return new SearchRequestBuilder();
    }
    private okhttp3.Call setDefaultPriorityCall(SetDefaultPriorityRequest setDefaultPriorityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setDefaultPriorityRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultPriorityValidateBeforeCall(SetDefaultPriorityRequest setDefaultPriorityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setDefaultPriorityRequest' is set
        if (setDefaultPriorityRequest == null) {
            throw new ApiException("Missing the required parameter 'setDefaultPriorityRequest' when calling setDefaultPriority(Async)");
        }

        return setDefaultPriorityCall(setDefaultPriorityRequest, _callback);

    }


    private ApiResponse<Object> setDefaultPriorityWithHttpInfo(SetDefaultPriorityRequest setDefaultPriorityRequest) throws ApiException {
        okhttp3.Call localVarCall = setDefaultPriorityValidateBeforeCall(setDefaultPriorityRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultPriorityAsync(SetDefaultPriorityRequest setDefaultPriorityRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultPriorityValidateBeforeCall(setDefaultPriorityRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultPriorityRequestBuilder {
        private final String id;

        private SetDefaultPriorityRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for setDefaultPriority
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SetDefaultPriorityRequest setDefaultPriorityRequest = buildBodyParams();
            return setDefaultPriorityCall(setDefaultPriorityRequest, _callback);
        }

        private SetDefaultPriorityRequest buildBodyParams() {
            SetDefaultPriorityRequest setDefaultPriorityRequest = new SetDefaultPriorityRequest();
            setDefaultPriorityRequest.id(this.id);
            return setDefaultPriorityRequest;
        }

        /**
         * Execute setDefaultPriority request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SetDefaultPriorityRequest setDefaultPriorityRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = setDefaultPriorityWithHttpInfo(setDefaultPriorityRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultPriority request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SetDefaultPriorityRequest setDefaultPriorityRequest = buildBodyParams();
            return setDefaultPriorityWithHttpInfo(setDefaultPriorityRequest);
        }

        /**
         * Execute setDefaultPriority request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SetDefaultPriorityRequest setDefaultPriorityRequest = buildBodyParams();
            return setDefaultPriorityAsync(setDefaultPriorityRequest, _callback);
        }
    }

    /**
     * Set default priority
     * Sets default issue priority.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param setDefaultPriorityRequest  (required)
     * @return SetDefaultPriorityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultPriorityRequestBuilder setDefaultPriority(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SetDefaultPriorityRequestBuilder(id);
    }
    private okhttp3.Call updateIssuePriorityCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/priority/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIssuePriorityValidateBeforeCall(String id, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIssuePriority(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateIssuePriority(Async)");
        }

        return updateIssuePriorityCall(id, requestBody, _callback);

    }


    private ApiResponse<Object> updateIssuePriorityWithHttpInfo(String id, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateIssuePriorityValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateIssuePriorityAsync(String id, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIssuePriorityValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateIssuePriorityRequestBuilder {
        private final String id;
        private String description;
        private String iconUrl;
        private String name;
        private String statusColor;

        private UpdateIssuePriorityRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the priority. (optional)
         * @return UpdateIssuePriorityRequestBuilder
         */
        public UpdateIssuePriorityRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set iconUrl
         * @param iconUrl The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used. (optional)
         * @return UpdateIssuePriorityRequestBuilder
         */
        public UpdateIssuePriorityRequestBuilder iconUrl(String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the priority. Must be unique. (optional)
         * @return UpdateIssuePriorityRequestBuilder
         */
        public UpdateIssuePriorityRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set statusColor
         * @param statusColor The status color of the priority in 3-digit or 6-digit hexadecimal format. (optional)
         * @return UpdateIssuePriorityRequestBuilder
         */
        public UpdateIssuePriorityRequestBuilder statusColor(String statusColor) {
            this.statusColor = statusColor;
            return this;
        }
        
        /**
         * Build call for updateIssuePriority
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateIssuePriorityCall(id, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            if (this.iconUrl != null)
            requestBody.put("iconUrl", Map<String, Object>.IconUrlEnum.fromValue(this.iconUrl));
            requestBody.put("name", this.name);
            requestBody.put("statusColor", this.statusColor);
            return requestBody;
        }

        /**
         * Execute updateIssuePriority request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateIssuePriorityWithHttpInfo(id, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateIssuePriority request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateIssuePriorityWithHttpInfo(id, requestBody);
        }

        /**
         * Execute updateIssuePriority request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateIssuePriorityAsync(id, requestBody, _callback);
        }
    }

    /**
     * Update priority
     * Updates an issue priority.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the issue priority. (required)
     * @param requestBody  (required)
     * @return UpdateIssuePriorityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIssuePriorityRequestBuilder updateIssuePriority(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateIssuePriorityRequestBuilder(id);
    }
}
