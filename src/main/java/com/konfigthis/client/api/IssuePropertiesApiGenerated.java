/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkIssuePropertyUpdateRequest;
import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.IssueEntityProperties;
import com.konfigthis.client.model.IssueEntityPropertiesForMultiUpdate;
import com.konfigthis.client.model.IssueFilterForBulkPropertyDelete;
import com.konfigthis.client.model.IssueFilterForBulkPropertySet;
import com.konfigthis.client.model.JsonNode;
import com.konfigthis.client.model.MultiIssueEntityProperties;
import com.konfigthis.client.model.PropertyKeys;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssuePropertiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuePropertiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssuePropertiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkDeleteIssuePropertyByFilterCall(String propertyKey, IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueFilterForBulkPropertyDelete;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteIssuePropertyByFilterValidateBeforeCall(String propertyKey, IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling bulkDeleteIssuePropertyByFilter(Async)");
        }

        // verify the required parameter 'issueFilterForBulkPropertyDelete' is set
        if (issueFilterForBulkPropertyDelete == null) {
            throw new ApiException("Missing the required parameter 'issueFilterForBulkPropertyDelete' when calling bulkDeleteIssuePropertyByFilter(Async)");
        }

        return bulkDeleteIssuePropertyByFilterCall(propertyKey, issueFilterForBulkPropertyDelete, _callback);

    }


    private ApiResponse<Void> bulkDeleteIssuePropertyByFilterWithHttpInfo(String propertyKey, IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteIssuePropertyByFilterValidateBeforeCall(propertyKey, issueFilterForBulkPropertyDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkDeleteIssuePropertyByFilterAsync(String propertyKey, IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteIssuePropertyByFilterValidateBeforeCall(propertyKey, issueFilterForBulkPropertyDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkDeleteIssuePropertyByFilterRequestBuilder {
        private final String propertyKey;
        private Object currentValue;
        private Set<Long> entityIds;

        private BulkDeleteIssuePropertyByFilterRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set currentValue
         * @param currentValue The value of properties to perform the bulk operation on. (optional)
         * @return BulkDeleteIssuePropertyByFilterRequestBuilder
         */
        public BulkDeleteIssuePropertyByFilterRequestBuilder currentValue(Object currentValue) {
            this.currentValue = currentValue;
            return this;
        }
        
        /**
         * Set entityIds
         * @param entityIds List of issues to perform the bulk delete operation on. (optional)
         * @return BulkDeleteIssuePropertyByFilterRequestBuilder
         */
        public BulkDeleteIssuePropertyByFilterRequestBuilder entityIds(Set<Long> entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        
        /**
         * Build call for bulkDeleteIssuePropertyByFilter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete = buildBodyParams();
            return bulkDeleteIssuePropertyByFilterCall(propertyKey, issueFilterForBulkPropertyDelete, _callback);
        }

        private IssueFilterForBulkPropertyDelete buildBodyParams() {
            IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete = new IssueFilterForBulkPropertyDelete();
            issueFilterForBulkPropertyDelete.currentValue(this.currentValue);
            issueFilterForBulkPropertyDelete.entityIds(this.entityIds);
            return issueFilterForBulkPropertyDelete;
        }

        /**
         * Execute bulkDeleteIssuePropertyByFilter request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete = buildBodyParams();
            bulkDeleteIssuePropertyByFilterWithHttpInfo(propertyKey, issueFilterForBulkPropertyDelete);
        }

        /**
         * Execute bulkDeleteIssuePropertyByFilter request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete = buildBodyParams();
            return bulkDeleteIssuePropertyByFilterWithHttpInfo(propertyKey, issueFilterForBulkPropertyDelete);
        }

        /**
         * Execute bulkDeleteIssuePropertyByFilter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete = buildBodyParams();
            return bulkDeleteIssuePropertyByFilterAsync(propertyKey, issueFilterForBulkPropertyDelete, _callback);
        }
    }

    /**
     * Bulk delete issue property
     * Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.  The criteria the filter used to identify eligible issues are:   *  &#x60;entityIds&#x60; Only issues from this list are eligible.  *  &#x60;currentValue&#x60; Only issues with the property set to this value are eligible.  If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.  If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.  *  [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @param propertyKey The key of the property. (required)
     * @param issueFilterForBulkPropertyDelete  (required)
     * @return BulkDeleteIssuePropertyByFilterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public BulkDeleteIssuePropertyByFilterRequestBuilder bulkDeleteIssuePropertyByFilter(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new BulkDeleteIssuePropertyByFilterRequestBuilder(propertyKey);
    }
    private okhttp3.Call bulkSetIssuePropertyByListCall(String propertyKey, BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkIssuePropertyUpdateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSetIssuePropertyByListValidateBeforeCall(String propertyKey, BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling bulkSetIssuePropertyByList(Async)");
        }

        // verify the required parameter 'bulkIssuePropertyUpdateRequest' is set
        if (bulkIssuePropertyUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkIssuePropertyUpdateRequest' when calling bulkSetIssuePropertyByList(Async)");
        }

        return bulkSetIssuePropertyByListCall(propertyKey, bulkIssuePropertyUpdateRequest, _callback);

    }


    private ApiResponse<Void> bulkSetIssuePropertyByListWithHttpInfo(String propertyKey, BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkSetIssuePropertyByListValidateBeforeCall(propertyKey, bulkIssuePropertyUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkSetIssuePropertyByListAsync(String propertyKey, BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSetIssuePropertyByListValidateBeforeCall(propertyKey, bulkIssuePropertyUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkSetIssuePropertyByListRequestBuilder {
        private final String propertyKey;
        private String expression;
        private IssueFilterForBulkPropertySet filter;
        private Object value;

        private BulkSetIssuePropertyByListRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set expression
         * @param expression EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are &#x60;issue&#x60; and &#x60;user&#x60;. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored. (optional)
         * @return BulkSetIssuePropertyByListRequestBuilder
         */
        public BulkSetIssuePropertyByListRequestBuilder expression(String expression) {
            this.expression = expression;
            return this;
        }
        
        /**
         * Set filter
         * @param filter The bulk operation filter. (optional)
         * @return BulkSetIssuePropertyByListRequestBuilder
         */
        public BulkSetIssuePropertyByListRequestBuilder filter(IssueFilterForBulkPropertySet filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set value
         * @param value The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters. (optional)
         * @return BulkSetIssuePropertyByListRequestBuilder
         */
        public BulkSetIssuePropertyByListRequestBuilder value(Object value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for bulkSetIssuePropertyByList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest = buildBodyParams();
            return bulkSetIssuePropertyByListCall(propertyKey, bulkIssuePropertyUpdateRequest, _callback);
        }

        private BulkIssuePropertyUpdateRequest buildBodyParams() {
            BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest = new BulkIssuePropertyUpdateRequest();
            bulkIssuePropertyUpdateRequest.expression(this.expression);
            bulkIssuePropertyUpdateRequest.filter(this.filter);
            bulkIssuePropertyUpdateRequest.value(this.value);
            return bulkIssuePropertyUpdateRequest;
        }

        /**
         * Execute bulkSetIssuePropertyByList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest = buildBodyParams();
            bulkSetIssuePropertyByListWithHttpInfo(propertyKey, bulkIssuePropertyUpdateRequest);
        }

        /**
         * Execute bulkSetIssuePropertyByList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest = buildBodyParams();
            return bulkSetIssuePropertyByListWithHttpInfo(propertyKey, bulkIssuePropertyUpdateRequest);
        }

        /**
         * Execute bulkSetIssuePropertyByList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest = buildBodyParams();
            return bulkSetIssuePropertyByListAsync(propertyKey, bulkIssuePropertyUpdateRequest, _callback);
        }
    }

    /**
     * Bulk set issue property
     * Sets a property value on multiple issues.  The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.  The issues to be updated can be specified by a filter.  The filter identifies issues eligible for update using these criteria:   *  &#x60;entityIds&#x60; Only issues from this list are eligible.  *  &#x60;currentValue&#x60; Only issues with the property set to this value are eligible.  *  &#x60;hasProperty&#x60;:           *  If *true*, only issues with the property are eligible.      *  If *false*, only issues without the property are eligible.  If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.  If an invalid combination of criteria is provided, an error is returned. For example, specifying a &#x60;currentValue&#x60; and &#x60;hasProperty&#x60; as *false* would not match any issues (because without the property the property cannot have a value).  The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either all eligible issues are updated or, when errors occur, none are updated.  *  [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @param propertyKey The key of the property. The maximum length is 255 characters. (required)
     * @param bulkIssuePropertyUpdateRequest  (required)
     * @return BulkSetIssuePropertyByListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public BulkSetIssuePropertyByListRequestBuilder bulkSetIssuePropertyByList(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new BulkSetIssuePropertyByListRequestBuilder(propertyKey);
    }
    private okhttp3.Call bulkSetPropertiesByIssueCall(MultiIssueEntityProperties multiIssueEntityProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiIssueEntityProperties;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/properties/multi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSetPropertiesByIssueValidateBeforeCall(MultiIssueEntityProperties multiIssueEntityProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'multiIssueEntityProperties' is set
        if (multiIssueEntityProperties == null) {
            throw new ApiException("Missing the required parameter 'multiIssueEntityProperties' when calling bulkSetPropertiesByIssue(Async)");
        }

        return bulkSetPropertiesByIssueCall(multiIssueEntityProperties, _callback);

    }


    private ApiResponse<Void> bulkSetPropertiesByIssueWithHttpInfo(MultiIssueEntityProperties multiIssueEntityProperties) throws ApiException {
        okhttp3.Call localVarCall = bulkSetPropertiesByIssueValidateBeforeCall(multiIssueEntityProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkSetPropertiesByIssueAsync(MultiIssueEntityProperties multiIssueEntityProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSetPropertiesByIssueValidateBeforeCall(multiIssueEntityProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkSetPropertiesByIssueRequestBuilder {
        private List<IssueEntityPropertiesForMultiUpdate> issues;

        private BulkSetPropertiesByIssueRequestBuilder() {
        }

        /**
         * Set issues
         * @param issues A list of issue IDs and their respective properties. (optional)
         * @return BulkSetPropertiesByIssueRequestBuilder
         */
        public BulkSetPropertiesByIssueRequestBuilder issues(List<IssueEntityPropertiesForMultiUpdate> issues) {
            this.issues = issues;
            return this;
        }
        
        /**
         * Build call for bulkSetPropertiesByIssue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MultiIssueEntityProperties multiIssueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByIssueCall(multiIssueEntityProperties, _callback);
        }

        private MultiIssueEntityProperties buildBodyParams() {
            MultiIssueEntityProperties multiIssueEntityProperties = new MultiIssueEntityProperties();
            multiIssueEntityProperties.issues(this.issues);
            return multiIssueEntityProperties;
        }

        /**
         * Execute bulkSetPropertiesByIssue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MultiIssueEntityProperties multiIssueEntityProperties = buildBodyParams();
            bulkSetPropertiesByIssueWithHttpInfo(multiIssueEntityProperties);
        }

        /**
         * Execute bulkSetPropertiesByIssue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MultiIssueEntityProperties multiIssueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByIssueWithHttpInfo(multiIssueEntityProperties);
        }

        /**
         * Execute bulkSetPropertiesByIssue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MultiIssueEntityProperties multiIssueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByIssueAsync(multiIssueEntityProperties, _callback);
        }
    }

    /**
     * Bulk set issue properties by issue
     * Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.  This operation is:   *  [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  *  non-transactional. Updating some entities may fail. Such information will available in the task result.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param multiIssueEntityProperties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     * @return BulkSetPropertiesByIssueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
     </table>
     */
    public BulkSetPropertiesByIssueRequestBuilder bulkSetPropertiesByIssue() throws IllegalArgumentException {
        return new BulkSetPropertiesByIssueRequestBuilder();
    }
    private okhttp3.Call bulkSetPropertiesByListCall(IssueEntityProperties issueEntityProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueEntityProperties;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSetPropertiesByListValidateBeforeCall(IssueEntityProperties issueEntityProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueEntityProperties' is set
        if (issueEntityProperties == null) {
            throw new ApiException("Missing the required parameter 'issueEntityProperties' when calling bulkSetPropertiesByList(Async)");
        }

        return bulkSetPropertiesByListCall(issueEntityProperties, _callback);

    }


    private ApiResponse<Void> bulkSetPropertiesByListWithHttpInfo(IssueEntityProperties issueEntityProperties) throws ApiException {
        okhttp3.Call localVarCall = bulkSetPropertiesByListValidateBeforeCall(issueEntityProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkSetPropertiesByListAsync(IssueEntityProperties issueEntityProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSetPropertiesByListValidateBeforeCall(issueEntityProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkSetPropertiesByListRequestBuilder {
        private Set<Long> entitiesIds;
        private Map<String, JsonNode> properties;

        private BulkSetPropertiesByListRequestBuilder() {
        }

        /**
         * Set entitiesIds
         * @param entitiesIds A list of entity property IDs. (optional)
         * @return BulkSetPropertiesByListRequestBuilder
         */
        public BulkSetPropertiesByListRequestBuilder entitiesIds(Set<Long> entitiesIds) {
            this.entitiesIds = entitiesIds;
            return this;
        }
        
        /**
         * Set properties
         * @param properties A list of entity property keys and values. (optional)
         * @return BulkSetPropertiesByListRequestBuilder
         */
        public BulkSetPropertiesByListRequestBuilder properties(Map<String, JsonNode> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for bulkSetPropertiesByList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueEntityProperties issueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByListCall(issueEntityProperties, _callback);
        }

        private IssueEntityProperties buildBodyParams() {
            IssueEntityProperties issueEntityProperties = new IssueEntityProperties();
            issueEntityProperties.entitiesIds(this.entitiesIds);
            issueEntityProperties.properties(this.properties);
            return issueEntityProperties;
        }

        /**
         * Execute bulkSetPropertiesByList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            IssueEntityProperties issueEntityProperties = buildBodyParams();
            bulkSetPropertiesByListWithHttpInfo(issueEntityProperties);
        }

        /**
         * Execute bulkSetPropertiesByList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            IssueEntityProperties issueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByListWithHttpInfo(issueEntityProperties);
        }

        /**
         * Execute bulkSetPropertiesByList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            IssueEntityProperties issueEntityProperties = buildBodyParams();
            return bulkSetPropertiesByListAsync(issueEntityProperties, _callback);
        }
    }

    /**
     * Bulk set issues properties by list
     * Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.  This operation is:   *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.  *  [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueEntityProperties Issue properties to be set or updated with values. (required)
     * @return BulkSetPropertiesByListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Returned if the operation is successful. </td><td>  -  </td></tr>
     </table>
     */
    public BulkSetPropertiesByListRequestBuilder bulkSetPropertiesByList() throws IllegalArgumentException {
        return new BulkSetPropertiesByListRequestBuilder();
    }
    private okhttp3.Call deletePropertyCall(String issueIdOrKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(String issueIdOrKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling deleteProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteProperty(Async)");
        }

        return deletePropertyCall(issueIdOrKey, propertyKey, _callback);

    }


    private ApiResponse<Void> deletePropertyWithHttpInfo(String issueIdOrKey, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(issueIdOrKey, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePropertyAsync(String issueIdOrKey, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(issueIdOrKey, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePropertyRequestBuilder {
        private final String issueIdOrKey;
        private final String propertyKey;

        private DeletePropertyRequestBuilder(String issueIdOrKey, String propertyKey) {
            this.issueIdOrKey = issueIdOrKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for deleteProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found, or the user does not have permission to edit the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyCall(issueIdOrKey, propertyKey, _callback);
        }


        /**
         * Execute deleteProperty request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found, or the user does not have permission to edit the issue. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePropertyWithHttpInfo(issueIdOrKey, propertyKey);
        }

        /**
         * Execute deleteProperty request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found, or the user does not have permission to edit the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePropertyWithHttpInfo(issueIdOrKey, propertyKey);
        }

        /**
         * Execute deleteProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found, or the user does not have permission to edit the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePropertyAsync(issueIdOrKey, propertyKey, _callback);
        }
    }

    /**
     * Delete issue property
     * Deletes an issue&#39;s property.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @param propertyKey The key of the property. (required)
     * @return DeletePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or property is not found, or the user does not have permission to edit the issue. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePropertyRequestBuilder deleteProperty(String issueIdOrKey, String propertyKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeletePropertyRequestBuilder(issueIdOrKey, propertyKey);
    }
    private okhttp3.Call getByKeyAndValueCall(String issueIdOrKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByKeyAndValueValidateBeforeCall(String issueIdOrKey, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getByKeyAndValue(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getByKeyAndValue(Async)");
        }

        return getByKeyAndValueCall(issueIdOrKey, propertyKey, _callback);

    }


    private ApiResponse<EntityProperty> getByKeyAndValueWithHttpInfo(String issueIdOrKey, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getByKeyAndValueValidateBeforeCall(issueIdOrKey, propertyKey, null);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByKeyAndValueAsync(String issueIdOrKey, String propertyKey, final ApiCallback<EntityProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByKeyAndValueValidateBeforeCall(issueIdOrKey, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByKeyAndValueRequestBuilder {
        private final String issueIdOrKey;
        private final String propertyKey;

        private GetByKeyAndValueRequestBuilder(String issueIdOrKey, String propertyKey) {
            this.issueIdOrKey = issueIdOrKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for getByKeyAndValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found or the user does not have permission to see the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByKeyAndValueCall(issueIdOrKey, propertyKey, _callback);
        }


        /**
         * Execute getByKeyAndValue request
         * @return EntityProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found or the user does not have permission to see the issue. </td><td>  -  </td></tr>
         </table>
         */
        public EntityProperty execute() throws ApiException {
            ApiResponse<EntityProperty> localVarResp = getByKeyAndValueWithHttpInfo(issueIdOrKey, propertyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByKeyAndValue request with HTTP info returned
         * @return ApiResponse&lt;EntityProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found or the user does not have permission to see the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityProperty> executeWithHttpInfo() throws ApiException {
            return getByKeyAndValueWithHttpInfo(issueIdOrKey, propertyKey);
        }

        /**
         * Execute getByKeyAndValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or property is not found or the user does not have permission to see the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityProperty> _callback) throws ApiException {
            return getByKeyAndValueAsync(issueIdOrKey, propertyKey, _callback);
        }
    }

    /**
     * Get issue property
     * Returns the key and value of an issue&#39;s property.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @param propertyKey The key of the property. (required)
     * @return GetByKeyAndValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or property is not found or the user does not have permission to see the issue. </td><td>  -  </td></tr>
     </table>
     */
    public GetByKeyAndValueRequestBuilder getByKeyAndValue(String issueIdOrKey, String propertyKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new GetByKeyAndValueRequestBuilder(issueIdOrKey, propertyKey);
    }
    private okhttp3.Call getKeysCall(String issueIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/properties"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeysValidateBeforeCall(String issueIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getKeys(Async)");
        }

        return getKeysCall(issueIdOrKey, _callback);

    }


    private ApiResponse<PropertyKeys> getKeysWithHttpInfo(String issueIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getKeysValidateBeforeCall(issueIdOrKey, null);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKeysAsync(String issueIdOrKey, final ApiCallback<PropertyKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeysValidateBeforeCall(issueIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKeysRequestBuilder {
        private final String issueIdOrKey;

        private GetKeysRequestBuilder(String issueIdOrKey) {
            this.issueIdOrKey = issueIdOrKey;
        }

        /**
         * Build call for getKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permissions to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKeysCall(issueIdOrKey, _callback);
        }


        /**
         * Execute getKeys request
         * @return PropertyKeys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permissions to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public PropertyKeys execute() throws ApiException {
            ApiResponse<PropertyKeys> localVarResp = getKeysWithHttpInfo(issueIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKeys request with HTTP info returned
         * @return ApiResponse&lt;PropertyKeys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permissions to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyKeys> executeWithHttpInfo() throws ApiException {
            return getKeysWithHttpInfo(issueIdOrKey);
        }

        /**
         * Execute getKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permissions to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyKeys> _callback) throws ApiException {
            return getKeysAsync(issueIdOrKey, _callback);
        }
    }

    /**
     * Get issue property keys
     * Returns the URLs and keys of an issue&#39;s properties.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Property details are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @return GetKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permissions to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public GetKeysRequestBuilder getKeys(String issueIdOrKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        return new GetKeysRequestBuilder(issueIdOrKey);
    }
    private okhttp3.Call setIssuePropertyCall(String issueIdOrKey, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIssuePropertyValidateBeforeCall(String issueIdOrKey, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling setIssueProperty(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setIssueProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setIssueProperty(Async)");
        }

        return setIssuePropertyCall(issueIdOrKey, propertyKey, body, _callback);

    }


    private ApiResponse<Object> setIssuePropertyWithHttpInfo(String issueIdOrKey, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setIssuePropertyValidateBeforeCall(issueIdOrKey, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIssuePropertyAsync(String issueIdOrKey, String propertyKey, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIssuePropertyValidateBeforeCall(issueIdOrKey, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIssuePropertyRequestBuilder {
        private final String issueIdOrKey;
        private final String propertyKey;
        private Object body;

        private SetIssuePropertyRequestBuilder(String issueIdOrKey, String propertyKey) {
            this.issueIdOrKey = issueIdOrKey;
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (optional)
         * @return SetIssuePropertyRequestBuilder
         */
        public SetIssuePropertyRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for setIssueProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to edit the issue. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setIssuePropertyCall(issueIdOrKey, propertyKey, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setIssueProperty request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to edit the issue. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = setIssuePropertyWithHttpInfo(issueIdOrKey, propertyKey, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIssueProperty request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to edit the issue. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setIssuePropertyWithHttpInfo(issueIdOrKey, propertyKey, body);
        }

        /**
         * Execute setIssueProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to edit the issue. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setIssuePropertyAsync(issueIdOrKey, propertyKey, body, _callback);
        }
    }

    /**
     * Set issue property
     * Sets the value of an issue&#39;s property. Use this resource to store custom data against an issue.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param propertyKey The key of the issue property. The maximum length is 255 characters. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return SetIssuePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the issue property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the issue property is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to edit the issue. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public SetIssuePropertyRequestBuilder setIssueProperty(String issueIdOrKey, String propertyKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetIssuePropertyRequestBuilder(issueIdOrKey, propertyKey);
    }
}
