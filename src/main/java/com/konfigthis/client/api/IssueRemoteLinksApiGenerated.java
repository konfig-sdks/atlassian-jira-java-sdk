/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.RemoteIssueLink;
import com.konfigthis.client.model.RemoteIssueLinkIdentifies;
import com.konfigthis.client.model.RemoteIssueLinkRequest;
import com.konfigthis.client.model.RemoteObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueRemoteLinksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueRemoteLinksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueRemoteLinksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrUpdateRemoteIssueLinkCall(String issueIdOrKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateRemoteIssueLinkValidateBeforeCall(String issueIdOrKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling createOrUpdateRemoteIssueLink(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createOrUpdateRemoteIssueLink(Async)");
        }

        return createOrUpdateRemoteIssueLinkCall(issueIdOrKey, requestBody, _callback);

    }


    private ApiResponse<RemoteIssueLinkIdentifies> createOrUpdateRemoteIssueLinkWithHttpInfo(String issueIdOrKey, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateRemoteIssueLinkValidateBeforeCall(issueIdOrKey, requestBody, null);
        Type localVarReturnType = new TypeToken<RemoteIssueLinkIdentifies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateRemoteIssueLinkAsync(String issueIdOrKey, Map<String, Object> requestBody, final ApiCallback<RemoteIssueLinkIdentifies> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateRemoteIssueLinkValidateBeforeCall(issueIdOrKey, requestBody, _callback);
        Type localVarReturnType = new TypeToken<RemoteIssueLinkIdentifies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateRemoteIssueLinkRequestBuilder {
        private final RemoteObject _object;
        private final String issueIdOrKey;
        private Application application;
        private String globalId;
        private String relationship;

        private CreateOrUpdateRemoteIssueLinkRequestBuilder(RemoteObject _object, String issueIdOrKey) {
            this._object = _object;
            this.issueIdOrKey = issueIdOrKey;
        }

        /**
         * Set application
         * @param application  (optional)
         * @return CreateOrUpdateRemoteIssueLinkRequestBuilder
         */
        public CreateOrUpdateRemoteIssueLinkRequestBuilder application(Application application) {
            this.application = application;
            return this;
        }
        
        /**
         * Set globalId
         * @param globalId An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters. (optional)
         * @return CreateOrUpdateRemoteIssueLinkRequestBuilder
         */
        public CreateOrUpdateRemoteIssueLinkRequestBuilder globalId(String globalId) {
            this.globalId = globalId;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship Description of the relationship between the issue and the linked item. If not set, the relationship description \\\&quot;links to\\\&quot; is used in Jira. (optional)
         * @return CreateOrUpdateRemoteIssueLinkRequestBuilder
         */
        public CreateOrUpdateRemoteIssueLinkRequestBuilder relationship(String relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Build call for createOrUpdateRemoteIssueLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the remote issue link is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the remote issue link is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOrUpdateRemoteIssueLinkCall(issueIdOrKey, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("application", this.application);
            requestBody.put("globalId", this.globalId);
            requestBody.put("_object", this._object);
            requestBody.put("relationship", this.relationship);
            return requestBody;
        }

        /**
         * Execute createOrUpdateRemoteIssueLink request
         * @return RemoteIssueLinkIdentifies
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the remote issue link is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the remote issue link is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public RemoteIssueLinkIdentifies execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<RemoteIssueLinkIdentifies> localVarResp = createOrUpdateRemoteIssueLinkWithHttpInfo(issueIdOrKey, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdateRemoteIssueLink request with HTTP info returned
         * @return ApiResponse&lt;RemoteIssueLinkIdentifies&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the remote issue link is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the remote issue link is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoteIssueLinkIdentifies> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOrUpdateRemoteIssueLinkWithHttpInfo(issueIdOrKey, requestBody);
        }

        /**
         * Execute createOrUpdateRemoteIssueLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the remote issue link is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the remote issue link is created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoteIssueLinkIdentifies> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOrUpdateRemoteIssueLinkAsync(issueIdOrKey, requestBody, _callback);
        }
    }

    /**
     * Create or update remote issue link
     * Creates or updates a remote issue link for an issue.  If a &#x60;globalId&#x60; is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param requestBody  (required)
     * @return CreateOrUpdateRemoteIssueLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the remote issue link is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the remote issue link is created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateRemoteIssueLinkRequestBuilder createOrUpdateRemoteIssueLink(RemoteObject _object, String issueIdOrKey) throws IllegalArgumentException {
        if (_object == null) throw new IllegalArgumentException("\"_object\" is required but got null");
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        return new CreateOrUpdateRemoteIssueLinkRequestBuilder(_object, issueIdOrKey);
    }
    private okhttp3.Call deleteByGlobalIdCall(String issueIdOrKey, String globalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("globalId", globalId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByGlobalIdValidateBeforeCall(String issueIdOrKey, String globalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling deleteByGlobalId(Async)");
        }

        // verify the required parameter 'globalId' is set
        if (globalId == null) {
            throw new ApiException("Missing the required parameter 'globalId' when calling deleteByGlobalId(Async)");
        }

        return deleteByGlobalIdCall(issueIdOrKey, globalId, _callback);

    }


    private ApiResponse<Void> deleteByGlobalIdWithHttpInfo(String issueIdOrKey, String globalId) throws ApiException {
        okhttp3.Call localVarCall = deleteByGlobalIdValidateBeforeCall(issueIdOrKey, globalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByGlobalIdAsync(String issueIdOrKey, String globalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByGlobalIdValidateBeforeCall(issueIdOrKey, globalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByGlobalIdRequestBuilder {
        private final String issueIdOrKey;
        private final String globalId;

        private DeleteByGlobalIdRequestBuilder(String issueIdOrKey, String globalId) {
            this.issueIdOrKey = issueIdOrKey;
            this.globalId = globalId;
        }

        /**
         * Build call for deleteByGlobalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a global ID isn&#39;t provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByGlobalIdCall(issueIdOrKey, globalId, _callback);
        }


        /**
         * Execute deleteByGlobalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a global ID isn&#39;t provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByGlobalIdWithHttpInfo(issueIdOrKey, globalId);
        }

        /**
         * Execute deleteByGlobalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a global ID isn&#39;t provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByGlobalIdWithHttpInfo(issueIdOrKey, globalId);
        }

        /**
         * Execute deleteByGlobalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a global ID isn&#39;t provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByGlobalIdAsync(issueIdOrKey, globalId, _callback);
        }
    }

    /**
     * Delete remote issue link by global ID
     * Deletes the remote issue link from the issue using the link&#39;s global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param globalId The global ID of a remote issue link. (required)
     * @return DeleteByGlobalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if a global ID isn&#39;t provided. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByGlobalIdRequestBuilder deleteByGlobalId(String issueIdOrKey, String globalId) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (globalId == null) throw new IllegalArgumentException("\"globalId\" is required but got null");
            

        return new DeleteByGlobalIdRequestBuilder(issueIdOrKey, globalId);
    }
    private okhttp3.Call deleteByIdCall(String issueIdOrKey, String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String issueIdOrKey, String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling deleteById(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling deleteById(Async)");
        }

        return deleteByIdCall(issueIdOrKey, linkId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String issueIdOrKey, String linkId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(issueIdOrKey, linkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String issueIdOrKey, String linkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(issueIdOrKey, linkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String issueIdOrKey;
        private final String linkId;

        private DeleteByIdRequestBuilder(String issueIdOrKey, String linkId) {
            this.issueIdOrKey = issueIdOrKey;
            this.linkId = linkId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(issueIdOrKey, linkId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(issueIdOrKey, linkId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(issueIdOrKey, linkId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(issueIdOrKey, linkId, _callback);
        }
    }

    /**
     * Delete remote issue link by ID
     * Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of a remote issue link. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String issueIdOrKey, String linkId) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(issueIdOrKey, linkId);
    }
    private okhttp3.Call getAllCall(String issueIdOrKey, String globalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("globalId", globalId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String issueIdOrKey, String globalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getAll(Async)");
        }

        return getAllCall(issueIdOrKey, globalId, _callback);

    }


    private ApiResponse<RemoteIssueLink> getAllWithHttpInfo(String issueIdOrKey, String globalId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(issueIdOrKey, globalId, null);
        Type localVarReturnType = new TypeToken<RemoteIssueLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String issueIdOrKey, String globalId, final ApiCallback<RemoteIssueLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(issueIdOrKey, globalId, _callback);
        Type localVarReturnType = new TypeToken<RemoteIssueLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String issueIdOrKey;
        private String globalId;

        private GetAllRequestBuilder(String issueIdOrKey) {
            this.issueIdOrKey = issueIdOrKey;
        }

        /**
         * Set globalId
         * @param globalId The global ID of the remote issue link. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder globalId(String globalId) {
            this.globalId = globalId;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(issueIdOrKey, globalId, _callback);
        }


        /**
         * Execute getAll request
         * @return RemoteIssueLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public RemoteIssueLink execute() throws ApiException {
            ApiResponse<RemoteIssueLink> localVarResp = getAllWithHttpInfo(issueIdOrKey, globalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;RemoteIssueLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoteIssueLink> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(issueIdOrKey, globalId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoteIssueLink> _callback) throws ApiException {
            return getAllAsync(issueIdOrKey, globalId, _callback);
        }
    }

    /**
     * Get remote issue links
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String issueIdOrKey) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        return new GetAllRequestBuilder(issueIdOrKey);
    }
    private okhttp3.Call getByLinkIdCall(String issueIdOrKey, String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLinkIdValidateBeforeCall(String issueIdOrKey, String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling getByLinkId(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getByLinkId(Async)");
        }

        return getByLinkIdCall(issueIdOrKey, linkId, _callback);

    }


    private ApiResponse<RemoteIssueLink> getByLinkIdWithHttpInfo(String issueIdOrKey, String linkId) throws ApiException {
        okhttp3.Call localVarCall = getByLinkIdValidateBeforeCall(issueIdOrKey, linkId, null);
        Type localVarReturnType = new TypeToken<RemoteIssueLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByLinkIdAsync(String issueIdOrKey, String linkId, final ApiCallback<RemoteIssueLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLinkIdValidateBeforeCall(issueIdOrKey, linkId, _callback);
        Type localVarReturnType = new TypeToken<RemoteIssueLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByLinkIdRequestBuilder {
        private final String issueIdOrKey;
        private final String linkId;

        private GetByLinkIdRequestBuilder(String issueIdOrKey, String linkId) {
            this.issueIdOrKey = issueIdOrKey;
            this.linkId = linkId;
        }

        /**
         * Build call for getByLinkId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByLinkIdCall(issueIdOrKey, linkId, _callback);
        }


        /**
         * Execute getByLinkId request
         * @return RemoteIssueLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public RemoteIssueLink execute() throws ApiException {
            ApiResponse<RemoteIssueLink> localVarResp = getByLinkIdWithHttpInfo(issueIdOrKey, linkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByLinkId request with HTTP info returned
         * @return ApiResponse&lt;RemoteIssueLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoteIssueLink> executeWithHttpInfo() throws ApiException {
            return getByLinkIdWithHttpInfo(issueIdOrKey, linkId);
        }

        /**
         * Execute getByLinkId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoteIssueLink> _callback) throws ApiException {
            return getByLinkIdAsync(issueIdOrKey, linkId, _callback);
        }
    }

    /**
     * Get remote issue link by ID
     * Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of the remote issue link. (required)
     * @return GetByLinkIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the link ID is invalid or the remote issue link does not belong to the issue. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if issue linking is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public GetByLinkIdRequestBuilder getByLinkId(String issueIdOrKey, String linkId) throws IllegalArgumentException {
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new GetByLinkIdRequestBuilder(issueIdOrKey, linkId);
    }
    private okhttp3.Call updateByIdCall(String issueIdOrKey, String linkId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}"
            .replace("{" + "issueIdOrKey" + "}", localVarApiClient.escapeString(issueIdOrKey.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String issueIdOrKey, String linkId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueIdOrKey' is set
        if (issueIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'issueIdOrKey' when calling updateById(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling updateById(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateById(Async)");
        }

        return updateByIdCall(issueIdOrKey, linkId, requestBody, _callback);

    }


    private ApiResponse<Object> updateByIdWithHttpInfo(String issueIdOrKey, String linkId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(issueIdOrKey, linkId, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String issueIdOrKey, String linkId, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(issueIdOrKey, linkId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final RemoteObject _object;
        private final String issueIdOrKey;
        private final String linkId;
        private Application application;
        private String globalId;
        private String relationship;

        private UpdateByIdRequestBuilder(RemoteObject _object, String issueIdOrKey, String linkId) {
            this._object = _object;
            this.issueIdOrKey = issueIdOrKey;
            this.linkId = linkId;
        }

        /**
         * Set application
         * @param application  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder application(Application application) {
            this.application = application;
            return this;
        }
        
        /**
         * Set globalId
         * @param globalId An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder globalId(String globalId) {
            this.globalId = globalId;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship Description of the relationship between the issue and the linked item. If not set, the relationship description \\\&quot;links to\\\&quot; is used in Jira. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder relationship(String relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdCall(issueIdOrKey, linkId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("application", this.application);
            requestBody.put("globalId", this.globalId);
            requestBody.put("_object", this._object);
            requestBody.put("relationship", this.relationship);
            return requestBody;
        }

        /**
         * Execute updateById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateByIdWithHttpInfo(issueIdOrKey, linkId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdWithHttpInfo(issueIdOrKey, linkId, requestBody);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdAsync(issueIdOrKey, linkId, requestBody, _callback);
        }
    }

    /**
     * Update remote issue link by ID
     * Updates a remote issue link for an issue.  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of the remote issue link. (required)
     * @param requestBody  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to link issues. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(RemoteObject _object, String issueIdOrKey, String linkId) throws IllegalArgumentException {
        if (_object == null) throw new IllegalArgumentException("\"_object\" is required but got null");
        if (issueIdOrKey == null) throw new IllegalArgumentException("\"issueIdOrKey\" is required but got null");
            

        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(_object, issueIdOrKey, linkId);
    }
}
