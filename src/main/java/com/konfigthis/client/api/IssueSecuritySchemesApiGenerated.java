/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddSecuritySchemeLevelsRequestBean;
import com.konfigthis.client.model.AssociateSecuritySchemeWithProjectDetails;
import com.konfigthis.client.model.CreateIssueSecuritySchemeDetails;
import com.konfigthis.client.model.DefaultLevelValue;
import com.konfigthis.client.model.OldToNewSecurityLevelMappingsBean;
import com.konfigthis.client.model.PageBeanIssueSecuritySchemeToProjectMapping;
import com.konfigthis.client.model.PageBeanSecurityLevel;
import com.konfigthis.client.model.PageBeanSecurityLevelMember;
import com.konfigthis.client.model.PageBeanSecuritySchemeWithProjects;
import com.konfigthis.client.model.SecurityScheme;
import com.konfigthis.client.model.SecuritySchemeId;
import com.konfigthis.client.model.SecuritySchemeLevelBean;
import com.konfigthis.client.model.SecuritySchemeLevelMemberBean;
import com.konfigthis.client.model.SecuritySchemeMembersRequest;
import com.konfigthis.client.model.SecuritySchemes;
import java.util.Set;
import com.konfigthis.client.model.SetDefaultLevelsRequest;
import com.konfigthis.client.model.UpdateIssueSecurityLevelDetails;
import com.konfigthis.client.model.UpdateIssueSecuritySchemeRequestBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueSecuritySchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueSecuritySchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueSecuritySchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMembersToLevelCall(String schemeId, String levelId, SecuritySchemeMembersRequest securitySchemeMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securitySchemeMembersRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "levelId" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersToLevelValidateBeforeCall(String schemeId, String levelId, SecuritySchemeMembersRequest securitySchemeMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling addMembersToLevel(Async)");
        }

        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling addMembersToLevel(Async)");
        }

        // verify the required parameter 'securitySchemeMembersRequest' is set
        if (securitySchemeMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'securitySchemeMembersRequest' when calling addMembersToLevel(Async)");
        }

        return addMembersToLevelCall(schemeId, levelId, securitySchemeMembersRequest, _callback);

    }


    private ApiResponse<Object> addMembersToLevelWithHttpInfo(String schemeId, String levelId, SecuritySchemeMembersRequest securitySchemeMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = addMembersToLevelValidateBeforeCall(schemeId, levelId, securitySchemeMembersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMembersToLevelAsync(String schemeId, String levelId, SecuritySchemeMembersRequest securitySchemeMembersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersToLevelValidateBeforeCall(schemeId, levelId, securitySchemeMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMembersToLevelRequestBuilder {
        private final String schemeId;
        private final String levelId;
        private List<SecuritySchemeLevelMemberBean> members;

        private AddMembersToLevelRequestBuilder(String schemeId, String levelId) {
            this.schemeId = schemeId;
            this.levelId = levelId;
        }

        /**
         * Set members
         * @param members The list of level members which should be added to the issue security scheme level. (optional)
         * @return AddMembersToLevelRequestBuilder
         */
        public AddMembersToLevelRequestBuilder members(List<SecuritySchemeLevelMemberBean> members) {
            this.members = members;
            return this;
        }
        
        /**
         * Build call for addMembersToLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SecuritySchemeMembersRequest securitySchemeMembersRequest = buildBodyParams();
            return addMembersToLevelCall(schemeId, levelId, securitySchemeMembersRequest, _callback);
        }

        private SecuritySchemeMembersRequest buildBodyParams() {
            SecuritySchemeMembersRequest securitySchemeMembersRequest = new SecuritySchemeMembersRequest();
            securitySchemeMembersRequest.members(this.members);
            return securitySchemeMembersRequest;
        }

        /**
         * Execute addMembersToLevel request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SecuritySchemeMembersRequest securitySchemeMembersRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = addMembersToLevelWithHttpInfo(schemeId, levelId, securitySchemeMembersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMembersToLevel request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SecuritySchemeMembersRequest securitySchemeMembersRequest = buildBodyParams();
            return addMembersToLevelWithHttpInfo(schemeId, levelId, securitySchemeMembersRequest);
        }

        /**
         * Execute addMembersToLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SecuritySchemeMembersRequest securitySchemeMembersRequest = buildBodyParams();
            return addMembersToLevelAsync(schemeId, levelId, securitySchemeMembersRequest, _callback);
        }
    }

    /**
     * Add issue security level members
     * Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level. (required)
     * @param securitySchemeMembersRequest  (required)
     * @return AddMembersToLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersToLevelRequestBuilder addMembersToLevel(String schemeId, String levelId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        if (levelId == null) throw new IllegalArgumentException("\"levelId\" is required but got null");
            

        return new AddMembersToLevelRequestBuilder(schemeId, levelId);
    }
    private okhttp3.Call addSecurityLevelsCall(String schemeId, AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSecuritySchemeLevelsRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}/level"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSecurityLevelsValidateBeforeCall(String schemeId, AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling addSecurityLevels(Async)");
        }

        // verify the required parameter 'addSecuritySchemeLevelsRequestBean' is set
        if (addSecuritySchemeLevelsRequestBean == null) {
            throw new ApiException("Missing the required parameter 'addSecuritySchemeLevelsRequestBean' when calling addSecurityLevels(Async)");
        }

        return addSecurityLevelsCall(schemeId, addSecuritySchemeLevelsRequestBean, _callback);

    }


    private ApiResponse<Object> addSecurityLevelsWithHttpInfo(String schemeId, AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean) throws ApiException {
        okhttp3.Call localVarCall = addSecurityLevelsValidateBeforeCall(schemeId, addSecuritySchemeLevelsRequestBean, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSecurityLevelsAsync(String schemeId, AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSecurityLevelsValidateBeforeCall(schemeId, addSecuritySchemeLevelsRequestBean, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSecurityLevelsRequestBuilder {
        private final String schemeId;
        private List<SecuritySchemeLevelBean> levels;

        private AddSecurityLevelsRequestBuilder(String schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Set levels
         * @param levels The list of scheme levels which should be added to the security scheme. (optional)
         * @return AddSecurityLevelsRequestBuilder
         */
        public AddSecurityLevelsRequestBuilder levels(List<SecuritySchemeLevelBean> levels) {
            this.levels = levels;
            return this;
        }
        
        /**
         * Build call for addSecurityLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean = buildBodyParams();
            return addSecurityLevelsCall(schemeId, addSecuritySchemeLevelsRequestBean, _callback);
        }

        private AddSecuritySchemeLevelsRequestBean buildBodyParams() {
            AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean = new AddSecuritySchemeLevelsRequestBean();
            addSecuritySchemeLevelsRequestBean.levels(this.levels);
            return addSecuritySchemeLevelsRequestBean;
        }

        /**
         * Execute addSecurityLevels request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean = buildBodyParams();
            ApiResponse<Object> localVarResp = addSecurityLevelsWithHttpInfo(schemeId, addSecuritySchemeLevelsRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSecurityLevels request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean = buildBodyParams();
            return addSecurityLevelsWithHttpInfo(schemeId, addSecuritySchemeLevelsRequestBean);
        }

        /**
         * Execute addSecurityLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean = buildBodyParams();
            return addSecurityLevelsAsync(schemeId, addSecuritySchemeLevelsRequestBean, _callback);
        }
    }

    /**
     * Add issue security levels
     * Adds levels and levels&#39; members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme. (required)
     * @param addSecuritySchemeLevelsRequestBean  (required)
     * @return AddSecurityLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public AddSecurityLevelsRequestBuilder addSecurityLevels(String schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        return new AddSecurityLevelsRequestBuilder(schemeId);
    }
    private okhttp3.Call associateSchemeToProjectCall(AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateSecuritySchemeWithProjectDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateSchemeToProjectValidateBeforeCall(AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'associateSecuritySchemeWithProjectDetails' is set
        if (associateSecuritySchemeWithProjectDetails == null) {
            throw new ApiException("Missing the required parameter 'associateSecuritySchemeWithProjectDetails' when calling associateSchemeToProject(Async)");
        }

        return associateSchemeToProjectCall(associateSecuritySchemeWithProjectDetails, _callback);

    }


    private ApiResponse<Void> associateSchemeToProjectWithHttpInfo(AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails) throws ApiException {
        okhttp3.Call localVarCall = associateSchemeToProjectValidateBeforeCall(associateSecuritySchemeWithProjectDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call associateSchemeToProjectAsync(AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateSchemeToProjectValidateBeforeCall(associateSecuritySchemeWithProjectDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AssociateSchemeToProjectRequestBuilder {
        private final String projectId;
        private final String schemeId;
        private List<OldToNewSecurityLevelMappingsBean> oldToNewSecurityLevelMappings;

        private AssociateSchemeToProjectRequestBuilder(String projectId, String schemeId) {
            this.projectId = projectId;
            this.schemeId = schemeId;
        }

        /**
         * Set oldToNewSecurityLevelMappings
         * @param oldToNewSecurityLevelMappings The list of scheme levels which should be remapped to new levels of the issue security scheme. (optional)
         * @return AssociateSchemeToProjectRequestBuilder
         */
        public AssociateSchemeToProjectRequestBuilder oldToNewSecurityLevelMappings(List<OldToNewSecurityLevelMappingsBean> oldToNewSecurityLevelMappings) {
            this.oldToNewSecurityLevelMappings = oldToNewSecurityLevelMappings;
            return this;
        }
        
        /**
         * Build call for associateSchemeToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails = buildBodyParams();
            return associateSchemeToProjectCall(associateSecuritySchemeWithProjectDetails, _callback);
        }

        private AssociateSecuritySchemeWithProjectDetails buildBodyParams() {
            AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails = new AssociateSecuritySchemeWithProjectDetails();
            associateSecuritySchemeWithProjectDetails.oldToNewSecurityLevelMappings(this.oldToNewSecurityLevelMappings);
            associateSecuritySchemeWithProjectDetails.projectId(this.projectId);
            associateSecuritySchemeWithProjectDetails.schemeId(this.schemeId);
            return associateSecuritySchemeWithProjectDetails;
        }

        /**
         * Execute associateSchemeToProject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails = buildBodyParams();
            associateSchemeToProjectWithHttpInfo(associateSecuritySchemeWithProjectDetails);
        }

        /**
         * Execute associateSchemeToProject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails = buildBodyParams();
            return associateSchemeToProjectWithHttpInfo(associateSecuritySchemeWithProjectDetails);
        }

        /**
         * Execute associateSchemeToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AssociateSecuritySchemeWithProjectDetails associateSecuritySchemeWithProjectDetails = buildBodyParams();
            return associateSchemeToProjectAsync(associateSecuritySchemeWithProjectDetails, _callback);
        }
    }

    /**
     * Associate security scheme to project
     * Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param associateSecuritySchemeWithProjectDetails  (required)
     * @return AssociateSchemeToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AssociateSchemeToProjectRequestBuilder associateSchemeToProject(String projectId, String schemeId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        return new AssociateSchemeToProjectRequestBuilder(projectId, schemeId);
    }
    private okhttp3.Call createSecuritySchemeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecuritySchemeValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createSecurityScheme(Async)");
        }

        return createSecuritySchemeCall(requestBody, _callback);

    }


    private ApiResponse<SecuritySchemeId> createSecuritySchemeWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createSecuritySchemeValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<SecuritySchemeId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSecuritySchemeAsync(Map<String, Object> requestBody, final ApiCallback<SecuritySchemeId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecuritySchemeValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<SecuritySchemeId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSecuritySchemeRequestBuilder {
        private final String name;
        private String description;
        private List<SecuritySchemeLevelBean> levels;

        private CreateSecuritySchemeRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the issue security scheme. (optional)
         * @return CreateSecuritySchemeRequestBuilder
         */
        public CreateSecuritySchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set levels
         * @param levels The list of scheme levels which should be added to the security scheme. (optional)
         * @return CreateSecuritySchemeRequestBuilder
         */
        public CreateSecuritySchemeRequestBuilder levels(List<SecuritySchemeLevelBean> levels) {
            this.levels = levels;
            return this;
        }
        
        /**
         * Build call for createSecurityScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSecuritySchemeCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("levels", this.levels);
            requestBody.put("name", this.name);
            return requestBody;
        }

        /**
         * Execute createSecurityScheme request
         * @return SecuritySchemeId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public SecuritySchemeId execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<SecuritySchemeId> localVarResp = createSecuritySchemeWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSecurityScheme request with HTTP info returned
         * @return ApiResponse&lt;SecuritySchemeId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecuritySchemeId> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSecuritySchemeWithHttpInfo(requestBody);
        }

        /**
         * Execute createSecurityScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecuritySchemeId> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSecuritySchemeAsync(requestBody, _callback);
        }
    }

    /**
     * Create issue security scheme
     * Creates a security scheme with security scheme levels and levels&#39; members. You can create up to 100 security scheme levels and security scheme levels&#39; members per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param requestBody  (required)
     * @return CreateSecuritySchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSecuritySchemeRequestBuilder createSecurityScheme(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateSecuritySchemeRequestBuilder(name);
    }
    private okhttp3.Call deleteSecuritySchemeCall(String schemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSecuritySchemeValidateBeforeCall(String schemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling deleteSecurityScheme(Async)");
        }

        return deleteSecuritySchemeCall(schemeId, _callback);

    }


    private ApiResponse<Object> deleteSecuritySchemeWithHttpInfo(String schemeId) throws ApiException {
        okhttp3.Call localVarCall = deleteSecuritySchemeValidateBeforeCall(schemeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSecuritySchemeAsync(String schemeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSecuritySchemeValidateBeforeCall(schemeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSecuritySchemeRequestBuilder {
        private final String schemeId;

        private DeleteSecuritySchemeRequestBuilder(String schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Build call for deleteSecurityScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSecuritySchemeCall(schemeId, _callback);
        }


        /**
         * Execute deleteSecurityScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSecuritySchemeWithHttpInfo(schemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSecurityScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSecuritySchemeWithHttpInfo(schemeId);
        }

        /**
         * Execute deleteSecurityScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSecuritySchemeAsync(schemeId, _callback);
        }
    }

    /**
     * Delete issue security scheme
     * Deletes an issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme. (required)
     * @return DeleteSecuritySchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSecuritySchemeRequestBuilder deleteSecurityScheme(String schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        return new DeleteSecuritySchemeRequestBuilder(schemeId);
    }
    private okhttp3.Call getLevelMembersCall(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Set<String> levelId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/level/member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (schemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "schemeId", schemeId));
        }

        if (levelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "levelId", levelId));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLevelMembersValidateBeforeCall(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Set<String> levelId, String expand, final ApiCallback _callback) throws ApiException {
        return getLevelMembersCall(startAt, maxResults, id, schemeId, levelId, expand, _callback);

    }


    private ApiResponse<PageBeanSecurityLevelMember> getLevelMembersWithHttpInfo(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Set<String> levelId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getLevelMembersValidateBeforeCall(startAt, maxResults, id, schemeId, levelId, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanSecurityLevelMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLevelMembersAsync(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Set<String> levelId, String expand, final ApiCallback<PageBeanSecurityLevelMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLevelMembersValidateBeforeCall(startAt, maxResults, id, schemeId, levelId, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanSecurityLevelMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLevelMembersRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> id;
        private Set<String> schemeId;
        private Set<String> levelId;
        private String expand;

        private GetLevelMembersRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set schemeId
         * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: &#x60;schemeId&#x3D;10000&amp;schemeId&#x3D;10001&#x60;. (optional)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder schemeId(Set<String> schemeId) {
            this.schemeId = schemeId;
            return this;
        }
        
        /**
         * Set levelId
         * @param levelId The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: &#x60;levelId&#x3D;10000&amp;levelId&#x3D;10001&#x60;. (optional)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder levelId(Set<String> levelId) {
            this.levelId = levelId;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about the custom field granted the permission  *  &#x60;group&#x60; Returns information about the group that is granted the permission  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission  *  &#x60;user&#x60; Returns information about the user who is granted the permission (optional)
         * @return GetLevelMembersRequestBuilder
         */
        public GetLevelMembersRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getLevelMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLevelMembersCall(startAt, maxResults, id, schemeId, levelId, expand, _callback);
        }


        /**
         * Execute getLevelMembers request
         * @return PageBeanSecurityLevelMember
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanSecurityLevelMember execute() throws ApiException {
            ApiResponse<PageBeanSecurityLevelMember> localVarResp = getLevelMembersWithHttpInfo(startAt, maxResults, id, schemeId, levelId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLevelMembers request with HTTP info returned
         * @return ApiResponse&lt;PageBeanSecurityLevelMember&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanSecurityLevelMember> executeWithHttpInfo() throws ApiException {
            return getLevelMembersWithHttpInfo(startAt, maxResults, id, schemeId, levelId, expand);
        }

        /**
         * Execute getLevelMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanSecurityLevelMember> _callback) throws ApiException {
            return getLevelMembersAsync(startAt, maxResults, id, schemeId, levelId, expand, _callback);
        }
    }

    /**
     * Get issue security level members
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetLevelMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetLevelMembersRequestBuilder getLevelMembers() throws IllegalArgumentException {
        return new GetLevelMembersRequestBuilder();
    }
    private okhttp3.Call getProjectSecuritySchemesCall(String startAt, String maxResults, Set<String> issueSecuritySchemeId, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (issueSecuritySchemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issueSecuritySchemeId", issueSecuritySchemeId));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSecuritySchemesValidateBeforeCall(String startAt, String maxResults, Set<String> issueSecuritySchemeId, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        return getProjectSecuritySchemesCall(startAt, maxResults, issueSecuritySchemeId, projectId, _callback);

    }


    private ApiResponse<PageBeanIssueSecuritySchemeToProjectMapping> getProjectSecuritySchemesWithHttpInfo(String startAt, String maxResults, Set<String> issueSecuritySchemeId, Set<String> projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectSecuritySchemesValidateBeforeCall(startAt, maxResults, issueSecuritySchemeId, projectId, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueSecuritySchemeToProjectMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectSecuritySchemesAsync(String startAt, String maxResults, Set<String> issueSecuritySchemeId, Set<String> projectId, final ApiCallback<PageBeanIssueSecuritySchemeToProjectMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSecuritySchemesValidateBeforeCall(startAt, maxResults, issueSecuritySchemeId, projectId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueSecuritySchemeToProjectMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectSecuritySchemesRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> issueSecuritySchemeId;
        private Set<String> projectId;

        private GetProjectSecuritySchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetProjectSecuritySchemesRequestBuilder
         */
        public GetProjectSecuritySchemesRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetProjectSecuritySchemesRequestBuilder
         */
        public GetProjectSecuritySchemesRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set issueSecuritySchemeId
         * @param issueSecuritySchemeId The list of security scheme IDs to be filtered out. (optional)
         * @return GetProjectSecuritySchemesRequestBuilder
         */
        public GetProjectSecuritySchemesRequestBuilder issueSecuritySchemeId(Set<String> issueSecuritySchemeId) {
            this.issueSecuritySchemeId = issueSecuritySchemeId;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The list of project IDs to be filtered out. (optional)
         * @return GetProjectSecuritySchemesRequestBuilder
         */
        public GetProjectSecuritySchemesRequestBuilder projectId(Set<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for getProjectSecuritySchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectSecuritySchemesCall(startAt, maxResults, issueSecuritySchemeId, projectId, _callback);
        }


        /**
         * Execute getProjectSecuritySchemes request
         * @return PageBeanIssueSecuritySchemeToProjectMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueSecuritySchemeToProjectMapping execute() throws ApiException {
            ApiResponse<PageBeanIssueSecuritySchemeToProjectMapping> localVarResp = getProjectSecuritySchemesWithHttpInfo(startAt, maxResults, issueSecuritySchemeId, projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectSecuritySchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueSecuritySchemeToProjectMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueSecuritySchemeToProjectMapping> executeWithHttpInfo() throws ApiException {
            return getProjectSecuritySchemesWithHttpInfo(startAt, maxResults, issueSecuritySchemeId, projectId);
        }

        /**
         * Execute getProjectSecuritySchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueSecuritySchemeToProjectMapping> _callback) throws ApiException {
            return getProjectSecuritySchemesAsync(startAt, maxResults, issueSecuritySchemeId, projectId, _callback);
        }
    }

    /**
     * Get projects using issue security schemes
     * Returns a [paginated](https://dac-static.atlassian.com) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetProjectSecuritySchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectSecuritySchemesRequestBuilder getProjectSecuritySchemes() throws IllegalArgumentException {
        return new GetProjectSecuritySchemesRequestBuilder();
    }
    private okhttp3.Call getSchemeSecurityLevelsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemeSecurityLevelsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchemeSecurityLevels(Async)");
        }

        return getSchemeSecurityLevelsCall(id, _callback);

    }


    private ApiResponse<SecurityScheme> getSchemeSecurityLevelsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getSchemeSecurityLevelsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SecurityScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemeSecurityLevelsAsync(Long id, final ApiCallback<SecurityScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemeSecurityLevelsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SecurityScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemeSecurityLevelsRequestBuilder {
        private final Long id;

        private GetSchemeSecurityLevelsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getSchemeSecurityLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemeSecurityLevelsCall(id, _callback);
        }


        /**
         * Execute getSchemeSecurityLevels request
         * @return SecurityScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public SecurityScheme execute() throws ApiException {
            ApiResponse<SecurityScheme> localVarResp = getSchemeSecurityLevelsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchemeSecurityLevels request with HTTP info returned
         * @return ApiResponse&lt;SecurityScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecurityScheme> executeWithHttpInfo() throws ApiException {
            return getSchemeSecurityLevelsWithHttpInfo(id);
        }

        /**
         * Execute getSchemeSecurityLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecurityScheme> _callback) throws ApiException {
            return getSchemeSecurityLevelsAsync(id, _callback);
        }
    }

    /**
     * Get issue security scheme
     * Returns an issue security scheme along with its security levels.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     * @param id The ID of the issue security scheme. Use the [Get issue security schemes](https://dac-static.atlassian.com) operation to get a list of issue security scheme IDs. (required)
     * @return GetSchemeSecurityLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemeSecurityLevelsRequestBuilder getSchemeSecurityLevels(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetSchemeSecurityLevelsRequestBuilder(id);
    }
    private okhttp3.Call getSecurityLevelsCall(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Boolean onlyDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (schemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "schemeId", schemeId));
        }

        if (onlyDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyDefault", onlyDefault));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecurityLevelsValidateBeforeCall(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Boolean onlyDefault, final ApiCallback _callback) throws ApiException {
        return getSecurityLevelsCall(startAt, maxResults, id, schemeId, onlyDefault, _callback);

    }


    private ApiResponse<PageBeanSecurityLevel> getSecurityLevelsWithHttpInfo(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Boolean onlyDefault) throws ApiException {
        okhttp3.Call localVarCall = getSecurityLevelsValidateBeforeCall(startAt, maxResults, id, schemeId, onlyDefault, null);
        Type localVarReturnType = new TypeToken<PageBeanSecurityLevel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSecurityLevelsAsync(String startAt, String maxResults, Set<String> id, Set<String> schemeId, Boolean onlyDefault, final ApiCallback<PageBeanSecurityLevel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecurityLevelsValidateBeforeCall(startAt, maxResults, id, schemeId, onlyDefault, _callback);
        Type localVarReturnType = new TypeToken<PageBeanSecurityLevel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSecurityLevelsRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> id;
        private Set<String> schemeId;
        private Boolean onlyDefault;

        private GetSecurityLevelsRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetSecurityLevelsRequestBuilder
         */
        public GetSecurityLevelsRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetSecurityLevelsRequestBuilder
         */
        public GetSecurityLevelsRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return GetSecurityLevelsRequestBuilder
         */
        public GetSecurityLevelsRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set schemeId
         * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: &#x60;schemeId&#x3D;10000&amp;schemeId&#x3D;10001&#x60;. (optional)
         * @return GetSecurityLevelsRequestBuilder
         */
        public GetSecurityLevelsRequestBuilder schemeId(Set<String> schemeId) {
            this.schemeId = schemeId;
            return this;
        }
        
        /**
         * Set onlyDefault
         * @param onlyDefault When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false. (optional, default to false)
         * @return GetSecurityLevelsRequestBuilder
         */
        public GetSecurityLevelsRequestBuilder onlyDefault(Boolean onlyDefault) {
            this.onlyDefault = onlyDefault;
            return this;
        }
        
        /**
         * Build call for getSecurityLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSecurityLevelsCall(startAt, maxResults, id, schemeId, onlyDefault, _callback);
        }


        /**
         * Execute getSecurityLevels request
         * @return PageBeanSecurityLevel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanSecurityLevel execute() throws ApiException {
            ApiResponse<PageBeanSecurityLevel> localVarResp = getSecurityLevelsWithHttpInfo(startAt, maxResults, id, schemeId, onlyDefault);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSecurityLevels request with HTTP info returned
         * @return ApiResponse&lt;PageBeanSecurityLevel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanSecurityLevel> executeWithHttpInfo() throws ApiException {
            return getSecurityLevelsWithHttpInfo(startAt, maxResults, id, schemeId, onlyDefault);
        }

        /**
         * Execute getSecurityLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanSecurityLevel> _callback) throws ApiException {
            return getSecurityLevelsAsync(startAt, maxResults, id, schemeId, onlyDefault, _callback);
        }
    }

    /**
     * Get issue security levels
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetSecurityLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetSecurityLevelsRequestBuilder getSecurityLevels() throws IllegalArgumentException {
        return new GetSecurityLevelsRequestBuilder();
    }
    private okhttp3.Call getSecuritySchemesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecuritySchemesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSecuritySchemesCall(_callback);

    }


    private ApiResponse<SecuritySchemes> getSecuritySchemesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSecuritySchemesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SecuritySchemes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSecuritySchemesAsync(final ApiCallback<SecuritySchemes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecuritySchemesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SecuritySchemes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSecuritySchemesRequestBuilder {

        private GetSecuritySchemesRequestBuilder() {
        }

        /**
         * Build call for getSecuritySchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer issue security schemes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSecuritySchemesCall(_callback);
        }


        /**
         * Execute getSecuritySchemes request
         * @return SecuritySchemes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer issue security schemes. </td><td>  -  </td></tr>
         </table>
         */
        public SecuritySchemes execute() throws ApiException {
            ApiResponse<SecuritySchemes> localVarResp = getSecuritySchemesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSecuritySchemes request with HTTP info returned
         * @return ApiResponse&lt;SecuritySchemes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer issue security schemes. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecuritySchemes> executeWithHttpInfo() throws ApiException {
            return getSecuritySchemesWithHttpInfo();
        }

        /**
         * Execute getSecuritySchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer issue security schemes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecuritySchemes> _callback) throws ApiException {
            return getSecuritySchemesAsync(_callback);
        }
    }

    /**
     * Get issue security schemes
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetSecuritySchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to administer issue security schemes. </td><td>  -  </td></tr>
     </table>
     */
    public GetSecuritySchemesRequestBuilder getSecuritySchemes() throws IllegalArgumentException {
        return new GetSecuritySchemesRequestBuilder();
    }
    private okhttp3.Call removeLevelCall(String schemeId, String levelId, String replaceWith, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "levelId" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceWith", replaceWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLevelValidateBeforeCall(String schemeId, String levelId, String replaceWith, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling removeLevel(Async)");
        }

        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling removeLevel(Async)");
        }

        return removeLevelCall(schemeId, levelId, replaceWith, _callback);

    }


    private ApiResponse<Void> removeLevelWithHttpInfo(String schemeId, String levelId, String replaceWith) throws ApiException {
        okhttp3.Call localVarCall = removeLevelValidateBeforeCall(schemeId, levelId, replaceWith, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLevelAsync(String schemeId, String levelId, String replaceWith, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLevelValidateBeforeCall(schemeId, levelId, replaceWith, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLevelRequestBuilder {
        private final String schemeId;
        private final String levelId;
        private String replaceWith;

        private RemoveLevelRequestBuilder(String schemeId, String levelId) {
            this.schemeId = schemeId;
            this.levelId = levelId;
        }

        /**
         * Set replaceWith
         * @param replaceWith The ID of the issue security level that will replace the currently selected level. (optional)
         * @return RemoveLevelRequestBuilder
         */
        public RemoveLevelRequestBuilder replaceWith(String replaceWith) {
            this.replaceWith = replaceWith;
            return this;
        }
        
        /**
         * Build call for removeLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLevelCall(schemeId, levelId, replaceWith, _callback);
        }


        /**
         * Execute removeLevel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLevelWithHttpInfo(schemeId, levelId, replaceWith);
        }

        /**
         * Execute removeLevel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLevelWithHttpInfo(schemeId, levelId, replaceWith);
        }

        /**
         * Execute removeLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLevelAsync(schemeId, levelId, replaceWith, _callback);
        }
    }

    /**
     * Remove issue security level
     * Deletes an issue security level.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level to remove. (required)
     * @return RemoveLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLevelRequestBuilder removeLevel(String schemeId, String levelId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        if (levelId == null) throw new IllegalArgumentException("\"levelId\" is required but got null");
            

        return new RemoveLevelRequestBuilder(schemeId, levelId);
    }
    private okhttp3.Call removeSecurityLevelMemberCall(String schemeId, String levelId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "levelId" + "}", localVarApiClient.escapeString(levelId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSecurityLevelMemberValidateBeforeCall(String schemeId, String levelId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling removeSecurityLevelMember(Async)");
        }

        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling removeSecurityLevelMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling removeSecurityLevelMember(Async)");
        }

        return removeSecurityLevelMemberCall(schemeId, levelId, memberId, _callback);

    }


    private ApiResponse<Object> removeSecurityLevelMemberWithHttpInfo(String schemeId, String levelId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = removeSecurityLevelMemberValidateBeforeCall(schemeId, levelId, memberId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSecurityLevelMemberAsync(String schemeId, String levelId, String memberId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSecurityLevelMemberValidateBeforeCall(schemeId, levelId, memberId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSecurityLevelMemberRequestBuilder {
        private final String schemeId;
        private final String levelId;
        private final String memberId;

        private RemoveSecurityLevelMemberRequestBuilder(String schemeId, String levelId, String memberId) {
            this.schemeId = schemeId;
            this.levelId = levelId;
            this.memberId = memberId;
        }

        /**
         * Build call for removeSecurityLevelMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSecurityLevelMemberCall(schemeId, levelId, memberId, _callback);
        }


        /**
         * Execute removeSecurityLevelMember request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeSecurityLevelMemberWithHttpInfo(schemeId, levelId, memberId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSecurityLevelMember request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeSecurityLevelMemberWithHttpInfo(schemeId, levelId, memberId);
        }

        /**
         * Execute removeSecurityLevelMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeSecurityLevelMemberAsync(schemeId, levelId, memberId, _callback);
        }
    }

    /**
     * Remove member from issue security level
     * Removes an issue security level member from an issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level. (required)
     * @param memberId The ID of the issue security level member to be removed. (required)
     * @return RemoveSecurityLevelMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSecurityLevelMemberRequestBuilder removeSecurityLevelMember(String schemeId, String levelId, String memberId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        if (levelId == null) throw new IllegalArgumentException("\"levelId\" is required but got null");
            

        if (memberId == null) throw new IllegalArgumentException("\"memberId\" is required but got null");
            

        return new RemoveSecurityLevelMemberRequestBuilder(schemeId, levelId, memberId);
    }
    private okhttp3.Call searchSecuritySchemesCall(String startAt, String maxResults, Set<String> id, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSecuritySchemesValidateBeforeCall(String startAt, String maxResults, Set<String> id, Set<String> projectId, final ApiCallback _callback) throws ApiException {
        return searchSecuritySchemesCall(startAt, maxResults, id, projectId, _callback);

    }


    private ApiResponse<PageBeanSecuritySchemeWithProjects> searchSecuritySchemesWithHttpInfo(String startAt, String maxResults, Set<String> id, Set<String> projectId) throws ApiException {
        okhttp3.Call localVarCall = searchSecuritySchemesValidateBeforeCall(startAt, maxResults, id, projectId, null);
        Type localVarReturnType = new TypeToken<PageBeanSecuritySchemeWithProjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchSecuritySchemesAsync(String startAt, String maxResults, Set<String> id, Set<String> projectId, final ApiCallback<PageBeanSecuritySchemeWithProjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSecuritySchemesValidateBeforeCall(startAt, maxResults, id, projectId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanSecuritySchemeWithProjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchSecuritySchemesRequestBuilder {
        private String startAt;
        private String maxResults;
        private Set<String> id;
        private Set<String> projectId;

        private SearchSecuritySchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return SearchSecuritySchemesRequestBuilder
         */
        public SearchSecuritySchemesRequestBuilder startAt(String startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return SearchSecuritySchemesRequestBuilder
         */
        public SearchSecuritySchemesRequestBuilder maxResults(String maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return SearchSecuritySchemesRequestBuilder
         */
        public SearchSecuritySchemesRequestBuilder id(Set<String> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (optional)
         * @return SearchSecuritySchemesRequestBuilder
         */
        public SearchSecuritySchemesRequestBuilder projectId(Set<String> projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for searchSecuritySchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchSecuritySchemesCall(startAt, maxResults, id, projectId, _callback);
        }


        /**
         * Execute searchSecuritySchemes request
         * @return PageBeanSecuritySchemeWithProjects
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanSecuritySchemeWithProjects execute() throws ApiException {
            ApiResponse<PageBeanSecuritySchemeWithProjects> localVarResp = searchSecuritySchemesWithHttpInfo(startAt, maxResults, id, projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchSecuritySchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanSecuritySchemeWithProjects&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanSecuritySchemeWithProjects> executeWithHttpInfo() throws ApiException {
            return searchSecuritySchemesWithHttpInfo(startAt, maxResults, id, projectId);
        }

        /**
         * Execute searchSecuritySchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanSecuritySchemeWithProjects> _callback) throws ApiException {
            return searchSecuritySchemesAsync(startAt, maxResults, id, projectId, _callback);
        }
    }

    /**
     * Search issue security schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return SearchSecuritySchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public SearchSecuritySchemesRequestBuilder searchSecuritySchemes() throws IllegalArgumentException {
        return new SearchSecuritySchemesRequestBuilder();
    }
    private okhttp3.Call setDefaultLevelsCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/level/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultLevelsValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setDefaultLevels(Async)");
        }

        return setDefaultLevelsCall(requestBody, _callback);

    }


    private ApiResponse<Object> setDefaultLevelsWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setDefaultLevelsValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultLevelsAsync(Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultLevelsValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultLevelsRequestBuilder {
        private final List<DefaultLevelValue> defaultValues;

        private SetDefaultLevelsRequestBuilder(List<DefaultLevelValue> defaultValues) {
            this.defaultValues = defaultValues;
        }

        /**
         * Build call for setDefaultLevels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setDefaultLevelsCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("defaultValues", this.defaultValues);
            return requestBody;
        }

        /**
         * Execute setDefaultLevels request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = setDefaultLevelsWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultLevels request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setDefaultLevelsWithHttpInfo(requestBody);
        }

        /**
         * Execute setDefaultLevels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setDefaultLevelsAsync(requestBody, _callback);
        }
    }

    /**
     * Set default issue security levels
     * Sets default issue security levels for schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param requestBody  (required)
     * @return SetDefaultLevelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public SetDefaultLevelsRequestBuilder setDefaultLevels(List<DefaultLevelValue> defaultValues) throws IllegalArgumentException {
        if (defaultValues == null) throw new IllegalArgumentException("\"defaultValues\" is required but got null");
        return new SetDefaultLevelsRequestBuilder(defaultValues);
    }
    private okhttp3.Call updateSecurityLevelCall(String schemeId, String levelId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "levelId" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecurityLevelValidateBeforeCall(String schemeId, String levelId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling updateSecurityLevel(Async)");
        }

        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling updateSecurityLevel(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateSecurityLevel(Async)");
        }

        return updateSecurityLevelCall(schemeId, levelId, requestBody, _callback);

    }


    private ApiResponse<Object> updateSecurityLevelWithHttpInfo(String schemeId, String levelId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSecurityLevelValidateBeforeCall(schemeId, levelId, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSecurityLevelAsync(String schemeId, String levelId, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecurityLevelValidateBeforeCall(schemeId, levelId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSecurityLevelRequestBuilder {
        private final String schemeId;
        private final String levelId;
        private String description;
        private String name;

        private UpdateSecurityLevelRequestBuilder(String schemeId, String levelId) {
            this.schemeId = schemeId;
            this.levelId = levelId;
        }

        /**
         * Set description
         * @param description The description of the issue security scheme level. (optional)
         * @return UpdateSecurityLevelRequestBuilder
         */
        public UpdateSecurityLevelRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the issue security scheme level. Must be unique. (optional)
         * @return UpdateSecurityLevelRequestBuilder
         */
        public UpdateSecurityLevelRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateSecurityLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSecurityLevelCall(schemeId, levelId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("name", this.name);
            return requestBody;
        }

        /**
         * Execute updateSecurityLevel request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSecurityLevelWithHttpInfo(schemeId, levelId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSecurityLevel request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSecurityLevelWithHttpInfo(schemeId, levelId, requestBody);
        }

        /**
         * Execute updateSecurityLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSecurityLevelAsync(schemeId, levelId, requestBody, _callback);
        }
    }

    /**
     * Update issue security level
     * Updates the issue security level.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the issue security scheme level belongs to. (required)
     * @param levelId The ID of the issue security level to update. (required)
     * @param requestBody  (required)
     * @return UpdateSecurityLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSecurityLevelRequestBuilder updateSecurityLevel(String schemeId, String levelId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
            

        if (levelId == null) throw new IllegalArgumentException("\"levelId\" is required but got null");
            

        return new UpdateSecurityLevelRequestBuilder(schemeId, levelId);
    }
    private okhttp3.Call updateSecuritySchemeCall(String id, UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIssueSecuritySchemeRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuesecurityschemes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecuritySchemeValidateBeforeCall(String id, UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSecurityScheme(Async)");
        }

        // verify the required parameter 'updateIssueSecuritySchemeRequestBean' is set
        if (updateIssueSecuritySchemeRequestBean == null) {
            throw new ApiException("Missing the required parameter 'updateIssueSecuritySchemeRequestBean' when calling updateSecurityScheme(Async)");
        }

        return updateSecuritySchemeCall(id, updateIssueSecuritySchemeRequestBean, _callback);

    }


    private ApiResponse<Object> updateSecuritySchemeWithHttpInfo(String id, UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean) throws ApiException {
        okhttp3.Call localVarCall = updateSecuritySchemeValidateBeforeCall(id, updateIssueSecuritySchemeRequestBean, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSecuritySchemeAsync(String id, UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecuritySchemeValidateBeforeCall(id, updateIssueSecuritySchemeRequestBean, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSecuritySchemeRequestBuilder {
        private final String id;
        private String description;
        private String name;

        private UpdateSecuritySchemeRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the security scheme scheme. (optional)
         * @return UpdateSecuritySchemeRequestBuilder
         */
        public UpdateSecuritySchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the security scheme scheme. Must be unique. (optional)
         * @return UpdateSecuritySchemeRequestBuilder
         */
        public UpdateSecuritySchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateSecurityScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean = buildBodyParams();
            return updateSecuritySchemeCall(id, updateIssueSecuritySchemeRequestBean, _callback);
        }

        private UpdateIssueSecuritySchemeRequestBean buildBodyParams() {
            UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean = new UpdateIssueSecuritySchemeRequestBean();
            updateIssueSecuritySchemeRequestBean.description(this.description);
            updateIssueSecuritySchemeRequestBean.name(this.name);
            return updateIssueSecuritySchemeRequestBean;
        }

        /**
         * Execute updateSecurityScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSecuritySchemeWithHttpInfo(id, updateIssueSecuritySchemeRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSecurityScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean = buildBodyParams();
            return updateSecuritySchemeWithHttpInfo(id, updateIssueSecuritySchemeRequestBean);
        }

        /**
         * Execute updateSecurityScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean = buildBodyParams();
            return updateSecuritySchemeAsync(id, updateIssueSecuritySchemeRequestBean, _callback);
        }
    }

    /**
     * Update issue security scheme
     * Updates the issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the issue security scheme. (required)
     * @param updateIssueSecuritySchemeRequestBean  (required)
     * @return UpdateSecuritySchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSecuritySchemeRequestBuilder updateSecurityScheme(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateSecuritySchemeRequestBuilder(id);
    }
}
