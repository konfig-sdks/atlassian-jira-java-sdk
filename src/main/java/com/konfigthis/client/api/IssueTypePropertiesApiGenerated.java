/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.PropertyKeys;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueTypePropertiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueTypePropertiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueTypePropertiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deletePropertyByIdCall(String issueTypeId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}"
            .replace("{" + "issueTypeId" + "}", localVarApiClient.escapeString(issueTypeId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyByIdValidateBeforeCall(String issueTypeId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeId' is set
        if (issueTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeId' when calling deletePropertyById(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deletePropertyById(Async)");
        }

        return deletePropertyByIdCall(issueTypeId, propertyKey, _callback);

    }


    private ApiResponse<Void> deletePropertyByIdWithHttpInfo(String issueTypeId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyByIdValidateBeforeCall(issueTypeId, propertyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePropertyByIdAsync(String issueTypeId, String propertyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyByIdValidateBeforeCall(issueTypeId, propertyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePropertyByIdRequestBuilder {
        private final String issueTypeId;
        private final String propertyKey;

        private DeletePropertyByIdRequestBuilder(String issueTypeId, String propertyKey) {
            this.issueTypeId = issueTypeId;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for deletePropertyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyByIdCall(issueTypeId, propertyKey, _callback);
        }


        /**
         * Execute deletePropertyById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePropertyByIdWithHttpInfo(issueTypeId, propertyKey);
        }

        /**
         * Execute deletePropertyById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePropertyByIdWithHttpInfo(issueTypeId, propertyKey);
        }

        /**
         * Execute deletePropertyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePropertyByIdAsync(issueTypeId, propertyKey, _callback);
        }
    }

    /**
     * Delete issue type property
     * Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the property. Use [Get issue type property keys](https://dac-static.atlassian.com) to get a list of all issue type property keys. (required)
     * @return DeletePropertyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the issue type property is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue type or property is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePropertyByIdRequestBuilder deletePropertyById(String issueTypeId, String propertyKey) throws IllegalArgumentException {
        if (issueTypeId == null) throw new IllegalArgumentException("\"issueTypeId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeletePropertyByIdRequestBuilder(issueTypeId, propertyKey);
    }
    private okhttp3.Call getPropertyKeyCall(String issueTypeId, String propertyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}"
            .replace("{" + "issueTypeId" + "}", localVarApiClient.escapeString(issueTypeId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyKeyValidateBeforeCall(String issueTypeId, String propertyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeId' is set
        if (issueTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeId' when calling getPropertyKey(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getPropertyKey(Async)");
        }

        return getPropertyKeyCall(issueTypeId, propertyKey, _callback);

    }


    private ApiResponse<EntityProperty> getPropertyKeyWithHttpInfo(String issueTypeId, String propertyKey) throws ApiException {
        okhttp3.Call localVarCall = getPropertyKeyValidateBeforeCall(issueTypeId, propertyKey, null);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyKeyAsync(String issueTypeId, String propertyKey, final ApiCallback<EntityProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyKeyValidateBeforeCall(issueTypeId, propertyKey, _callback);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyKeyRequestBuilder {
        private final String issueTypeId;
        private final String propertyKey;

        private GetPropertyKeyRequestBuilder(String issueTypeId, String propertyKey) {
            this.issueTypeId = issueTypeId;
            this.propertyKey = propertyKey;
        }

        /**
         * Build call for getPropertyKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found or the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyKeyCall(issueTypeId, propertyKey, _callback);
        }


        /**
         * Execute getPropertyKey request
         * @return EntityProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found or the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public EntityProperty execute() throws ApiException {
            ApiResponse<EntityProperty> localVarResp = getPropertyKeyWithHttpInfo(issueTypeId, propertyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPropertyKey request with HTTP info returned
         * @return ApiResponse&lt;EntityProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found or the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityProperty> executeWithHttpInfo() throws ApiException {
            return getPropertyKeyWithHttpInfo(issueTypeId, propertyKey);
        }

        /**
         * Execute getPropertyKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue type or property is not found or the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityProperty> _callback) throws ApiException {
            return getPropertyKeyAsync(issueTypeId, propertyKey, _callback);
        }
    }

    /**
     * Get issue type property
     * Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the property. Use [Get issue type property keys](https://dac-static.atlassian.com) to get a list of all issue type property keys. (required)
     * @return GetPropertyKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue type or property is not found or the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyKeyRequestBuilder getPropertyKey(String issueTypeId, String propertyKey) throws IllegalArgumentException {
        if (issueTypeId == null) throw new IllegalArgumentException("\"issueTypeId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new GetPropertyKeyRequestBuilder(issueTypeId, propertyKey);
    }
    private okhttp3.Call getPropertyKeysCall(String issueTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetype/{issueTypeId}/properties"
            .replace("{" + "issueTypeId" + "}", localVarApiClient.escapeString(issueTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyKeysValidateBeforeCall(String issueTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeId' is set
        if (issueTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeId' when calling getPropertyKeys(Async)");
        }

        return getPropertyKeysCall(issueTypeId, _callback);

    }


    private ApiResponse<PropertyKeys> getPropertyKeysWithHttpInfo(String issueTypeId) throws ApiException {
        okhttp3.Call localVarCall = getPropertyKeysValidateBeforeCall(issueTypeId, null);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyKeysAsync(String issueTypeId, final ApiCallback<PropertyKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyKeysValidateBeforeCall(issueTypeId, _callback);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyKeysRequestBuilder {
        private final String issueTypeId;

        private GetPropertyKeysRequestBuilder(String issueTypeId) {
            this.issueTypeId = issueTypeId;
        }

        /**
         * Build call for getPropertyKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyKeysCall(issueTypeId, _callback);
        }


        /**
         * Execute getPropertyKeys request
         * @return PropertyKeys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PropertyKeys execute() throws ApiException {
            ApiResponse<PropertyKeys> localVarResp = getPropertyKeysWithHttpInfo(issueTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPropertyKeys request with HTTP info returned
         * @return ApiResponse&lt;PropertyKeys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyKeys> executeWithHttpInfo() throws ApiException {
            return getPropertyKeysWithHttpInfo(issueTypeId);
        }

        /**
         * Execute getPropertyKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyKeys> _callback) throws ApiException {
            return getPropertyKeysAsync(issueTypeId, _callback);
        }
    }

    /**
     * Get issue type property keys
     * Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     * @param issueTypeId The ID of the issue type. (required)
     * @return GetPropertyKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the issue type ID is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyKeysRequestBuilder getPropertyKeys(String issueTypeId) throws IllegalArgumentException {
        if (issueTypeId == null) throw new IllegalArgumentException("\"issueTypeId\" is required but got null");
            

        return new GetPropertyKeysRequestBuilder(issueTypeId);
    }
    private okhttp3.Call setPropertiesCall(String issueTypeId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}"
            .replace("{" + "issueTypeId" + "}", localVarApiClient.escapeString(issueTypeId.toString()))
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPropertiesValidateBeforeCall(String issueTypeId, String propertyKey, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeId' is set
        if (issueTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeId' when calling setProperties(Async)");
        }

        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setProperties(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setProperties(Async)");
        }

        return setPropertiesCall(issueTypeId, propertyKey, body, _callback);

    }


    private ApiResponse<Object> setPropertiesWithHttpInfo(String issueTypeId, String propertyKey, Object body) throws ApiException {
        okhttp3.Call localVarCall = setPropertiesValidateBeforeCall(issueTypeId, propertyKey, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setPropertiesAsync(String issueTypeId, String propertyKey, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPropertiesValidateBeforeCall(issueTypeId, propertyKey, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetPropertiesRequestBuilder {
        private final String issueTypeId;
        private final String propertyKey;
        private Object body;

        private SetPropertiesRequestBuilder(String issueTypeId, String propertyKey) {
            this.issueTypeId = issueTypeId;
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (optional)
         * @return SetPropertiesRequestBuilder
         */
        public SetPropertiesRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for setProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue type property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue type property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to modify the issue type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setPropertiesCall(issueTypeId, propertyKey, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setProperties request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue type property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue type property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to modify the issue type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = setPropertiesWithHttpInfo(issueTypeId, propertyKey, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setProperties request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue type property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue type property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to modify the issue type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setPropertiesWithHttpInfo(issueTypeId, propertyKey, body);
        }

        /**
         * Execute setProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the issue type property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the issue type property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to modify the issue type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setPropertiesAsync(issueTypeId, propertyKey, body, _callback);
        }
    }

    /**
     * Set issue type property
     * Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the issue type property. The maximum length is 255 characters. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return SetPropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the issue type property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the issue type property is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to modify the issue type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. </td><td>  -  </td></tr>
     </table>
     */
    public SetPropertiesRequestBuilder setProperties(String issueTypeId, String propertyKey) throws IllegalArgumentException {
        if (issueTypeId == null) throw new IllegalArgumentException("\"issueTypeId\" is required but got null");
            

        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetPropertiesRequestBuilder(issueTypeId, propertyKey);
    }
}
