/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.IssueTypeIds;
import com.konfigthis.client.model.IssueTypeSchemeDetails;
import com.konfigthis.client.model.IssueTypeSchemeID;
import com.konfigthis.client.model.IssueTypeSchemeProjectAssociation;
import com.konfigthis.client.model.IssueTypeSchemeUpdateDetails;
import com.konfigthis.client.model.OrderOfIssueTypes;
import com.konfigthis.client.model.PageBeanIssueTypeScheme;
import com.konfigthis.client.model.PageBeanIssueTypeSchemeMapping;
import com.konfigthis.client.model.PageBeanIssueTypeSchemeProjects;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueTypeSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueTypeSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueTypeSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addIssueTypesToSchemeCall(Long issueTypeSchemeId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype"
            .replace("{" + "issueTypeSchemeId" + "}", localVarApiClient.escapeString(issueTypeSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIssueTypesToSchemeValidateBeforeCall(Long issueTypeSchemeId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeId' is set
        if (issueTypeSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeId' when calling addIssueTypesToScheme(Async)");
        }

        // verify the required parameter 'issueTypeIds' is set
        if (issueTypeIds == null) {
            throw new ApiException("Missing the required parameter 'issueTypeIds' when calling addIssueTypesToScheme(Async)");
        }

        return addIssueTypesToSchemeCall(issueTypeSchemeId, issueTypeIds, _callback);

    }


    private ApiResponse<Object> addIssueTypesToSchemeWithHttpInfo(Long issueTypeSchemeId, IssueTypeIds issueTypeIds) throws ApiException {
        okhttp3.Call localVarCall = addIssueTypesToSchemeValidateBeforeCall(issueTypeSchemeId, issueTypeIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addIssueTypesToSchemeAsync(Long issueTypeSchemeId, IssueTypeIds issueTypeIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIssueTypesToSchemeValidateBeforeCall(issueTypeSchemeId, issueTypeIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddIssueTypesToSchemeRequestBuilder {
        private final List<String> issueTypeIds;
        private final Long issueTypeSchemeId;

        private AddIssueTypesToSchemeRequestBuilder(List<String> issueTypeIds, Long issueTypeSchemeId) {
            this.issueTypeIds = issueTypeIds;
            this.issueTypeSchemeId = issueTypeSchemeId;
        }

        /**
         * Build call for addIssueTypesToScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToSchemeCall(issueTypeSchemeId, issueTypeIds, _callback);
        }

        private IssueTypeIds buildBodyParams() {
            IssueTypeIds issueTypeIds = new IssueTypeIds();
            issueTypeIds.issueTypeIds(this.issueTypeIds);
            return issueTypeIds;
        }

        /**
         * Execute addIssueTypesToScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            ApiResponse<Object> localVarResp = addIssueTypesToSchemeWithHttpInfo(issueTypeSchemeId, issueTypeIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addIssueTypesToScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToSchemeWithHttpInfo(issueTypeSchemeId, issueTypeIds);
        }

        /**
         * Execute addIssueTypesToScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return addIssueTypesToSchemeAsync(issueTypeSchemeId, issueTypeIds, _callback);
        }
    }

    /**
     * Add issue types to issue type scheme
     * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeIds  (required)
     * @return AddIssueTypesToSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AddIssueTypesToSchemeRequestBuilder addIssueTypesToScheme(List<String> issueTypeIds, Long issueTypeSchemeId) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
        return new AddIssueTypesToSchemeRequestBuilder(issueTypeIds, issueTypeSchemeId);
    }
    private okhttp3.Call assignSchemeToProjectCall(IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeSchemeProjectAssociation;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignSchemeToProjectValidateBeforeCall(IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeProjectAssociation' is set
        if (issueTypeSchemeProjectAssociation == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeProjectAssociation' when calling assignSchemeToProject(Async)");
        }

        return assignSchemeToProjectCall(issueTypeSchemeProjectAssociation, _callback);

    }


    private ApiResponse<Object> assignSchemeToProjectWithHttpInfo(IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation) throws ApiException {
        okhttp3.Call localVarCall = assignSchemeToProjectValidateBeforeCall(issueTypeSchemeProjectAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignSchemeToProjectAsync(IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignSchemeToProjectValidateBeforeCall(issueTypeSchemeProjectAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignSchemeToProjectRequestBuilder {
        private final String issueTypeSchemeId;
        private final String projectId;

        private AssignSchemeToProjectRequestBuilder(String issueTypeSchemeId, String projectId) {
            this.issueTypeSchemeId = issueTypeSchemeId;
            this.projectId = projectId;
        }

        /**
         * Build call for assignSchemeToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectCall(issueTypeSchemeProjectAssociation, _callback);
        }

        private IssueTypeSchemeProjectAssociation buildBodyParams() {
            IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation = new IssueTypeSchemeProjectAssociation();
            issueTypeSchemeProjectAssociation.issueTypeSchemeId(this.issueTypeSchemeId);
            issueTypeSchemeProjectAssociation.projectId(this.projectId);
            return issueTypeSchemeProjectAssociation;
        }

        /**
         * Execute assignSchemeToProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation = buildBodyParams();
            ApiResponse<Object> localVarResp = assignSchemeToProjectWithHttpInfo(issueTypeSchemeProjectAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignSchemeToProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectWithHttpInfo(issueTypeSchemeProjectAssociation);
        }

        /**
         * Execute assignSchemeToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectAsync(issueTypeSchemeProjectAssociation, _callback);
        }
    }

    /**
     * Assign issue type scheme to project
     * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeProjectAssociation  (required)
     * @return AssignSchemeToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AssignSchemeToProjectRequestBuilder assignSchemeToProject(String issueTypeSchemeId, String projectId) throws IllegalArgumentException {
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new AssignSchemeToProjectRequestBuilder(issueTypeSchemeId, projectId);
    }
    private okhttp3.Call changeOrderOfIssueTypesCall(Long issueTypeSchemeId, OrderOfIssueTypes orderOfIssueTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderOfIssueTypes;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move"
            .replace("{" + "issueTypeSchemeId" + "}", localVarApiClient.escapeString(issueTypeSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderOfIssueTypesValidateBeforeCall(Long issueTypeSchemeId, OrderOfIssueTypes orderOfIssueTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeId' is set
        if (issueTypeSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeId' when calling changeOrderOfIssueTypes(Async)");
        }

        // verify the required parameter 'orderOfIssueTypes' is set
        if (orderOfIssueTypes == null) {
            throw new ApiException("Missing the required parameter 'orderOfIssueTypes' when calling changeOrderOfIssueTypes(Async)");
        }

        return changeOrderOfIssueTypesCall(issueTypeSchemeId, orderOfIssueTypes, _callback);

    }


    private ApiResponse<Object> changeOrderOfIssueTypesWithHttpInfo(Long issueTypeSchemeId, OrderOfIssueTypes orderOfIssueTypes) throws ApiException {
        okhttp3.Call localVarCall = changeOrderOfIssueTypesValidateBeforeCall(issueTypeSchemeId, orderOfIssueTypes, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changeOrderOfIssueTypesAsync(Long issueTypeSchemeId, OrderOfIssueTypes orderOfIssueTypes, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderOfIssueTypesValidateBeforeCall(issueTypeSchemeId, orderOfIssueTypes, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangeOrderOfIssueTypesRequestBuilder {
        private final List<String> issueTypeIds;
        private final Long issueTypeSchemeId;
        private String after;
        private String position;

        private ChangeOrderOfIssueTypesRequestBuilder(List<String> issueTypeIds, Long issueTypeSchemeId) {
            this.issueTypeIds = issueTypeIds;
            this.issueTypeSchemeId = issueTypeSchemeId;
        }

        /**
         * Set after
         * @param after The ID of the issue type to place the moved issue types after. Required if &#x60;position&#x60; isn&#39;t provided. (optional)
         * @return ChangeOrderOfIssueTypesRequestBuilder
         */
        public ChangeOrderOfIssueTypesRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set position
         * @param position The position the issue types should be moved to. Required if &#x60;after&#x60; isn&#39;t provided. (optional)
         * @return ChangeOrderOfIssueTypesRequestBuilder
         */
        public ChangeOrderOfIssueTypesRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for changeOrderOfIssueTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderOfIssueTypes orderOfIssueTypes = buildBodyParams();
            return changeOrderOfIssueTypesCall(issueTypeSchemeId, orderOfIssueTypes, _callback);
        }

        private OrderOfIssueTypes buildBodyParams() {
            OrderOfIssueTypes orderOfIssueTypes = new OrderOfIssueTypes();
            orderOfIssueTypes.after(this.after);
            orderOfIssueTypes.issueTypeIds(this.issueTypeIds);
            if (this.position != null)
            orderOfIssueTypes.position(OrderOfIssueTypes.PositionEnum.fromValue(this.position));
            return orderOfIssueTypes;
        }

        /**
         * Execute changeOrderOfIssueTypes request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            OrderOfIssueTypes orderOfIssueTypes = buildBodyParams();
            ApiResponse<Object> localVarResp = changeOrderOfIssueTypesWithHttpInfo(issueTypeSchemeId, orderOfIssueTypes);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changeOrderOfIssueTypes request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            OrderOfIssueTypes orderOfIssueTypes = buildBodyParams();
            return changeOrderOfIssueTypesWithHttpInfo(issueTypeSchemeId, orderOfIssueTypes);
        }

        /**
         * Execute changeOrderOfIssueTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            OrderOfIssueTypes orderOfIssueTypes = buildBodyParams();
            return changeOrderOfIssueTypesAsync(issueTypeSchemeId, orderOfIssueTypes, _callback);
        }
    }

    /**
     * Change order of issue types
     * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either &#x60;after&#x60; or &#x60;position&#x60; must be provided.  *  the issue type in &#x60;after&#x60; must not be in the issue type list.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param orderOfIssueTypes  (required)
     * @return ChangeOrderOfIssueTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ChangeOrderOfIssueTypesRequestBuilder changeOrderOfIssueTypes(List<String> issueTypeIds, Long issueTypeSchemeId) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
        return new ChangeOrderOfIssueTypesRequestBuilder(issueTypeIds, issueTypeSchemeId);
    }
    private okhttp3.Call createSchemeCall(IssueTypeSchemeDetails issueTypeSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemeValidateBeforeCall(IssueTypeSchemeDetails issueTypeSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeDetails' is set
        if (issueTypeSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeDetails' when calling createScheme(Async)");
        }

        return createSchemeCall(issueTypeSchemeDetails, _callback);

    }


    private ApiResponse<IssueTypeSchemeID> createSchemeWithHttpInfo(IssueTypeSchemeDetails issueTypeSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(issueTypeSchemeDetails, null);
        Type localVarReturnType = new TypeToken<IssueTypeSchemeID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSchemeAsync(IssueTypeSchemeDetails issueTypeSchemeDetails, final ApiCallback<IssueTypeSchemeID> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(issueTypeSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<IssueTypeSchemeID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSchemeRequestBuilder {
        private final List<String> issueTypeIds;
        private final String name;
        private String description;
        private String defaultIssueTypeId;

        private CreateSchemeRequestBuilder(List<String> issueTypeIds, String name) {
            this.issueTypeIds = issueTypeIds;
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the issue type scheme. The maximum length is 4000 characters. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultIssueTypeId
         * @param defaultIssueTypeId The ID of the default issue type of the issue type scheme. This ID must be included in &#x60;issueTypeIds&#x60;. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder defaultIssueTypeId(String defaultIssueTypeId) {
            this.defaultIssueTypeId = defaultIssueTypeId;
            return this;
        }
        
        /**
         * Build call for createScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeSchemeDetails issueTypeSchemeDetails = buildBodyParams();
            return createSchemeCall(issueTypeSchemeDetails, _callback);
        }

        private IssueTypeSchemeDetails buildBodyParams() {
            IssueTypeSchemeDetails issueTypeSchemeDetails = new IssueTypeSchemeDetails();
            issueTypeSchemeDetails.description(this.description);
            issueTypeSchemeDetails.defaultIssueTypeId(this.defaultIssueTypeId);
            issueTypeSchemeDetails.issueTypeIds(this.issueTypeIds);
            issueTypeSchemeDetails.name(this.name);
            return issueTypeSchemeDetails;
        }

        /**
         * Execute createScheme request
         * @return IssueTypeSchemeID
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypeSchemeID execute() throws ApiException {
            IssueTypeSchemeDetails issueTypeSchemeDetails = buildBodyParams();
            ApiResponse<IssueTypeSchemeID> localVarResp = createSchemeWithHttpInfo(issueTypeSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScheme request with HTTP info returned
         * @return ApiResponse&lt;IssueTypeSchemeID&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypeSchemeID> executeWithHttpInfo() throws ApiException {
            IssueTypeSchemeDetails issueTypeSchemeDetails = buildBodyParams();
            return createSchemeWithHttpInfo(issueTypeSchemeDetails);
        }

        /**
         * Execute createScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypeSchemeID> _callback) throws ApiException {
            IssueTypeSchemeDetails issueTypeSchemeDetails = buildBodyParams();
            return createSchemeAsync(issueTypeSchemeDetails, _callback);
        }
    }

    /**
     * Create issue type scheme
     * Creates an issue type scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeDetails  (required)
     * @return CreateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSchemeRequestBuilder createScheme(List<String> issueTypeIds, String name) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateSchemeRequestBuilder(issueTypeIds, name);
    }
    private okhttp3.Call deleteSchemeByIdCall(Long issueTypeSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}"
            .replace("{" + "issueTypeSchemeId" + "}", localVarApiClient.escapeString(issueTypeSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeByIdValidateBeforeCall(Long issueTypeSchemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeId' is set
        if (issueTypeSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeId' when calling deleteSchemeById(Async)");
        }

        return deleteSchemeByIdCall(issueTypeSchemeId, _callback);

    }


    private ApiResponse<Object> deleteSchemeByIdWithHttpInfo(Long issueTypeSchemeId) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeByIdValidateBeforeCall(issueTypeSchemeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSchemeByIdAsync(Long issueTypeSchemeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeByIdValidateBeforeCall(issueTypeSchemeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSchemeByIdRequestBuilder {
        private final Long issueTypeSchemeId;

        private DeleteSchemeByIdRequestBuilder(Long issueTypeSchemeId) {
            this.issueTypeSchemeId = issueTypeSchemeId;
        }

        /**
         * Build call for deleteSchemeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeByIdCall(issueTypeSchemeId, _callback);
        }


        /**
         * Execute deleteSchemeById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSchemeByIdWithHttpInfo(issueTypeSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSchemeById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSchemeByIdWithHttpInfo(issueTypeSchemeId);
        }

        /**
         * Execute deleteSchemeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSchemeByIdAsync(issueTypeSchemeId, _callback);
        }
    }

    /**
     * Delete issue type scheme
     * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @return DeleteSchemeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the issue type scheme is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeByIdRequestBuilder deleteSchemeById(Long issueTypeSchemeId) throws IllegalArgumentException {
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
        return new DeleteSchemeByIdRequestBuilder(issueTypeSchemeId);
    }
    private okhttp3.Call getAllSchemesCall(Long startAt, Integer maxResults, Set<Long> id, String orderBy, String expand, String queryString, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSchemesValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, String orderBy, String expand, String queryString, final ApiCallback _callback) throws ApiException {
        return getAllSchemesCall(startAt, maxResults, id, orderBy, expand, queryString, _callback);

    }


    private ApiResponse<PageBeanIssueTypeScheme> getAllSchemesWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id, String orderBy, String expand, String queryString) throws ApiException {
        okhttp3.Call localVarCall = getAllSchemesValidateBeforeCall(startAt, maxResults, id, orderBy, expand, queryString, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSchemesAsync(Long startAt, Integer maxResults, Set<Long> id, String orderBy, String expand, String queryString, final ApiCallback<PageBeanIssueTypeScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSchemesValidateBeforeCall(startAt, maxResults, id, orderBy, expand, queryString, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSchemesRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;
        private String orderBy;
        private String expand;
        private String queryString;

        private GetAllSchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;name&#x60; Sorts by issue type scheme name.  *  &#x60;id&#x60; Sorts by issue type scheme ID. (optional, default to id)
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;projects&#x60; For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  &#x60;issueTypes&#x60; For each issue type schemes, returns information about the issueTypes the issue type scheme have. (optional, default to )
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set queryString
         * @param queryString String used to perform a case-insensitive partial match with issue type scheme name. (optional, default to )
         * @return GetAllSchemesRequestBuilder
         */
        public GetAllSchemesRequestBuilder queryString(String queryString) {
            this.queryString = queryString;
            return this;
        }
        
        /**
         * Build call for getAllSchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSchemesCall(startAt, maxResults, id, orderBy, expand, queryString, _callback);
        }


        /**
         * Execute getAllSchemes request
         * @return PageBeanIssueTypeScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeScheme execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeScheme> localVarResp = getAllSchemesWithHttpInfo(startAt, maxResults, id, orderBy, expand, queryString);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeScheme> executeWithHttpInfo() throws ApiException {
            return getAllSchemesWithHttpInfo(startAt, maxResults, id, orderBy, expand, queryString);
        }

        /**
         * Execute getAllSchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeScheme> _callback) throws ApiException {
            return getAllSchemesAsync(startAt, maxResults, id, orderBy, expand, queryString, _callback);
        }
    }

    /**
     * Get all issue type schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetAllSchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSchemesRequestBuilder getAllSchemes() throws IllegalArgumentException {
        return new GetAllSchemesRequestBuilder();
    }
    private okhttp3.Call getIssueTypeSchemeForProjectsCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeSchemeForProjectsValidateBeforeCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIssueTypeSchemeForProjects(Async)");
        }

        return getIssueTypeSchemeForProjectsCall(projectId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanIssueTypeSchemeProjects> getIssueTypeSchemeForProjectsWithHttpInfo(Set<Long> projectId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeSchemeForProjectsValidateBeforeCall(projectId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeSchemeProjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeSchemeForProjectsAsync(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback<PageBeanIssueTypeSchemeProjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeSchemeForProjectsValidateBeforeCall(projectId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeSchemeProjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeSchemeForProjectsRequestBuilder {
        private final Set<Long> projectId;
        private Long startAt;
        private Integer maxResults;

        private GetIssueTypeSchemeForProjectsRequestBuilder(Set<Long> projectId) {
            this.projectId = projectId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetIssueTypeSchemeForProjectsRequestBuilder
         */
        public GetIssueTypeSchemeForProjectsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetIssueTypeSchemeForProjectsRequestBuilder
         */
        public GetIssueTypeSchemeForProjectsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getIssueTypeSchemeForProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeSchemeForProjectsCall(projectId, startAt, maxResults, _callback);
        }


        /**
         * Execute getIssueTypeSchemeForProjects request
         * @return PageBeanIssueTypeSchemeProjects
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeSchemeProjects execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeSchemeProjects> localVarResp = getIssueTypeSchemeForProjectsWithHttpInfo(projectId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeSchemeForProjects request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeSchemeProjects&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeSchemeProjects> executeWithHttpInfo() throws ApiException {
            return getIssueTypeSchemeForProjectsWithHttpInfo(projectId, startAt, maxResults);
        }

        /**
         * Execute getIssueTypeSchemeForProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeSchemeProjects> _callback) throws ApiException {
            return getIssueTypeSchemeForProjectsAsync(projectId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get issue type schemes for projects
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectId The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @return GetIssueTypeSchemeForProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeSchemeForProjectsRequestBuilder getIssueTypeSchemeForProjects(Set<Long> projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        return new GetIssueTypeSchemeForProjectsRequestBuilder(projectId);
    }
    private okhttp3.Call getSchemeMappingCall(Long startAt, Integer maxResults, Set<Long> issueTypeSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/mapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (issueTypeSchemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issueTypeSchemeId", issueTypeSchemeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemeMappingValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> issueTypeSchemeId, final ApiCallback _callback) throws ApiException {
        return getSchemeMappingCall(startAt, maxResults, issueTypeSchemeId, _callback);

    }


    private ApiResponse<PageBeanIssueTypeSchemeMapping> getSchemeMappingWithHttpInfo(Long startAt, Integer maxResults, Set<Long> issueTypeSchemeId) throws ApiException {
        okhttp3.Call localVarCall = getSchemeMappingValidateBeforeCall(startAt, maxResults, issueTypeSchemeId, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeSchemeMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemeMappingAsync(Long startAt, Integer maxResults, Set<Long> issueTypeSchemeId, final ApiCallback<PageBeanIssueTypeSchemeMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemeMappingValidateBeforeCall(startAt, maxResults, issueTypeSchemeId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeSchemeMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemeMappingRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> issueTypeSchemeId;

        private GetSchemeMappingRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetSchemeMappingRequestBuilder
         */
        public GetSchemeMappingRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetSchemeMappingRequestBuilder
         */
        public GetSchemeMappingRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set issueTypeSchemeId
         * @param issueTypeSchemeId The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;issueTypeSchemeId&#x3D;10000&amp;issueTypeSchemeId&#x3D;10001&#x60;. (optional)
         * @return GetSchemeMappingRequestBuilder
         */
        public GetSchemeMappingRequestBuilder issueTypeSchemeId(Set<Long> issueTypeSchemeId) {
            this.issueTypeSchemeId = issueTypeSchemeId;
            return this;
        }
        
        /**
         * Build call for getSchemeMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemeMappingCall(startAt, maxResults, issueTypeSchemeId, _callback);
        }


        /**
         * Execute getSchemeMapping request
         * @return PageBeanIssueTypeSchemeMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeSchemeMapping execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeSchemeMapping> localVarResp = getSchemeMappingWithHttpInfo(startAt, maxResults, issueTypeSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchemeMapping request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeSchemeMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeSchemeMapping> executeWithHttpInfo() throws ApiException {
            return getSchemeMappingWithHttpInfo(startAt, maxResults, issueTypeSchemeId);
        }

        /**
         * Execute getSchemeMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeSchemeMapping> _callback) throws ApiException {
            return getSchemeMappingAsync(startAt, maxResults, issueTypeSchemeId, _callback);
        }
    }

    /**
     * Get issue type scheme items
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetSchemeMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemeMappingRequestBuilder getSchemeMapping() throws IllegalArgumentException {
        return new GetSchemeMappingRequestBuilder();
    }
    private okhttp3.Call removeIssueTypeSchemeMappingCall(Long issueTypeSchemeId, Long issueTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}"
            .replace("{" + "issueTypeSchemeId" + "}", localVarApiClient.escapeString(issueTypeSchemeId.toString()))
            .replace("{" + "issueTypeId" + "}", localVarApiClient.escapeString(issueTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIssueTypeSchemeMappingValidateBeforeCall(Long issueTypeSchemeId, Long issueTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeId' is set
        if (issueTypeSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeId' when calling removeIssueTypeSchemeMapping(Async)");
        }

        // verify the required parameter 'issueTypeId' is set
        if (issueTypeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeId' when calling removeIssueTypeSchemeMapping(Async)");
        }

        return removeIssueTypeSchemeMappingCall(issueTypeSchemeId, issueTypeId, _callback);

    }


    private ApiResponse<Object> removeIssueTypeSchemeMappingWithHttpInfo(Long issueTypeSchemeId, Long issueTypeId) throws ApiException {
        okhttp3.Call localVarCall = removeIssueTypeSchemeMappingValidateBeforeCall(issueTypeSchemeId, issueTypeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIssueTypeSchemeMappingAsync(Long issueTypeSchemeId, Long issueTypeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIssueTypeSchemeMappingValidateBeforeCall(issueTypeSchemeId, issueTypeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIssueTypeSchemeMappingRequestBuilder {
        private final Long issueTypeSchemeId;
        private final Long issueTypeId;

        private RemoveIssueTypeSchemeMappingRequestBuilder(Long issueTypeSchemeId, Long issueTypeId) {
            this.issueTypeSchemeId = issueTypeSchemeId;
            this.issueTypeId = issueTypeId;
        }

        /**
         * Build call for removeIssueTypeSchemeMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeIssueTypeSchemeMappingCall(issueTypeSchemeId, issueTypeId, _callback);
        }


        /**
         * Execute removeIssueTypeSchemeMapping request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeIssueTypeSchemeMappingWithHttpInfo(issueTypeSchemeId, issueTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIssueTypeSchemeMapping request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeIssueTypeSchemeMappingWithHttpInfo(issueTypeSchemeId, issueTypeId);
        }

        /**
         * Execute removeIssueTypeSchemeMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeIssueTypeSchemeMappingAsync(issueTypeSchemeId, issueTypeId, _callback);
        }
    }

    /**
     * Remove issue type from issue type scheme
     * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeId The ID of the issue type. (required)
     * @return RemoveIssueTypeSchemeMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveIssueTypeSchemeMappingRequestBuilder removeIssueTypeSchemeMapping(Long issueTypeSchemeId, Long issueTypeId) throws IllegalArgumentException {
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
        if (issueTypeId == null) throw new IllegalArgumentException("\"issueTypeId\" is required but got null");
        return new RemoveIssueTypeSchemeMappingRequestBuilder(issueTypeSchemeId, issueTypeId);
    }
    private okhttp3.Call updateSchemeCall(Long issueTypeSchemeId, IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeSchemeUpdateDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}"
            .replace("{" + "issueTypeSchemeId" + "}", localVarApiClient.escapeString(issueTypeSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeValidateBeforeCall(Long issueTypeSchemeId, IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeSchemeId' is set
        if (issueTypeSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeId' when calling updateScheme(Async)");
        }

        // verify the required parameter 'issueTypeSchemeUpdateDetails' is set
        if (issueTypeSchemeUpdateDetails == null) {
            throw new ApiException("Missing the required parameter 'issueTypeSchemeUpdateDetails' when calling updateScheme(Async)");
        }

        return updateSchemeCall(issueTypeSchemeId, issueTypeSchemeUpdateDetails, _callback);

    }


    private ApiResponse<Object> updateSchemeWithHttpInfo(Long issueTypeSchemeId, IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(issueTypeSchemeId, issueTypeSchemeUpdateDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeAsync(Long issueTypeSchemeId, IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(issueTypeSchemeId, issueTypeSchemeUpdateDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeRequestBuilder {
        private final Long issueTypeSchemeId;
        private String description;
        private String defaultIssueTypeId;
        private String name;

        private UpdateSchemeRequestBuilder(Long issueTypeSchemeId) {
            this.issueTypeSchemeId = issueTypeSchemeId;
        }

        /**
         * Set description
         * @param description The description of the issue type scheme. The maximum length is 4000 characters. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultIssueTypeId
         * @param defaultIssueTypeId The ID of the default issue type of the issue type scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder defaultIssueTypeId(String defaultIssueTypeId) {
            this.defaultIssueTypeId = defaultIssueTypeId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the issue type scheme. The name must be unique. The maximum length is 255 characters. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails = buildBodyParams();
            return updateSchemeCall(issueTypeSchemeId, issueTypeSchemeUpdateDetails, _callback);
        }

        private IssueTypeSchemeUpdateDetails buildBodyParams() {
            IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails = new IssueTypeSchemeUpdateDetails();
            issueTypeSchemeUpdateDetails.description(this.description);
            issueTypeSchemeUpdateDetails.defaultIssueTypeId(this.defaultIssueTypeId);
            issueTypeSchemeUpdateDetails.name(this.name);
            return issueTypeSchemeUpdateDetails;
        }

        /**
         * Execute updateScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSchemeWithHttpInfo(issueTypeSchemeId, issueTypeSchemeUpdateDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails = buildBodyParams();
            return updateSchemeWithHttpInfo(issueTypeSchemeId, issueTypeSchemeUpdateDetails);
        }

        /**
         * Execute updateScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails = buildBodyParams();
            return updateSchemeAsync(issueTypeSchemeId, issueTypeSchemeUpdateDetails, _callback);
        }
    }

    /**
     * Update issue type scheme
     * Updates an issue type scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeSchemeUpdateDetails  (required)
     * @return UpdateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeRequestBuilder updateScheme(Long issueTypeSchemeId) throws IllegalArgumentException {
        if (issueTypeSchemeId == null) throw new IllegalArgumentException("\"issueTypeSchemeId\" is required but got null");
        return new UpdateSchemeRequestBuilder(issueTypeSchemeId);
    }
}
