/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.IssueTypeIds;
import com.konfigthis.client.model.IssueTypeScreenSchemeDetails;
import com.konfigthis.client.model.IssueTypeScreenSchemeId;
import com.konfigthis.client.model.IssueTypeScreenSchemeMapping;
import com.konfigthis.client.model.IssueTypeScreenSchemeMappingDetails;
import com.konfigthis.client.model.IssueTypeScreenSchemeProjectAssociation;
import com.konfigthis.client.model.IssueTypeScreenSchemeUpdateDetails;
import com.konfigthis.client.model.PageBeanIssueTypeScreenScheme;
import com.konfigthis.client.model.PageBeanIssueTypeScreenSchemeItem;
import com.konfigthis.client.model.PageBeanIssueTypeScreenSchemesProjects;
import com.konfigthis.client.model.PageBeanProjectDetails;
import java.util.Set;
import com.konfigthis.client.model.UpdateDefaultScreenScheme;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssueTypeScreenSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssueTypeScreenSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssueTypeScreenSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call appendMappingsToSchemeCall(String issueTypeScreenSchemeId, IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeScreenSchemeMappingDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendMappingsToSchemeValidateBeforeCall(String issueTypeScreenSchemeId, IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling appendMappingsToScheme(Async)");
        }

        // verify the required parameter 'issueTypeScreenSchemeMappingDetails' is set
        if (issueTypeScreenSchemeMappingDetails == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeMappingDetails' when calling appendMappingsToScheme(Async)");
        }

        return appendMappingsToSchemeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, _callback);

    }


    private ApiResponse<Object> appendMappingsToSchemeWithHttpInfo(String issueTypeScreenSchemeId, IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails) throws ApiException {
        okhttp3.Call localVarCall = appendMappingsToSchemeValidateBeforeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call appendMappingsToSchemeAsync(String issueTypeScreenSchemeId, IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendMappingsToSchemeValidateBeforeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AppendMappingsToSchemeRequestBuilder {
        private final List<IssueTypeScreenSchemeMapping> issueTypeMappings;
        private final String issueTypeScreenSchemeId;

        private AppendMappingsToSchemeRequestBuilder(List<IssueTypeScreenSchemeMapping> issueTypeMappings, String issueTypeScreenSchemeId) {
            this.issueTypeMappings = issueTypeMappings;
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Build call for appendMappingsToScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails = buildBodyParams();
            return appendMappingsToSchemeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, _callback);
        }

        private IssueTypeScreenSchemeMappingDetails buildBodyParams() {
            IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails = new IssueTypeScreenSchemeMappingDetails();
            issueTypeScreenSchemeMappingDetails.issueTypeMappings(this.issueTypeMappings);
            return issueTypeScreenSchemeMappingDetails;
        }

        /**
         * Execute appendMappingsToScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = appendMappingsToSchemeWithHttpInfo(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute appendMappingsToScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails = buildBodyParams();
            return appendMappingsToSchemeWithHttpInfo(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails);
        }

        /**
         * Execute appendMappingsToScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails = buildBodyParams();
            return appendMappingsToSchemeAsync(issueTypeScreenSchemeId, issueTypeScreenSchemeMappingDetails, _callback);
        }
    }

    /**
     * Append mappings to issue type screen scheme
     * Appends issue type to screen scheme mappings to an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeScreenSchemeMappingDetails  (required)
     * @return AppendMappingsToSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public AppendMappingsToSchemeRequestBuilder appendMappingsToScheme(List<IssueTypeScreenSchemeMapping> issueTypeMappings, String issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (issueTypeMappings == null) throw new IllegalArgumentException("\"issueTypeMappings\" is required but got null");
        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
            

        return new AppendMappingsToSchemeRequestBuilder(issueTypeMappings, issueTypeScreenSchemeId);
    }
    private okhttp3.Call assignSchemeToProjectCall(IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeScreenSchemeProjectAssociation;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignSchemeToProjectValidateBeforeCall(IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeProjectAssociation' is set
        if (issueTypeScreenSchemeProjectAssociation == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeProjectAssociation' when calling assignSchemeToProject(Async)");
        }

        return assignSchemeToProjectCall(issueTypeScreenSchemeProjectAssociation, _callback);

    }


    private ApiResponse<Object> assignSchemeToProjectWithHttpInfo(IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation) throws ApiException {
        okhttp3.Call localVarCall = assignSchemeToProjectValidateBeforeCall(issueTypeScreenSchemeProjectAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignSchemeToProjectAsync(IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignSchemeToProjectValidateBeforeCall(issueTypeScreenSchemeProjectAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignSchemeToProjectRequestBuilder {
        private String issueTypeScreenSchemeId;
        private String projectId;

        private AssignSchemeToProjectRequestBuilder() {
        }

        /**
         * Set issueTypeScreenSchemeId
         * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (optional)
         * @return AssignSchemeToProjectRequestBuilder
         */
        public AssignSchemeToProjectRequestBuilder issueTypeScreenSchemeId(String issueTypeScreenSchemeId) {
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project. (optional)
         * @return AssignSchemeToProjectRequestBuilder
         */
        public AssignSchemeToProjectRequestBuilder projectId(String projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Build call for assignSchemeToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectCall(issueTypeScreenSchemeProjectAssociation, _callback);
        }

        private IssueTypeScreenSchemeProjectAssociation buildBodyParams() {
            IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation = new IssueTypeScreenSchemeProjectAssociation();
            issueTypeScreenSchemeProjectAssociation.issueTypeScreenSchemeId(this.issueTypeScreenSchemeId);
            issueTypeScreenSchemeProjectAssociation.projectId(this.projectId);
            return issueTypeScreenSchemeProjectAssociation;
        }

        /**
         * Execute assignSchemeToProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation = buildBodyParams();
            ApiResponse<Object> localVarResp = assignSchemeToProjectWithHttpInfo(issueTypeScreenSchemeProjectAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignSchemeToProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectWithHttpInfo(issueTypeScreenSchemeProjectAssociation);
        }

        /**
         * Execute assignSchemeToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation = buildBodyParams();
            return assignSchemeToProjectAsync(issueTypeScreenSchemeProjectAssociation, _callback);
        }
    }

    /**
     * Assign issue type screen scheme to project
     * Assigns an issue type screen scheme to a project.  Issue type screen schemes can only be assigned to classic projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeProjectAssociation  (required)
     * @return AssignSchemeToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AssignSchemeToProjectRequestBuilder assignSchemeToProject() throws IllegalArgumentException {
        return new AssignSchemeToProjectRequestBuilder();
    }
    private okhttp3.Call createSchemeCall(IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeScreenSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemeValidateBeforeCall(IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeDetails' is set
        if (issueTypeScreenSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeDetails' when calling createScheme(Async)");
        }

        return createSchemeCall(issueTypeScreenSchemeDetails, _callback);

    }


    private ApiResponse<IssueTypeScreenSchemeId> createSchemeWithHttpInfo(IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(issueTypeScreenSchemeDetails, null);
        Type localVarReturnType = new TypeToken<IssueTypeScreenSchemeId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSchemeAsync(IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails, final ApiCallback<IssueTypeScreenSchemeId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(issueTypeScreenSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<IssueTypeScreenSchemeId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSchemeRequestBuilder {
        private final List<IssueTypeScreenSchemeMapping> issueTypeMappings;
        private final String name;
        private String description;

        private CreateSchemeRequestBuilder(List<IssueTypeScreenSchemeMapping> issueTypeMappings, String name) {
            this.issueTypeMappings = issueTypeMappings;
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the issue type screen scheme. The maximum length is 255 characters. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails = buildBodyParams();
            return createSchemeCall(issueTypeScreenSchemeDetails, _callback);
        }

        private IssueTypeScreenSchemeDetails buildBodyParams() {
            IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails = new IssueTypeScreenSchemeDetails();
            issueTypeScreenSchemeDetails.description(this.description);
            issueTypeScreenSchemeDetails.issueTypeMappings(this.issueTypeMappings);
            issueTypeScreenSchemeDetails.name(this.name);
            return issueTypeScreenSchemeDetails;
        }

        /**
         * Execute createScheme request
         * @return IssueTypeScreenSchemeId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypeScreenSchemeId execute() throws ApiException {
            IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails = buildBodyParams();
            ApiResponse<IssueTypeScreenSchemeId> localVarResp = createSchemeWithHttpInfo(issueTypeScreenSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScheme request with HTTP info returned
         * @return ApiResponse&lt;IssueTypeScreenSchemeId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypeScreenSchemeId> executeWithHttpInfo() throws ApiException {
            IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails = buildBodyParams();
            return createSchemeWithHttpInfo(issueTypeScreenSchemeDetails);
        }

        /**
         * Execute createScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypeScreenSchemeId> _callback) throws ApiException {
            IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails = buildBodyParams();
            return createSchemeAsync(issueTypeScreenSchemeDetails, _callback);
        }
    }

    /**
     * Create issue type screen scheme
     * Creates an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeDetails An issue type screen scheme bean. (required)
     * @return CreateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSchemeRequestBuilder createScheme(List<IssueTypeScreenSchemeMapping> issueTypeMappings, String name) throws IllegalArgumentException {
        if (issueTypeMappings == null) throw new IllegalArgumentException("\"issueTypeMappings\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateSchemeRequestBuilder(issueTypeMappings, name);
    }
    private okhttp3.Call deleteSchemeCall(String issueTypeScreenSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeValidateBeforeCall(String issueTypeScreenSchemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling deleteScheme(Async)");
        }

        return deleteSchemeCall(issueTypeScreenSchemeId, _callback);

    }


    private ApiResponse<Object> deleteSchemeWithHttpInfo(String issueTypeScreenSchemeId) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(issueTypeScreenSchemeId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSchemeAsync(String issueTypeScreenSchemeId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(issueTypeScreenSchemeId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSchemeRequestBuilder {
        private final String issueTypeScreenSchemeId;

        private DeleteSchemeRequestBuilder(String issueTypeScreenSchemeId) {
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Build call for deleteScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeCall(issueTypeScreenSchemeId, _callback);
        }


        /**
         * Execute deleteScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSchemeWithHttpInfo(issueTypeScreenSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSchemeWithHttpInfo(issueTypeScreenSchemeId);
        }

        /**
         * Execute deleteScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the issue type screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSchemeAsync(issueTypeScreenSchemeId, _callback);
        }
    }

    /**
     * Delete issue type screen scheme
     * Deletes an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @return DeleteSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the issue type screen scheme is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeRequestBuilder deleteScheme(String issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
            

        return new DeleteSchemeRequestBuilder(issueTypeScreenSchemeId);
    }
    private okhttp3.Call getScreenSchemeProjectsCall(Long issueTypeScreenSchemeId, Long startAt, Integer maxResults, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScreenSchemeProjectsValidateBeforeCall(Long issueTypeScreenSchemeId, Long startAt, Integer maxResults, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling getScreenSchemeProjects(Async)");
        }

        return getScreenSchemeProjectsCall(issueTypeScreenSchemeId, startAt, maxResults, query, _callback);

    }


    private ApiResponse<PageBeanProjectDetails> getScreenSchemeProjectsWithHttpInfo(Long issueTypeScreenSchemeId, Long startAt, Integer maxResults, String query) throws ApiException {
        okhttp3.Call localVarCall = getScreenSchemeProjectsValidateBeforeCall(issueTypeScreenSchemeId, startAt, maxResults, query, null);
        Type localVarReturnType = new TypeToken<PageBeanProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScreenSchemeProjectsAsync(Long issueTypeScreenSchemeId, Long startAt, Integer maxResults, String query, final ApiCallback<PageBeanProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScreenSchemeProjectsValidateBeforeCall(issueTypeScreenSchemeId, startAt, maxResults, query, _callback);
        Type localVarReturnType = new TypeToken<PageBeanProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScreenSchemeProjectsRequestBuilder {
        private final Long issueTypeScreenSchemeId;
        private Long startAt;
        private Integer maxResults;
        private String query;

        private GetScreenSchemeProjectsRequestBuilder(Long issueTypeScreenSchemeId) {
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetScreenSchemeProjectsRequestBuilder
         */
        public GetScreenSchemeProjectsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetScreenSchemeProjectsRequestBuilder
         */
        public GetScreenSchemeProjectsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set query
         * @param query  (optional, default to )
         * @return GetScreenSchemeProjectsRequestBuilder
         */
        public GetScreenSchemeProjectsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for getScreenSchemeProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScreenSchemeProjectsCall(issueTypeScreenSchemeId, startAt, maxResults, query, _callback);
        }


        /**
         * Execute getScreenSchemeProjects request
         * @return PageBeanProjectDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanProjectDetails execute() throws ApiException {
            ApiResponse<PageBeanProjectDetails> localVarResp = getScreenSchemeProjectsWithHttpInfo(issueTypeScreenSchemeId, startAt, maxResults, query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScreenSchemeProjects request with HTTP info returned
         * @return ApiResponse&lt;PageBeanProjectDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanProjectDetails> executeWithHttpInfo() throws ApiException {
            return getScreenSchemeProjectsWithHttpInfo(issueTypeScreenSchemeId, startAt, maxResults, query);
        }

        /**
         * Execute getScreenSchemeProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanProjectDetails> _callback) throws ApiException {
            return getScreenSchemeProjectsAsync(issueTypeScreenSchemeId, startAt, maxResults, query, _callback);
        }
    }

    /**
     * Get issue type screen scheme projects
     * Returns a [paginated](https://dac-static.atlassian.com) list of projects associated with an issue type screen scheme.  Only company-managed projects associated with an issue type screen scheme are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @return GetScreenSchemeProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetScreenSchemeProjectsRequestBuilder getScreenSchemeProjects(Long issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
        return new GetScreenSchemeProjectsRequestBuilder(issueTypeScreenSchemeId);
    }
    private okhttp3.Call getScreenSchemesForProjectCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScreenSchemesForProjectValidateBeforeCall(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getScreenSchemesForProject(Async)");
        }

        return getScreenSchemesForProjectCall(projectId, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanIssueTypeScreenSchemesProjects> getScreenSchemesForProjectWithHttpInfo(Set<Long> projectId, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getScreenSchemesForProjectValidateBeforeCall(projectId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenSchemesProjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScreenSchemesForProjectAsync(Set<Long> projectId, Long startAt, Integer maxResults, final ApiCallback<PageBeanIssueTypeScreenSchemesProjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScreenSchemesForProjectValidateBeforeCall(projectId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenSchemesProjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScreenSchemesForProjectRequestBuilder {
        private final Set<Long> projectId;
        private Long startAt;
        private Integer maxResults;

        private GetScreenSchemesForProjectRequestBuilder(Set<Long> projectId) {
            this.projectId = projectId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetScreenSchemesForProjectRequestBuilder
         */
        public GetScreenSchemesForProjectRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetScreenSchemesForProjectRequestBuilder
         */
        public GetScreenSchemesForProjectRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getScreenSchemesForProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScreenSchemesForProjectCall(projectId, startAt, maxResults, _callback);
        }


        /**
         * Execute getScreenSchemesForProject request
         * @return PageBeanIssueTypeScreenSchemesProjects
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeScreenSchemesProjects execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeScreenSchemesProjects> localVarResp = getScreenSchemesForProjectWithHttpInfo(projectId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScreenSchemesForProject request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeScreenSchemesProjects&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeScreenSchemesProjects> executeWithHttpInfo() throws ApiException {
            return getScreenSchemesForProjectWithHttpInfo(projectId, startAt, maxResults);
        }

        /**
         * Execute getScreenSchemesForProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeScreenSchemesProjects> _callback) throws ApiException {
            return getScreenSchemesForProjectAsync(projectId, startAt, maxResults, _callback);
        }
    }

    /**
     * Get issue type screen schemes for projects
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @return GetScreenSchemesForProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetScreenSchemesForProjectRequestBuilder getScreenSchemesForProject(Set<Long> projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        return new GetScreenSchemesForProjectRequestBuilder(projectId);
    }
    private okhttp3.Call listSchemeMappingsCall(Long startAt, Integer maxResults, Set<Long> issueTypeScreenSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/mapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (issueTypeScreenSchemeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "issueTypeScreenSchemeId", issueTypeScreenSchemeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSchemeMappingsValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> issueTypeScreenSchemeId, final ApiCallback _callback) throws ApiException {
        return listSchemeMappingsCall(startAt, maxResults, issueTypeScreenSchemeId, _callback);

    }


    private ApiResponse<PageBeanIssueTypeScreenSchemeItem> listSchemeMappingsWithHttpInfo(Long startAt, Integer maxResults, Set<Long> issueTypeScreenSchemeId) throws ApiException {
        okhttp3.Call localVarCall = listSchemeMappingsValidateBeforeCall(startAt, maxResults, issueTypeScreenSchemeId, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenSchemeItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSchemeMappingsAsync(Long startAt, Integer maxResults, Set<Long> issueTypeScreenSchemeId, final ApiCallback<PageBeanIssueTypeScreenSchemeItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSchemeMappingsValidateBeforeCall(startAt, maxResults, issueTypeScreenSchemeId, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenSchemeItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSchemeMappingsRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> issueTypeScreenSchemeId;

        private ListSchemeMappingsRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListSchemeMappingsRequestBuilder
         */
        public ListSchemeMappingsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListSchemeMappingsRequestBuilder
         */
        public ListSchemeMappingsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set issueTypeScreenSchemeId
         * @param issueTypeScreenSchemeId The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: &#x60;issueTypeScreenSchemeId&#x3D;10000&amp;issueTypeScreenSchemeId&#x3D;10001&#x60;. (optional)
         * @return ListSchemeMappingsRequestBuilder
         */
        public ListSchemeMappingsRequestBuilder issueTypeScreenSchemeId(Set<Long> issueTypeScreenSchemeId) {
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
            return this;
        }
        
        /**
         * Build call for listSchemeMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSchemeMappingsCall(startAt, maxResults, issueTypeScreenSchemeId, _callback);
        }


        /**
         * Execute listSchemeMappings request
         * @return PageBeanIssueTypeScreenSchemeItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeScreenSchemeItem execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeScreenSchemeItem> localVarResp = listSchemeMappingsWithHttpInfo(startAt, maxResults, issueTypeScreenSchemeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSchemeMappings request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeScreenSchemeItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeScreenSchemeItem> executeWithHttpInfo() throws ApiException {
            return listSchemeMappingsWithHttpInfo(startAt, maxResults, issueTypeScreenSchemeId);
        }

        /**
         * Execute listSchemeMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeScreenSchemeItem> _callback) throws ApiException {
            return listSchemeMappingsAsync(startAt, maxResults, issueTypeScreenSchemeId, _callback);
        }
    }

    /**
     * Get issue type screen scheme items
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListSchemeMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ListSchemeMappingsRequestBuilder listSchemeMappings() throws IllegalArgumentException {
        return new ListSchemeMappingsRequestBuilder();
    }
    private okhttp3.Call listScreenSchemesCall(Long startAt, Integer maxResults, Set<Long> id, String queryString, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScreenSchemesValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, String queryString, String orderBy, String expand, final ApiCallback _callback) throws ApiException {
        return listScreenSchemesCall(startAt, maxResults, id, queryString, orderBy, expand, _callback);

    }


    private ApiResponse<PageBeanIssueTypeScreenScheme> listScreenSchemesWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id, String queryString, String orderBy, String expand) throws ApiException {
        okhttp3.Call localVarCall = listScreenSchemesValidateBeforeCall(startAt, maxResults, id, queryString, orderBy, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScreenSchemesAsync(Long startAt, Integer maxResults, Set<Long> id, String queryString, String orderBy, String expand, final ApiCallback<PageBeanIssueTypeScreenScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScreenSchemesValidateBeforeCall(startAt, maxResults, id, queryString, orderBy, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanIssueTypeScreenScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListScreenSchemesRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;
        private String queryString;
        private String orderBy;
        private String expand;

        private ListScreenSchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set queryString
         * @param queryString String used to perform a case-insensitive partial match with issue type screen scheme name. (optional, default to )
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder queryString(String queryString) {
            this.queryString = queryString;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;name&#x60; Sorts by issue type screen scheme name.  *  &#x60;id&#x60; Sorts by issue type screen scheme ID. (optional, default to id)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts &#x60;projects&#x60; that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. (optional, default to )
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listScreenSchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScreenSchemesCall(startAt, maxResults, id, queryString, orderBy, expand, _callback);
        }


        /**
         * Execute listScreenSchemes request
         * @return PageBeanIssueTypeScreenScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanIssueTypeScreenScheme execute() throws ApiException {
            ApiResponse<PageBeanIssueTypeScreenScheme> localVarResp = listScreenSchemesWithHttpInfo(startAt, maxResults, id, queryString, orderBy, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listScreenSchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanIssueTypeScreenScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanIssueTypeScreenScheme> executeWithHttpInfo() throws ApiException {
            return listScreenSchemesWithHttpInfo(startAt, maxResults, id, queryString, orderBy, expand);
        }

        /**
         * Execute listScreenSchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanIssueTypeScreenScheme> _callback) throws ApiException {
            return listScreenSchemesAsync(startAt, maxResults, id, queryString, orderBy, expand, _callback);
        }
    }

    /**
     * Get issue type screen schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen schemes.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListScreenSchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ListScreenSchemesRequestBuilder listScreenSchemes() throws IllegalArgumentException {
        return new ListScreenSchemesRequestBuilder();
    }
    private okhttp3.Call removeMappingsCall(String issueTypeScreenSchemeId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeIds;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMappingsValidateBeforeCall(String issueTypeScreenSchemeId, IssueTypeIds issueTypeIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling removeMappings(Async)");
        }

        // verify the required parameter 'issueTypeIds' is set
        if (issueTypeIds == null) {
            throw new ApiException("Missing the required parameter 'issueTypeIds' when calling removeMappings(Async)");
        }

        return removeMappingsCall(issueTypeScreenSchemeId, issueTypeIds, _callback);

    }


    private ApiResponse<Object> removeMappingsWithHttpInfo(String issueTypeScreenSchemeId, IssueTypeIds issueTypeIds) throws ApiException {
        okhttp3.Call localVarCall = removeMappingsValidateBeforeCall(issueTypeScreenSchemeId, issueTypeIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMappingsAsync(String issueTypeScreenSchemeId, IssueTypeIds issueTypeIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMappingsValidateBeforeCall(issueTypeScreenSchemeId, issueTypeIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMappingsRequestBuilder {
        private final List<String> issueTypeIds;
        private final String issueTypeScreenSchemeId;

        private RemoveMappingsRequestBuilder(List<String> issueTypeIds, String issueTypeScreenSchemeId) {
            this.issueTypeIds = issueTypeIds;
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Build call for removeMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme mappings are removed from the issue type screen scheme. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeMappingsCall(issueTypeScreenSchemeId, issueTypeIds, _callback);
        }

        private IssueTypeIds buildBodyParams() {
            IssueTypeIds issueTypeIds = new IssueTypeIds();
            issueTypeIds.issueTypeIds(this.issueTypeIds);
            return issueTypeIds;
        }

        /**
         * Execute removeMappings request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme mappings are removed from the issue type screen scheme. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            ApiResponse<Object> localVarResp = removeMappingsWithHttpInfo(issueTypeScreenSchemeId, issueTypeIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMappings request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme mappings are removed from the issue type screen scheme. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeMappingsWithHttpInfo(issueTypeScreenSchemeId, issueTypeIds);
        }

        /**
         * Execute removeMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme mappings are removed from the issue type screen scheme. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeIds issueTypeIds = buildBodyParams();
            return removeMappingsAsync(issueTypeScreenSchemeId, issueTypeIds, _callback);
        }
    }

    /**
     * Remove mappings from issue type screen scheme
     * Removes issue type to screen scheme mappings from an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeIds  (required)
     * @return RemoveMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the screen scheme mappings are removed from the issue type screen scheme. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMappingsRequestBuilder removeMappings(List<String> issueTypeIds, String issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (issueTypeIds == null) throw new IllegalArgumentException("\"issueTypeIds\" is required but got null");
        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
            

        return new RemoveMappingsRequestBuilder(issueTypeIds, issueTypeScreenSchemeId);
    }
    private okhttp3.Call updateDefaultScreenSchemeCall(String issueTypeScreenSchemeId, UpdateDefaultScreenScheme updateDefaultScreenScheme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDefaultScreenScheme;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultScreenSchemeValidateBeforeCall(String issueTypeScreenSchemeId, UpdateDefaultScreenScheme updateDefaultScreenScheme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling updateDefaultScreenScheme(Async)");
        }

        // verify the required parameter 'updateDefaultScreenScheme' is set
        if (updateDefaultScreenScheme == null) {
            throw new ApiException("Missing the required parameter 'updateDefaultScreenScheme' when calling updateDefaultScreenScheme(Async)");
        }

        return updateDefaultScreenSchemeCall(issueTypeScreenSchemeId, updateDefaultScreenScheme, _callback);

    }


    private ApiResponse<Object> updateDefaultScreenSchemeWithHttpInfo(String issueTypeScreenSchemeId, UpdateDefaultScreenScheme updateDefaultScreenScheme) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultScreenSchemeValidateBeforeCall(issueTypeScreenSchemeId, updateDefaultScreenScheme, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefaultScreenSchemeAsync(String issueTypeScreenSchemeId, UpdateDefaultScreenScheme updateDefaultScreenScheme, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultScreenSchemeValidateBeforeCall(issueTypeScreenSchemeId, updateDefaultScreenScheme, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefaultScreenSchemeRequestBuilder {
        private final String screenSchemeId;
        private final String issueTypeScreenSchemeId;

        private UpdateDefaultScreenSchemeRequestBuilder(String screenSchemeId, String issueTypeScreenSchemeId) {
            this.screenSchemeId = screenSchemeId;
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Build call for updateDefaultScreenScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateDefaultScreenScheme updateDefaultScreenScheme = buildBodyParams();
            return updateDefaultScreenSchemeCall(issueTypeScreenSchemeId, updateDefaultScreenScheme, _callback);
        }

        private UpdateDefaultScreenScheme buildBodyParams() {
            UpdateDefaultScreenScheme updateDefaultScreenScheme = new UpdateDefaultScreenScheme();
            updateDefaultScreenScheme.screenSchemeId(this.screenSchemeId);
            return updateDefaultScreenScheme;
        }

        /**
         * Execute updateDefaultScreenScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateDefaultScreenScheme updateDefaultScreenScheme = buildBodyParams();
            ApiResponse<Object> localVarResp = updateDefaultScreenSchemeWithHttpInfo(issueTypeScreenSchemeId, updateDefaultScreenScheme);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefaultScreenScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateDefaultScreenScheme updateDefaultScreenScheme = buildBodyParams();
            return updateDefaultScreenSchemeWithHttpInfo(issueTypeScreenSchemeId, updateDefaultScreenScheme);
        }

        /**
         * Execute updateDefaultScreenScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateDefaultScreenScheme updateDefaultScreenScheme = buildBodyParams();
            return updateDefaultScreenSchemeAsync(issueTypeScreenSchemeId, updateDefaultScreenScheme, _callback);
        }
    }

    /**
     * Update issue type screen scheme default screen scheme
     * Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param updateDefaultScreenScheme  (required)
     * @return UpdateDefaultScreenSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefaultScreenSchemeRequestBuilder updateDefaultScreenScheme(String screenSchemeId, String issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (screenSchemeId == null) throw new IllegalArgumentException("\"screenSchemeId\" is required but got null");
            

        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
            

        return new UpdateDefaultScreenSchemeRequestBuilder(screenSchemeId, issueTypeScreenSchemeId);
    }
    private okhttp3.Call updateScreenSchemeCall(String issueTypeScreenSchemeId, IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeScreenSchemeUpdateDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}"
            .replace("{" + "issueTypeScreenSchemeId" + "}", localVarApiClient.escapeString(issueTypeScreenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScreenSchemeValidateBeforeCall(String issueTypeScreenSchemeId, IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'issueTypeScreenSchemeId' is set
        if (issueTypeScreenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeId' when calling updateScreenScheme(Async)");
        }

        // verify the required parameter 'issueTypeScreenSchemeUpdateDetails' is set
        if (issueTypeScreenSchemeUpdateDetails == null) {
            throw new ApiException("Missing the required parameter 'issueTypeScreenSchemeUpdateDetails' when calling updateScreenScheme(Async)");
        }

        return updateScreenSchemeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, _callback);

    }


    private ApiResponse<Object> updateScreenSchemeWithHttpInfo(String issueTypeScreenSchemeId, IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails) throws ApiException {
        okhttp3.Call localVarCall = updateScreenSchemeValidateBeforeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScreenSchemeAsync(String issueTypeScreenSchemeId, IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScreenSchemeValidateBeforeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScreenSchemeRequestBuilder {
        private final String issueTypeScreenSchemeId;
        private String description;
        private String name;

        private UpdateScreenSchemeRequestBuilder(String issueTypeScreenSchemeId) {
            this.issueTypeScreenSchemeId = issueTypeScreenSchemeId;
        }

        /**
         * Set description
         * @param description The description of the issue type screen scheme. The maximum length is 255 characters. (optional)
         * @return UpdateScreenSchemeRequestBuilder
         */
        public UpdateScreenSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters. (optional)
         * @return UpdateScreenSchemeRequestBuilder
         */
        public UpdateScreenSchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateScreenScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails = buildBodyParams();
            return updateScreenSchemeCall(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, _callback);
        }

        private IssueTypeScreenSchemeUpdateDetails buildBodyParams() {
            IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails = new IssueTypeScreenSchemeUpdateDetails();
            issueTypeScreenSchemeUpdateDetails.description(this.description);
            issueTypeScreenSchemeUpdateDetails.name(this.name);
            return issueTypeScreenSchemeUpdateDetails;
        }

        /**
         * Execute updateScreenScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateScreenSchemeWithHttpInfo(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScreenScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails = buildBodyParams();
            return updateScreenSchemeWithHttpInfo(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails);
        }

        /**
         * Execute updateScreenScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails = buildBodyParams();
            return updateScreenSchemeAsync(issueTypeScreenSchemeId, issueTypeScreenSchemeUpdateDetails, _callback);
        }
    }

    /**
     * Update issue type screen scheme
     * Updates an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeScreenSchemeUpdateDetails The issue type screen scheme update details. (required)
     * @return UpdateScreenSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScreenSchemeRequestBuilder updateScreenScheme(String issueTypeScreenSchemeId) throws IllegalArgumentException {
        if (issueTypeScreenSchemeId == null) throw new IllegalArgumentException("\"issueTypeScreenSchemeId\" is required but got null");
            

        return new UpdateScreenSchemeRequestBuilder(issueTypeScreenSchemeId);
    }
}
