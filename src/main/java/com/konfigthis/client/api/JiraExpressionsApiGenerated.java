/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.JiraExpressionEvalContextBean;
import com.konfigthis.client.model.JiraExpressionEvalRequestBean;
import com.konfigthis.client.model.JiraExpressionForAnalysis;
import com.konfigthis.client.model.JiraExpressionResult;
import com.konfigthis.client.model.JiraExpressionsAnalysis;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JiraExpressionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JiraExpressionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JiraExpressionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call analyseExpressionCall(JiraExpressionForAnalysis jiraExpressionForAnalysis, String check, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jiraExpressionForAnalysis;

        // create path and map variables
        String localVarPath = "/rest/api/3/expression/analyse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (check != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check", check));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyseExpressionValidateBeforeCall(JiraExpressionForAnalysis jiraExpressionForAnalysis, String check, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jiraExpressionForAnalysis' is set
        if (jiraExpressionForAnalysis == null) {
            throw new ApiException("Missing the required parameter 'jiraExpressionForAnalysis' when calling analyseExpression(Async)");
        }

        return analyseExpressionCall(jiraExpressionForAnalysis, check, _callback);

    }


    private ApiResponse<JiraExpressionsAnalysis> analyseExpressionWithHttpInfo(JiraExpressionForAnalysis jiraExpressionForAnalysis, String check) throws ApiException {
        okhttp3.Call localVarCall = analyseExpressionValidateBeforeCall(jiraExpressionForAnalysis, check, null);
        Type localVarReturnType = new TypeToken<JiraExpressionsAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call analyseExpressionAsync(JiraExpressionForAnalysis jiraExpressionForAnalysis, String check, final ApiCallback<JiraExpressionsAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyseExpressionValidateBeforeCall(jiraExpressionForAnalysis, check, _callback);
        Type localVarReturnType = new TypeToken<JiraExpressionsAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AnalyseExpressionRequestBuilder {
        private final List<String> expressions;
        private Map<String, String> contextVariables;
        private String check;

        private AnalyseExpressionRequestBuilder(List<String> expressions) {
            this.expressions = expressions;
        }

        /**
         * Set contextVariables
         * @param contextVariables Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as &#x60;issue&#x60; or &#x60;project&#x60;, are available in context and sets their type. Use this property to override the default types or provide details of new variables. (optional)
         * @return AnalyseExpressionRequestBuilder
         */
        public AnalyseExpressionRequestBuilder contextVariables(Map<String, String> contextVariables) {
            this.contextVariables = contextVariables;
            return this;
        }
        
        /**
         * Set check
         * @param check The check to perform:   *  &#x60;syntax&#x60; Each expression&#39;s syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression&#39;s length.  *  &#x60;type&#x60; EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don&#39;t exist or passing the wrong number of arguments to functions. Also performs the syntax check.  *  &#x60;complexity&#x60; EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute. (optional, default to syntax)
         * @return AnalyseExpressionRequestBuilder
         */
        public AnalyseExpressionRequestBuilder check(String check) {
            this.check = check;
            return this;
        }
        
        /**
         * Build call for analyseExpression
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JiraExpressionForAnalysis jiraExpressionForAnalysis = buildBodyParams();
            return analyseExpressionCall(jiraExpressionForAnalysis, check, _callback);
        }

        private JiraExpressionForAnalysis buildBodyParams() {
            JiraExpressionForAnalysis jiraExpressionForAnalysis = new JiraExpressionForAnalysis();
            jiraExpressionForAnalysis.contextVariables(this.contextVariables);
            jiraExpressionForAnalysis.expressions(this.expressions);
            return jiraExpressionForAnalysis;
        }

        /**
         * Execute analyseExpression request
         * @return JiraExpressionsAnalysis
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public JiraExpressionsAnalysis execute() throws ApiException {
            JiraExpressionForAnalysis jiraExpressionForAnalysis = buildBodyParams();
            ApiResponse<JiraExpressionsAnalysis> localVarResp = analyseExpressionWithHttpInfo(jiraExpressionForAnalysis, check);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute analyseExpression request with HTTP info returned
         * @return ApiResponse&lt;JiraExpressionsAnalysis&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JiraExpressionsAnalysis> executeWithHttpInfo() throws ApiException {
            JiraExpressionForAnalysis jiraExpressionForAnalysis = buildBodyParams();
            return analyseExpressionWithHttpInfo(jiraExpressionForAnalysis, check);
        }

        /**
         * Execute analyseExpression request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JiraExpressionsAnalysis> _callback) throws ApiException {
            JiraExpressionForAnalysis jiraExpressionForAnalysis = buildBodyParams();
            return analyseExpressionAsync(jiraExpressionForAnalysis, check, _callback);
        }
    }

    /**
     * Analyse Jira expression
     * Analyses and validates Jira expressions.  As an experimental feature, this operation can also attempt to type-check the expressions.  Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).  **[Permissions](https://dac-static.atlassian.com) required**: None.
     * @param jiraExpressionForAnalysis The Jira expressions to analyse. (required)
     * @return AnalyseExpressionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyseExpressionRequestBuilder analyseExpression(List<String> expressions) throws IllegalArgumentException {
        if (expressions == null) throw new IllegalArgumentException("\"expressions\" is required but got null");
        return new AnalyseExpressionRequestBuilder(expressions);
    }
    private okhttp3.Call evaluateExpressionValueCall(JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jiraExpressionEvalRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/expression/eval";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateExpressionValueValidateBeforeCall(JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jiraExpressionEvalRequestBean' is set
        if (jiraExpressionEvalRequestBean == null) {
            throw new ApiException("Missing the required parameter 'jiraExpressionEvalRequestBean' when calling evaluateExpressionValue(Async)");
        }

        return evaluateExpressionValueCall(jiraExpressionEvalRequestBean, expand, _callback);

    }


    private ApiResponse<JiraExpressionResult> evaluateExpressionValueWithHttpInfo(JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean, String expand) throws ApiException {
        okhttp3.Call localVarCall = evaluateExpressionValueValidateBeforeCall(jiraExpressionEvalRequestBean, expand, null);
        Type localVarReturnType = new TypeToken<JiraExpressionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call evaluateExpressionValueAsync(JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean, String expand, final ApiCallback<JiraExpressionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateExpressionValueValidateBeforeCall(jiraExpressionEvalRequestBean, expand, _callback);
        Type localVarReturnType = new TypeToken<JiraExpressionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EvaluateExpressionValueRequestBuilder {
        private final String expression;
        private JiraExpressionEvalContextBean context;
        private String expand;

        private EvaluateExpressionValueRequestBuilder(String expression) {
            this.expression = expression;
        }

        /**
         * Set context
         * @param context The context in which the Jira expression is evaluated. (optional)
         * @return EvaluateExpressionValueRequestBuilder
         */
        public EvaluateExpressionValueRequestBuilder context(JiraExpressionEvalContextBean context) {
            this.context = context;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts &#x60;meta.complexity&#x60; that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions. (optional)
         * @return EvaluateExpressionValueRequestBuilder
         */
        public EvaluateExpressionValueRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for evaluateExpressionValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean = buildBodyParams();
            return evaluateExpressionValueCall(jiraExpressionEvalRequestBean, expand, _callback);
        }

        private JiraExpressionEvalRequestBean buildBodyParams() {
            JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean = new JiraExpressionEvalRequestBean();
            jiraExpressionEvalRequestBean.context(this.context);
            jiraExpressionEvalRequestBean.expression(this.expression);
            return jiraExpressionEvalRequestBean;
        }

        /**
         * Execute evaluateExpressionValue request
         * @return JiraExpressionResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public JiraExpressionResult execute() throws ApiException {
            JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean = buildBodyParams();
            ApiResponse<JiraExpressionResult> localVarResp = evaluateExpressionValueWithHttpInfo(jiraExpressionEvalRequestBean, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute evaluateExpressionValue request with HTTP info returned
         * @return ApiResponse&lt;JiraExpressionResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JiraExpressionResult> executeWithHttpInfo() throws ApiException {
            JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean = buildBodyParams();
            return evaluateExpressionValueWithHttpInfo(jiraExpressionEvalRequestBean, expand);
        }

        /**
         * Execute evaluateExpressionValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JiraExpressionResult> _callback) throws ApiException {
            JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean = buildBodyParams();
            return evaluateExpressionValueAsync(jiraExpressionEvalRequestBean, expand, _callback);
        }
    }

    /**
     * Evaluate Jira expression
     * Evaluates a Jira expression and returns its value.  This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.  #### Context variables ####  The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.   *  &#x60;user&#x60; ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to &#x60;null&#x60; if the request is anonymous.  *  &#x60;app&#x60; ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).  *  &#x60;issue&#x60; ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.  *  &#x60;issues&#x60; ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.  *  &#x60;project&#x60; ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.  *  &#x60;sprint&#x60; ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.  *  &#x60;board&#x60; ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.  *  &#x60;serviceDesk&#x60; ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.  *  &#x60;customerRequest&#x60; ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.  Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:   *  &#x60;user&#x60;: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  &#x60;issue&#x60;: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  &#x60;json&#x60;: A JSON object containing custom content.  *  &#x60;list&#x60;: A JSON list of &#x60;user&#x60;, &#x60;issue&#x60;, or &#x60;json&#x60; variable types.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.   Permission to access Jira Software is required to access Jira Software context variables (&#x60;board&#x60; and &#x60;sprint&#x60;) or fields (for example, &#x60;issue.sprint&#x60;).
     * @param jiraExpressionEvalRequestBean The Jira expression and the evaluation context. (required)
     * @return EvaluateExpressionValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public EvaluateExpressionValueRequestBuilder evaluateExpressionValue(String expression) throws IllegalArgumentException {
        if (expression == null) throw new IllegalArgumentException("\"expression\" is required but got null");
            

        return new EvaluateExpressionValueRequestBuilder(expression);
    }
}
