/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.JqlFunctionPrecomputationUpdateBean;
import com.konfigthis.client.model.JqlFunctionPrecomputationUpdateRequestBean;
import com.konfigthis.client.model.PageBeanJqlFunctionPrecomputationBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JqlFunctionsAppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JqlFunctionsAppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JqlFunctionsAppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPrecomputationsCall(List<String> functionKey, Long startAt, Integer maxResults, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/jql/function/computation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (functionKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "functionKey", functionKey));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrecomputationsValidateBeforeCall(List<String> functionKey, Long startAt, Integer maxResults, String orderBy, final ApiCallback _callback) throws ApiException {
        return getPrecomputationsCall(functionKey, startAt, maxResults, orderBy, _callback);

    }


    private ApiResponse<PageBeanJqlFunctionPrecomputationBean> getPrecomputationsWithHttpInfo(List<String> functionKey, Long startAt, Integer maxResults, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = getPrecomputationsValidateBeforeCall(functionKey, startAt, maxResults, orderBy, null);
        Type localVarReturnType = new TypeToken<PageBeanJqlFunctionPrecomputationBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrecomputationsAsync(List<String> functionKey, Long startAt, Integer maxResults, String orderBy, final ApiCallback<PageBeanJqlFunctionPrecomputationBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrecomputationsValidateBeforeCall(functionKey, startAt, maxResults, orderBy, _callback);
        Type localVarReturnType = new TypeToken<PageBeanJqlFunctionPrecomputationBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPrecomputationsRequestBuilder {
        private List<String> functionKey;
        private Long startAt;
        private Integer maxResults;
        private String orderBy;

        private GetPrecomputationsRequestBuilder() {
        }

        /**
         * Set functionKey
         * @param functionKey The function key in format:   *  Forge: &#x60;ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]&#x60;  *  Connect: &#x60;[App key]__[Module key]&#x60; (optional)
         * @return GetPrecomputationsRequestBuilder
         */
        public GetPrecomputationsRequestBuilder functionKey(List<String> functionKey) {
            this.functionKey = functionKey;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetPrecomputationsRequestBuilder
         */
        public GetPrecomputationsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return GetPrecomputationsRequestBuilder
         */
        public GetPrecomputationsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;functionKey&#x60; Sorts by the functionKey.  *  &#x60;used&#x60; Sorts by the used timestamp.  *  &#x60;created&#x60; Sorts by the created timestamp.  *  &#x60;updated&#x60; Sorts by the updated timestamp. (optional)
         * @return GetPrecomputationsRequestBuilder
         */
        public GetPrecomputationsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for getPrecomputations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrecomputationsCall(functionKey, startAt, maxResults, orderBy, _callback);
        }


        /**
         * Execute getPrecomputations request
         * @return PageBeanJqlFunctionPrecomputationBean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanJqlFunctionPrecomputationBean execute() throws ApiException {
            ApiResponse<PageBeanJqlFunctionPrecomputationBean> localVarResp = getPrecomputationsWithHttpInfo(functionKey, startAt, maxResults, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrecomputations request with HTTP info returned
         * @return ApiResponse&lt;PageBeanJqlFunctionPrecomputationBean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanJqlFunctionPrecomputationBean> executeWithHttpInfo() throws ApiException {
            return getPrecomputationsWithHttpInfo(functionKey, startAt, maxResults, orderBy);
        }

        /**
         * Execute getPrecomputations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanJqlFunctionPrecomputationBean> _callback) throws ApiException {
            return getPrecomputationsAsync(functionKey, startAt, maxResults, orderBy, _callback);
        }
    }

    /**
     * Get precomputations (apps)
     * Returns the list of a function&#39;s precomputations along with information about when they were created, updated, and last used. Each precomputation has a &#x60;value&#x60; \\- the JQL fragment to replace the custom function clause with.  **[Permissions](https://dac-static.atlassian.com) required:** This API is only accessible to apps and apps can only inspect their own functions.
     * @return GetPrecomputationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPrecomputationsRequestBuilder getPrecomputations() throws IllegalArgumentException {
        return new GetPrecomputationsRequestBuilder();
    }
    private okhttp3.Call updatePrecomputationValueCall(JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jqlFunctionPrecomputationUpdateRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/jql/function/computation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrecomputationValueValidateBeforeCall(JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jqlFunctionPrecomputationUpdateRequestBean' is set
        if (jqlFunctionPrecomputationUpdateRequestBean == null) {
            throw new ApiException("Missing the required parameter 'jqlFunctionPrecomputationUpdateRequestBean' when calling updatePrecomputationValue(Async)");
        }

        return updatePrecomputationValueCall(jqlFunctionPrecomputationUpdateRequestBean, _callback);

    }


    private ApiResponse<Object> updatePrecomputationValueWithHttpInfo(JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean) throws ApiException {
        okhttp3.Call localVarCall = updatePrecomputationValueValidateBeforeCall(jqlFunctionPrecomputationUpdateRequestBean, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePrecomputationValueAsync(JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrecomputationValueValidateBeforeCall(jqlFunctionPrecomputationUpdateRequestBean, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePrecomputationValueRequestBuilder {
        private List<JqlFunctionPrecomputationUpdateBean> values;

        private UpdatePrecomputationValueRequestBuilder() {
        }

        /**
         * Set values
         * @param values  (optional)
         * @return UpdatePrecomputationValueRequestBuilder
         */
        public UpdatePrecomputationValueRequestBuilder values(List<JqlFunctionPrecomputationUpdateBean> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Build call for updatePrecomputationValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean = buildBodyParams();
            return updatePrecomputationValueCall(jqlFunctionPrecomputationUpdateRequestBean, _callback);
        }

        private JqlFunctionPrecomputationUpdateRequestBean buildBodyParams() {
            JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean = new JqlFunctionPrecomputationUpdateRequestBean();
            jqlFunctionPrecomputationUpdateRequestBean.values(this.values);
            return jqlFunctionPrecomputationUpdateRequestBean;
        }

        /**
         * Execute updatePrecomputationValue request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean = buildBodyParams();
            ApiResponse<Object> localVarResp = updatePrecomputationValueWithHttpInfo(jqlFunctionPrecomputationUpdateRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePrecomputationValue request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean = buildBodyParams();
            return updatePrecomputationValueWithHttpInfo(jqlFunctionPrecomputationUpdateRequestBean);
        }

        /**
         * Execute updatePrecomputationValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean = buildBodyParams();
            return updatePrecomputationValueAsync(jqlFunctionPrecomputationUpdateRequestBean, _callback);
        }
    }

    /**
     * Update precomputations (apps)
     * Update the precomputation value of a function created by a Forge/Connect app.  **[Permissions](https://dac-static.atlassian.com) required:** An API for apps to update their own precomputations.
     * @param jqlFunctionPrecomputationUpdateRequestBean  (required)
     * @return UpdatePrecomputationValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the function. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the function is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePrecomputationValueRequestBuilder updatePrecomputationValue() throws IllegalArgumentException {
        return new UpdatePrecomputationValueRequestBuilder();
    }
}
