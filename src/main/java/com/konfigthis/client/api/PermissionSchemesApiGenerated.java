/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PermissionGrant;
import com.konfigthis.client.model.PermissionGrants;
import com.konfigthis.client.model.PermissionHolder;
import com.konfigthis.client.model.PermissionScheme;
import com.konfigthis.client.model.PermissionSchemes;
import com.konfigthis.client.model.Scope;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PermissionSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPermissionGrantCall(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}/permission"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPermissionGrantValidateBeforeCall(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling createPermissionGrant(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createPermissionGrant(Async)");
        }

        return createPermissionGrantCall(schemeId, requestBody, expand, _callback);

    }


    private ApiResponse<PermissionGrant> createPermissionGrantWithHttpInfo(Long schemeId, Map<String, Object> requestBody, String expand) throws ApiException {
        okhttp3.Call localVarCall = createPermissionGrantValidateBeforeCall(schemeId, requestBody, expand, null);
        Type localVarReturnType = new TypeToken<PermissionGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPermissionGrantAsync(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback<PermissionGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPermissionGrantValidateBeforeCall(schemeId, requestBody, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePermissionGrantRequestBuilder {
        private final Long schemeId;
        private PermissionHolder holder;
        private Long id;
        private String permission;
        private URI self;
        private String expand;

        private CreatePermissionGrantRequestBuilder(Long schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Set holder
         * @param holder  (optional)
         * @return CreatePermissionGrantRequestBuilder
         */
        public CreatePermissionGrantRequestBuilder holder(PermissionHolder holder) {
            this.holder = holder;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the permission granted details. (optional)
         * @return CreatePermissionGrantRequestBuilder
         */
        public CreatePermissionGrantRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set permission
         * @param permission The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions. (optional)
         * @return CreatePermissionGrantRequestBuilder
         */
        public CreatePermissionGrantRequestBuilder permission(String permission) {
            this.permission = permission;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the permission granted details. (optional)
         * @return CreatePermissionGrantRequestBuilder
         */
        public CreatePermissionGrantRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information. (optional)
         * @return CreatePermissionGrantRequestBuilder
         */
        public CreatePermissionGrantRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for createPermissionGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the scheme permission is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the value for expand is invalid or the same permission grant is present. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPermissionGrantCall(schemeId, requestBody, expand, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("holder", this.holder);
            requestBody.put("id", this.id);
            requestBody.put("permission", this.permission);
            requestBody.put("self", this.self);
            return requestBody;
        }

        /**
         * Execute createPermissionGrant request
         * @return PermissionGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the scheme permission is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the value for expand is invalid or the same permission grant is present. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionGrant execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PermissionGrant> localVarResp = createPermissionGrantWithHttpInfo(schemeId, requestBody, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPermissionGrant request with HTTP info returned
         * @return ApiResponse&lt;PermissionGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the scheme permission is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the value for expand is invalid or the same permission grant is present. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionGrant> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPermissionGrantWithHttpInfo(schemeId, requestBody, expand);
        }

        /**
         * Execute createPermissionGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the scheme permission is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the value for expand is invalid or the same permission grant is present. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionGrant> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createPermissionGrantAsync(schemeId, requestBody, expand, _callback);
        }
    }

    /**
     * Create permission grant
     * Creates a permission grant in a permission scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the permission scheme in which to create a new permission grant. (required)
     * @param requestBody The permission grant to create. (required)
     * @return CreatePermissionGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the scheme permission is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the value for expand is invalid or the same permission grant is present. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePermissionGrantRequestBuilder createPermissionGrant(Long schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        return new CreatePermissionGrantRequestBuilder(schemeId);
    }
    private okhttp3.Call createSchemeCall(Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemeValidateBeforeCall(Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createScheme(Async)");
        }

        return createSchemeCall(requestBody, expand, _callback);

    }


    private ApiResponse<PermissionScheme> createSchemeWithHttpInfo(Map<String, Object> requestBody, String expand) throws ApiException {
        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(requestBody, expand, null);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSchemeAsync(Map<String, Object> requestBody, String expand, final ApiCallback<PermissionScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(requestBody, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSchemeRequestBuilder {
        private final String name;
        private String description;
        private String expand;
        private Long id;
        private List<PermissionGrant> permissions;
        private Scope scope;
        private URI self;
        private String expand;

        private CreateSchemeRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description A description for the permission scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set expand
         * @param expand The expand options available for the permission scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the permission scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder permissions(List<PermissionGrant> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder scope(Scope scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the permission scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for createScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the permission scheme is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSchemeCall(requestBody, expand, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("expand", this.expand);
            requestBody.put("id", this.id);
            requestBody.put("name", this.name);
            requestBody.put("permissions", this.permissions);
            requestBody.put("scope", this.scope);
            requestBody.put("self", this.self);
            return requestBody;
        }

        /**
         * Execute createScheme request
         * @return PermissionScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the permission scheme is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionScheme execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PermissionScheme> localVarResp = createSchemeWithHttpInfo(requestBody, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScheme request with HTTP info returned
         * @return ApiResponse&lt;PermissionScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the permission scheme is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionScheme> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSchemeWithHttpInfo(requestBody, expand);
        }

        /**
         * Execute createScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the permission scheme is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionScheme> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createSchemeAsync(requestBody, expand, _callback);
        }
    }

    /**
     * Create permission scheme
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param requestBody The permission scheme to create. (required)
     * @return CreateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the permission scheme is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSchemeRequestBuilder createScheme(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateSchemeRequestBuilder(name);
    }
    private okhttp3.Call deletePermissionGrantCall(Long schemeId, Long permissionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermissionGrantValidateBeforeCall(Long schemeId, Long permissionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling deletePermissionGrant(Async)");
        }

        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling deletePermissionGrant(Async)");
        }

        return deletePermissionGrantCall(schemeId, permissionId, _callback);

    }


    private ApiResponse<Void> deletePermissionGrantWithHttpInfo(Long schemeId, Long permissionId) throws ApiException {
        okhttp3.Call localVarCall = deletePermissionGrantValidateBeforeCall(schemeId, permissionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePermissionGrantAsync(Long schemeId, Long permissionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermissionGrantValidateBeforeCall(schemeId, permissionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePermissionGrantRequestBuilder {
        private final Long schemeId;
        private final Long permissionId;

        private DeletePermissionGrantRequestBuilder(Long schemeId, Long permissionId) {
            this.schemeId = schemeId;
            this.permissionId = permissionId;
        }

        /**
         * Build call for deletePermissionGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission grant is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if permission grant with the provided ID is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePermissionGrantCall(schemeId, permissionId, _callback);
        }


        /**
         * Execute deletePermissionGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission grant is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if permission grant with the provided ID is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePermissionGrantWithHttpInfo(schemeId, permissionId);
        }

        /**
         * Execute deletePermissionGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission grant is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if permission grant with the provided ID is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePermissionGrantWithHttpInfo(schemeId, permissionId);
        }

        /**
         * Execute deletePermissionGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission grant is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if permission grant with the provided ID is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePermissionGrantAsync(schemeId, permissionId, _callback);
        }
    }

    /**
     * Delete permission scheme grant
     * Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the permission scheme to delete the permission grant from. (required)
     * @param permissionId The ID of the permission grant to delete. (required)
     * @return DeletePermissionGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the permission grant is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if permission grant with the provided ID is not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePermissionGrantRequestBuilder deletePermissionGrant(Long schemeId, Long permissionId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
        return new DeletePermissionGrantRequestBuilder(schemeId, permissionId);
    }
    private okhttp3.Call deleteSchemeCall(Long schemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeValidateBeforeCall(Long schemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling deleteScheme(Async)");
        }

        return deleteSchemeCall(schemeId, _callback);

    }


    private ApiResponse<Void> deleteSchemeWithHttpInfo(Long schemeId) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(schemeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSchemeAsync(Long schemeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(schemeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSchemeRequestBuilder {
        private final Long schemeId;

        private DeleteSchemeRequestBuilder(Long schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Build call for deleteScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeCall(schemeId, _callback);
        }


        /**
         * Execute deleteScheme request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSchemeWithHttpInfo(schemeId);
        }

        /**
         * Execute deleteScheme request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSchemeWithHttpInfo(schemeId);
        }

        /**
         * Execute deleteScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the permission scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSchemeAsync(schemeId, _callback);
        }
    }

    /**
     * Delete permission scheme
     * Deletes a permission scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the permission scheme being deleted. (required)
     * @return DeleteSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the permission scheme is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeRequestBuilder deleteScheme(Long schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        return new DeleteSchemeRequestBuilder(schemeId);
    }
    private okhttp3.Call getAllCall(String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String expand, final ApiCallback _callback) throws ApiException {
        return getAllCall(expand, _callback);

    }


    private ApiResponse<PermissionSchemes> getAllWithHttpInfo(String expand) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(expand, null);
        Type localVarReturnType = new TypeToken<PermissionSchemes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String expand, final ApiCallback<PermissionSchemes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionSchemes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String expand;

        private GetAllRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(expand, _callback);
        }


        /**
         * Execute getAll request
         * @return PermissionSchemes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionSchemes execute() throws ApiException {
            ApiResponse<PermissionSchemes> localVarResp = getAllWithHttpInfo(expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;PermissionSchemes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionSchemes> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(expand);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionSchemes> _callback) throws ApiException {
            return getAllAsync(expand, _callback);
        }
    }

    /**
     * Get all permission schemes
     * Returns all permission schemes.  ### About permission schemes and grants ###  A permission scheme is a collection of permission grants. A permission grant consists of a &#x60;holder&#x60; and a &#x60;permission&#x60;.  #### Holder object ####  The &#x60;holder&#x60; object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is &#x60;\&quot;type\&quot;: \&quot;group\&quot;&#x60;, and the parameter is the group name, &#x60;\&quot;parameter\&quot;: \&quot;Teams in space administrators\&quot;&#x60; and the value is group ID, &#x60;\&quot;value\&quot;: \&quot;ca85fac0-d974-40ca-a615-7af99c48d24f\&quot;&#x60;.  The &#x60;holder&#x60; object is defined by the following properties:   *  &#x60;type&#x60; Identifies the user or group (see the list of types below).  *  &#x60;parameter&#x60; As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The value of this property depends on the &#x60;type&#x60;. For example, if the &#x60;type&#x60; is a group, then you need to specify the group name.  *  &#x60;value&#x60; The value of this property depends on the &#x60;type&#x60;. If the &#x60;type&#x60; is a group, then you need to specify the group ID. For other &#x60;type&#x60; it has the same value as &#x60;parameter&#x60;  The following &#x60;types&#x60; are available. The expected values for &#x60;parameter&#x60; and &#x60;value&#x60; are given in parentheses (some types may not have a &#x60;parameter&#x60; or &#x60;value&#x60;):   *  &#x60;anyone&#x60; Grant for anonymous users.  *  &#x60;applicationRole&#x60; Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.  *  &#x60;assignee&#x60; Grant for the user currently assigned to an issue.  *  &#x60;group&#x60; Grant for the specified group (&#x60;parameter&#x60; : group name, &#x60;value&#x60; : group ID).  *  &#x60;groupCustomField&#x60; Grant for a user in the group selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  *  &#x60;projectLead&#x60; Grant for a project lead.  *  &#x60;projectRole&#x60; Grant for the specified project role (&#x60;parameter&#x60; :project role ID, &#x60;value&#x60; : project role ID).  *  &#x60;reporter&#x60; Grant for the user who reported the issue.  *  &#x60;sd.customer.portal.only&#x60; Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.  *  &#x60;user&#x60; Grant for the specified user (&#x60;parameter&#x60; : user ID - historically this was the userkey but that is deprecated and the account ID should be used, &#x60;value&#x60; : user ID).  *  &#x60;userCustomField&#x60; Grant for a user selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  #### Built-in permissions ####  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**   *  &#x60;ADMINISTER_PROJECTS&#x60;  *  &#x60;BROWSE_PROJECTS&#x60;  *  &#x60;MANAGE_SPRINTS_PERMISSION&#x60; (Jira Software only)  *  &#x60;SERVICEDESK_AGENT&#x60; (Jira Service Desk only)  *  &#x60;VIEW_DEV_TOOLS&#x60; (Jira Software only)  *  &#x60;VIEW_READONLY_WORKFLOW&#x60;  **Issue permissions**   *  &#x60;ASSIGNABLE_USER&#x60;  *  &#x60;ASSIGN_ISSUES&#x60;  *  &#x60;CLOSE_ISSUES&#x60;  *  &#x60;CREATE_ISSUES&#x60;  *  &#x60;DELETE_ISSUES&#x60;  *  &#x60;EDIT_ISSUES&#x60;  *  &#x60;LINK_ISSUES&#x60;  *  &#x60;MODIFY_REPORTER&#x60;  *  &#x60;MOVE_ISSUES&#x60;  *  &#x60;RESOLVE_ISSUES&#x60;  *  &#x60;SCHEDULE_ISSUES&#x60;  *  &#x60;SET_ISSUE_SECURITY&#x60;  *  &#x60;TRANSITION_ISSUES&#x60;  **Voters and watchers permissions**   *  &#x60;MANAGE_WATCHERS&#x60;  *  &#x60;VIEW_VOTERS_AND_WATCHERS&#x60;  **Comments permissions**   *  &#x60;ADD_COMMENTS&#x60;  *  &#x60;DELETE_ALL_COMMENTS&#x60;  *  &#x60;DELETE_OWN_COMMENTS&#x60;  *  &#x60;EDIT_ALL_COMMENTS&#x60;  *  &#x60;EDIT_OWN_COMMENTS&#x60;  **Attachments permissions**   *  &#x60;CREATE_ATTACHMENTS&#x60;  *  &#x60;DELETE_ALL_ATTACHMENTS&#x60;  *  &#x60;DELETE_OWN_ATTACHMENTS&#x60;  **Time tracking permissions**   *  &#x60;DELETE_ALL_WORKLOGS&#x60;  *  &#x60;DELETE_OWN_WORKLOGS&#x60;  *  &#x60;EDIT_ALL_WORKLOGS&#x60;  *  &#x60;EDIT_OWN_WORKLOGS&#x60;  *  &#x60;WORK_ON_ISSUES&#x60;  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getAllGrantsCall(Long schemeId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}/permission"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGrantsValidateBeforeCall(Long schemeId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling getAllGrants(Async)");
        }

        return getAllGrantsCall(schemeId, expand, _callback);

    }


    private ApiResponse<PermissionGrants> getAllGrantsWithHttpInfo(Long schemeId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getAllGrantsValidateBeforeCall(schemeId, expand, null);
        Type localVarReturnType = new TypeToken<PermissionGrants>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllGrantsAsync(Long schemeId, String expand, final ApiCallback<PermissionGrants> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGrantsValidateBeforeCall(schemeId, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionGrants>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllGrantsRequestBuilder {
        private final Long schemeId;
        private String expand;

        private GetAllGrantsRequestBuilder(Long schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information. (optional)
         * @return GetAllGrantsRequestBuilder
         */
        public GetAllGrantsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getAllGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission schemes is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllGrantsCall(schemeId, expand, _callback);
        }


        /**
         * Execute getAllGrants request
         * @return PermissionGrants
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission schemes is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionGrants execute() throws ApiException {
            ApiResponse<PermissionGrants> localVarResp = getAllGrantsWithHttpInfo(schemeId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllGrants request with HTTP info returned
         * @return ApiResponse&lt;PermissionGrants&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission schemes is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionGrants> executeWithHttpInfo() throws ApiException {
            return getAllGrantsWithHttpInfo(schemeId, expand);
        }

        /**
         * Execute getAllGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission schemes is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionGrants> _callback) throws ApiException {
            return getAllGrantsAsync(schemeId, expand, _callback);
        }
    }

    /**
     * Get permission scheme grants
     * Returns all permission grants for a permission scheme.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme. (required)
     * @return GetAllGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the permission schemes is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllGrantsRequestBuilder getAllGrants(Long schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        return new GetAllGrantsRequestBuilder(schemeId);
    }
    private okhttp3.Call getPermissionSchemeGrantCall(Long schemeId, Long permissionId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()))
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionSchemeGrantValidateBeforeCall(Long schemeId, Long permissionId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling getPermissionSchemeGrant(Async)");
        }

        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling getPermissionSchemeGrant(Async)");
        }

        return getPermissionSchemeGrantCall(schemeId, permissionId, expand, _callback);

    }


    private ApiResponse<PermissionGrant> getPermissionSchemeGrantWithHttpInfo(Long schemeId, Long permissionId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getPermissionSchemeGrantValidateBeforeCall(schemeId, permissionId, expand, null);
        Type localVarReturnType = new TypeToken<PermissionGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermissionSchemeGrantAsync(Long schemeId, Long permissionId, String expand, final ApiCallback<PermissionGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionSchemeGrantValidateBeforeCall(schemeId, permissionId, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPermissionSchemeGrantRequestBuilder {
        private final Long schemeId;
        private final Long permissionId;
        private String expand;

        private GetPermissionSchemeGrantRequestBuilder(Long schemeId, Long permissionId) {
            this.schemeId = schemeId;
            this.permissionId = permissionId;
        }

        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
         * @return GetPermissionSchemeGrantRequestBuilder
         */
        public GetPermissionSchemeGrantRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getPermissionSchemeGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPermissionSchemeGrantCall(schemeId, permissionId, expand, _callback);
        }


        /**
         * Execute getPermissionSchemeGrant request
         * @return PermissionGrant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionGrant execute() throws ApiException {
            ApiResponse<PermissionGrant> localVarResp = getPermissionSchemeGrantWithHttpInfo(schemeId, permissionId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPermissionSchemeGrant request with HTTP info returned
         * @return ApiResponse&lt;PermissionGrant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionGrant> executeWithHttpInfo() throws ApiException {
            return getPermissionSchemeGrantWithHttpInfo(schemeId, permissionId, expand);
        }

        /**
         * Execute getPermissionSchemeGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionGrant> _callback) throws ApiException {
            return getPermissionSchemeGrantAsync(schemeId, permissionId, expand, _callback);
        }
    }

    /**
     * Get permission scheme grant
     * Returns a permission grant.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme. (required)
     * @param permissionId The ID of the permission grant. (required)
     * @return GetPermissionSchemeGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionSchemeGrantRequestBuilder getPermissionSchemeGrant(Long schemeId, Long permissionId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
        return new GetPermissionSchemeGrantRequestBuilder(schemeId, permissionId);
    }
    private okhttp3.Call getSchemeCall(Long schemeId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemeValidateBeforeCall(Long schemeId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling getScheme(Async)");
        }

        return getSchemeCall(schemeId, expand, _callback);

    }


    private ApiResponse<PermissionScheme> getSchemeWithHttpInfo(Long schemeId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getSchemeValidateBeforeCall(schemeId, expand, null);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemeAsync(Long schemeId, String expand, final ApiCallback<PermissionScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemeValidateBeforeCall(schemeId, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemeRequestBuilder {
        private final Long schemeId;
        private String expand;

        private GetSchemeRequestBuilder(Long schemeId) {
            this.schemeId = schemeId;
        }

        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
         * @return GetSchemeRequestBuilder
         */
        public GetSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemeCall(schemeId, expand, _callback);
        }


        /**
         * Execute getScheme request
         * @return PermissionScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionScheme execute() throws ApiException {
            ApiResponse<PermissionScheme> localVarResp = getSchemeWithHttpInfo(schemeId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScheme request with HTTP info returned
         * @return ApiResponse&lt;PermissionScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionScheme> executeWithHttpInfo() throws ApiException {
            return getSchemeWithHttpInfo(schemeId, expand);
        }

        /**
         * Execute getScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionScheme> _callback) throws ApiException {
            return getSchemeAsync(schemeId, expand, _callback);
        }
    }

    /**
     * Get permission scheme
     * Returns a permission scheme.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     * @param schemeId The ID of the permission scheme to return. (required)
     * @return GetSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the permission scheme is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemeRequestBuilder getScheme(Long schemeId) throws IllegalArgumentException {
        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        return new GetSchemeRequestBuilder(schemeId);
    }
    private okhttp3.Call updateSchemeCall(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissionscheme/{schemeId}"
            .replace("{" + "schemeId" + "}", localVarApiClient.escapeString(schemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeValidateBeforeCall(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling updateScheme(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateScheme(Async)");
        }

        return updateSchemeCall(schemeId, requestBody, expand, _callback);

    }


    private ApiResponse<PermissionScheme> updateSchemeWithHttpInfo(Long schemeId, Map<String, Object> requestBody, String expand) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(schemeId, requestBody, expand, null);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeAsync(Long schemeId, Map<String, Object> requestBody, String expand, final ApiCallback<PermissionScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(schemeId, requestBody, expand, _callback);
        Type localVarReturnType = new TypeToken<PermissionScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeRequestBuilder {
        private final String name;
        private final Long schemeId;
        private String description;
        private String expand;
        private Long id;
        private List<PermissionGrant> permissions;
        private Scope scope;
        private URI self;
        private String expand;

        private UpdateSchemeRequestBuilder(String name, Long schemeId) {
            this.name = name;
            this.schemeId = schemeId;
        }

        /**
         * Set description
         * @param description A description for the permission scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set expand
         * @param expand The expand options available for the permission scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the permission scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder permissions(List<PermissionGrant> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder scope(Scope scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the permission scheme. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for updateScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the scheme is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeCall(schemeId, requestBody, expand, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("expand", this.expand);
            requestBody.put("id", this.id);
            requestBody.put("name", this.name);
            requestBody.put("permissions", this.permissions);
            requestBody.put("scope", this.scope);
            requestBody.put("self", this.self);
            return requestBody;
        }

        /**
         * Execute updateScheme request
         * @return PermissionScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the scheme is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PermissionScheme execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<PermissionScheme> localVarResp = updateSchemeWithHttpInfo(schemeId, requestBody, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme request with HTTP info returned
         * @return ApiResponse&lt;PermissionScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the scheme is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionScheme> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeWithHttpInfo(schemeId, requestBody, expand);
        }

        /**
         * Execute updateScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the scheme is updated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionScheme> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeAsync(schemeId, requestBody, expand, _callback);
        }
    }

    /**
     * Update permission scheme
     * Updates a permission scheme. Below are some important things to note when using this resource:   *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.  *  If you want to update only the name and description, then do not send a permissions list in the request.  *  Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](https://dac-static.atlassian.com) or [Delete permission scheme entity](https://dac-static.atlassian.com).  See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param schemeId The ID of the permission scheme to update. (required)
     * @param requestBody  (required)
     * @return UpdateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the scheme is updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the permission scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeRequestBuilder updateScheme(String name, Long schemeId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (schemeId == null) throw new IllegalArgumentException("\"schemeId\" is required but got null");
        return new UpdateSchemeRequestBuilder(name, schemeId);
    }
}
