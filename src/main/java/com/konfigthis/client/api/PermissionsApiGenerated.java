/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkPermissionGrants;
import com.konfigthis.client.model.BulkPermissionsRequestBean;
import com.konfigthis.client.model.BulkProjectPermissions;
import com.konfigthis.client.model.Permissions;
import com.konfigthis.client.model.PermissionsKeysBean;
import com.konfigthis.client.model.PermittedProjects;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PermissionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllPermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllPermissionsCall(_callback);

    }


    private ApiResponse<Permissions> getAllPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPermissionsAsync(final ApiCallback<Permissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPermissionsRequestBuilder {

        private GetAllPermissionsRequestBuilder() {
        }

        /**
         * Build call for getAllPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPermissionsCall(_callback);
        }


        /**
         * Execute getAllPermissions request
         * @return Permissions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public Permissions execute() throws ApiException {
            ApiResponse<Permissions> localVarResp = getAllPermissionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPermissions request with HTTP info returned
         * @return ApiResponse&lt;Permissions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Permissions> executeWithHttpInfo() throws ApiException {
            return getAllPermissionsWithHttpInfo();
        }

        /**
         * Execute getAllPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Permissions> _callback) throws ApiException {
            return getAllPermissionsAsync(_callback);
        }
    }

    /**
     * Get all permissions
     * Returns all permissions, including:   *  global permissions.  *  project permissions.  *  global permissions added by plugins.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return GetAllPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPermissionsRequestBuilder getAllPermissions() throws IllegalArgumentException {
        return new GetAllPermissionsRequestBuilder();
    }
    private okhttp3.Call getBulkPermissionsCall(BulkPermissionsRequestBean bulkPermissionsRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkPermissionsRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissions/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkPermissionsValidateBeforeCall(BulkPermissionsRequestBean bulkPermissionsRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkPermissionsRequestBean' is set
        if (bulkPermissionsRequestBean == null) {
            throw new ApiException("Missing the required parameter 'bulkPermissionsRequestBean' when calling getBulkPermissions(Async)");
        }

        return getBulkPermissionsCall(bulkPermissionsRequestBean, _callback);

    }


    private ApiResponse<BulkPermissionGrants> getBulkPermissionsWithHttpInfo(BulkPermissionsRequestBean bulkPermissionsRequestBean) throws ApiException {
        okhttp3.Call localVarCall = getBulkPermissionsValidateBeforeCall(bulkPermissionsRequestBean, null);
        Type localVarReturnType = new TypeToken<BulkPermissionGrants>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBulkPermissionsAsync(BulkPermissionsRequestBean bulkPermissionsRequestBean, final ApiCallback<BulkPermissionGrants> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkPermissionsValidateBeforeCall(bulkPermissionsRequestBean, _callback);
        Type localVarReturnType = new TypeToken<BulkPermissionGrants>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBulkPermissionsRequestBuilder {
        private String accountId;
        private Set<String> globalPermissions;
        private Set<BulkProjectPermissions> projectPermissions;

        private GetBulkPermissionsRequestBuilder() {
        }

        /**
         * Set accountId
         * @param accountId The account ID of a user. (optional)
         * @return GetBulkPermissionsRequestBuilder
         */
        public GetBulkPermissionsRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set globalPermissions
         * @param globalPermissions Global permissions to look up. (optional)
         * @return GetBulkPermissionsRequestBuilder
         */
        public GetBulkPermissionsRequestBuilder globalPermissions(Set<String> globalPermissions) {
            this.globalPermissions = globalPermissions;
            return this;
        }
        
        /**
         * Set projectPermissions
         * @param projectPermissions Project permissions with associated projects and issues to look up. (optional)
         * @return GetBulkPermissionsRequestBuilder
         */
        public GetBulkPermissionsRequestBuilder projectPermissions(Set<BulkProjectPermissions> projectPermissions) {
            this.projectPermissions = projectPermissions;
            return this;
        }
        
        /**
         * Build call for getBulkPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkPermissionsRequestBean bulkPermissionsRequestBean = buildBodyParams();
            return getBulkPermissionsCall(bulkPermissionsRequestBean, _callback);
        }

        private BulkPermissionsRequestBean buildBodyParams() {
            BulkPermissionsRequestBean bulkPermissionsRequestBean = new BulkPermissionsRequestBean();
            bulkPermissionsRequestBean.accountId(this.accountId);
            bulkPermissionsRequestBean.globalPermissions(this.globalPermissions);
            bulkPermissionsRequestBean.projectPermissions(this.projectPermissions);
            return bulkPermissionsRequestBean;
        }

        /**
         * Execute getBulkPermissions request
         * @return BulkPermissionGrants
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public BulkPermissionGrants execute() throws ApiException {
            BulkPermissionsRequestBean bulkPermissionsRequestBean = buildBodyParams();
            ApiResponse<BulkPermissionGrants> localVarResp = getBulkPermissionsWithHttpInfo(bulkPermissionsRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBulkPermissions request with HTTP info returned
         * @return ApiResponse&lt;BulkPermissionGrants&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BulkPermissionGrants> executeWithHttpInfo() throws ApiException {
            BulkPermissionsRequestBean bulkPermissionsRequestBean = buildBodyParams();
            return getBulkPermissionsWithHttpInfo(bulkPermissionsRequestBean);
        }

        /**
         * Execute getBulkPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BulkPermissionGrants> _callback) throws ApiException {
            BulkPermissionsRequestBean bulkPermissionsRequestBean = buildBodyParams();
            return getBulkPermissionsAsync(bulkPermissionsRequestBean, _callback);
        }
    }

    /**
     * Get bulk permissions
     * Returns:   *  for a list of global permissions, the global permissions granted to a user.  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.  If no account ID is provided, the operation returns details for the logged in user.  Note that:   *  Invalid project and issue IDs are ignored.  *  A maximum of 1000 projects and 1000 issues can be checked.  *  Null values in &#x60;globalPermissions&#x60;, &#x60;projectPermissions&#x60;, &#x60;projectPermissions.projects&#x60;, and &#x60;projectPermissions.issues&#x60; are ignored.  *  Empty strings in &#x60;projectPermissions.permissions&#x60; are ignored.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.   *  **Classic**: &#x60;read:jira-work&#x60;  *  **Granular**: &#x60;read:permission:jira&#x60;  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn&#39;t apply to calls made using AP.request() in a browser.
     * @param bulkPermissionsRequestBean Details of the permissions to check. (required)
     * @return GetBulkPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetBulkPermissionsRequestBuilder getBulkPermissions() throws IllegalArgumentException {
        return new GetBulkPermissionsRequestBuilder();
    }
    private okhttp3.Call getPermittedProjectsCall(PermissionsKeysBean permissionsKeysBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsKeysBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/permissions/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermittedProjectsValidateBeforeCall(PermissionsKeysBean permissionsKeysBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionsKeysBean' is set
        if (permissionsKeysBean == null) {
            throw new ApiException("Missing the required parameter 'permissionsKeysBean' when calling getPermittedProjects(Async)");
        }

        return getPermittedProjectsCall(permissionsKeysBean, _callback);

    }


    private ApiResponse<PermittedProjects> getPermittedProjectsWithHttpInfo(PermissionsKeysBean permissionsKeysBean) throws ApiException {
        okhttp3.Call localVarCall = getPermittedProjectsValidateBeforeCall(permissionsKeysBean, null);
        Type localVarReturnType = new TypeToken<PermittedProjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermittedProjectsAsync(PermissionsKeysBean permissionsKeysBean, final ApiCallback<PermittedProjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermittedProjectsValidateBeforeCall(permissionsKeysBean, _callback);
        Type localVarReturnType = new TypeToken<PermittedProjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPermittedProjectsRequestBuilder {
        private final List<String> permissions;

        private GetPermittedProjectsRequestBuilder(List<String> permissions) {
            this.permissions = permissions;
        }

        /**
         * Build call for getPermittedProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a project permission is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PermissionsKeysBean permissionsKeysBean = buildBodyParams();
            return getPermittedProjectsCall(permissionsKeysBean, _callback);
        }

        private PermissionsKeysBean buildBodyParams() {
            PermissionsKeysBean permissionsKeysBean = new PermissionsKeysBean();
            permissionsKeysBean.permissions(this.permissions);
            return permissionsKeysBean;
        }

        /**
         * Execute getPermittedProjects request
         * @return PermittedProjects
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a project permission is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public PermittedProjects execute() throws ApiException {
            PermissionsKeysBean permissionsKeysBean = buildBodyParams();
            ApiResponse<PermittedProjects> localVarResp = getPermittedProjectsWithHttpInfo(permissionsKeysBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPermittedProjects request with HTTP info returned
         * @return ApiResponse&lt;PermittedProjects&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a project permission is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermittedProjects> executeWithHttpInfo() throws ApiException {
            PermissionsKeysBean permissionsKeysBean = buildBodyParams();
            return getPermittedProjectsWithHttpInfo(permissionsKeysBean);
        }

        /**
         * Execute getPermittedProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a project permission is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermittedProjects> _callback) throws ApiException {
            PermissionsKeysBean permissionsKeysBean = buildBodyParams();
            return getPermittedProjectsAsync(permissionsKeysBean, _callback);
        }
    }

    /**
     * Get permitted projects
     * Returns all the projects where the user is granted a list of project permissions.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param permissionsKeysBean  (required)
     * @return GetPermittedProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if a project permission is not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public GetPermittedProjectsRequestBuilder getPermittedProjects(List<String> permissions) throws IllegalArgumentException {
        if (permissions == null) throw new IllegalArgumentException("\"permissions\" is required but got null");
        return new GetPermittedProjectsRequestBuilder(permissions);
    }
    private okhttp3.Call getUserPermissionsCall(String projectKey, String projectId, String issueKey, String issueId, String permissions, String projectUuid, String projectConfigurationUuid, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/mypermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (issueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueKey", issueKey));
        }

        if (issueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueId", issueId));
        }

        if (permissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permissions", permissions));
        }

        if (projectUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectUuid", projectUuid));
        }

        if (projectConfigurationUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectConfigurationUuid", projectConfigurationUuid));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commentId", commentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPermissionsValidateBeforeCall(String projectKey, String projectId, String issueKey, String issueId, String permissions, String projectUuid, String projectConfigurationUuid, String commentId, final ApiCallback _callback) throws ApiException {
        return getUserPermissionsCall(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId, _callback);

    }


    private ApiResponse<Permissions> getUserPermissionsWithHttpInfo(String projectKey, String projectId, String issueKey, String issueId, String permissions, String projectUuid, String projectConfigurationUuid, String commentId) throws ApiException {
        okhttp3.Call localVarCall = getUserPermissionsValidateBeforeCall(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId, null);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPermissionsAsync(String projectKey, String projectId, String issueKey, String issueId, String permissions, String projectUuid, String projectConfigurationUuid, String commentId, final ApiCallback<Permissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPermissionsValidateBeforeCall(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId, _callback);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPermissionsRequestBuilder {
        private String projectKey;
        private String projectId;
        private String issueKey;
        private String issueId;
        private String permissions;
        private String projectUuid;
        private String projectConfigurationUuid;
        private String commentId;

        private GetUserPermissionsRequestBuilder() {
        }

        /**
         * Set projectKey
         * @param projectKey The key of project. Ignored if &#x60;projectId&#x60; is provided. (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder projectKey(String projectKey) {
            this.projectKey = projectKey;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of project. (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder projectId(String projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set issueKey
         * @param issueKey The key of the issue. Ignored if &#x60;issueId&#x60; is provided. (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder issueKey(String issueKey) {
            this.issueKey = issueKey;
            return this;
        }
        
        /**
         * Set issueId
         * @param issueId The ID of the issue. (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder issueId(String issueId) {
            this.issueId = issueId;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](https://dac-static.atlassian.com). (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder permissions(String permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set projectUuid
         * @param projectUuid  (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder projectUuid(String projectUuid) {
            this.projectUuid = projectUuid;
            return this;
        }
        
        /**
         * Set projectConfigurationUuid
         * @param projectConfigurationUuid  (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder projectConfigurationUuid(String projectConfigurationUuid) {
            this.projectConfigurationUuid = projectConfigurationUuid;
            return this;
        }
        
        /**
         * Set commentId
         * @param commentId The ID of the comment. (optional)
         * @return GetUserPermissionsRequestBuilder
         */
        public GetUserPermissionsRequestBuilder commentId(String commentId) {
            this.commentId = commentId;
            return this;
        }
        
        /**
         * Build call for getUserPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPermissionsCall(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId, _callback);
        }


        /**
         * Execute getUserPermissions request
         * @return Permissions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public Permissions execute() throws ApiException {
            ApiResponse<Permissions> localVarResp = getUserPermissionsWithHttpInfo(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPermissions request with HTTP info returned
         * @return ApiResponse&lt;Permissions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Permissions> executeWithHttpInfo() throws ApiException {
            return getUserPermissionsWithHttpInfo(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId);
        }

        /**
         * Execute getUserPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Permissions> _callback) throws ApiException {
            return getUserPermissionsAsync(projectKey, projectId, issueKey, issueId, permissions, projectUuid, projectConfigurationUuid, commentId, _callback);
        }
    }

    /**
     * Get my permissions
     * Returns a list of permissions indicating which permissions the user has. Details of the user&#39;s permissions can be obtained in a global, project, issue or comment context.  The user is reported as having a project permission:   *  in the global context, if the user has the project permission in any project.  *  for a project, where the project permission is determined using issue data, if the user meets the permission&#39;s criteria for any issue in the project. Otherwise, if the user has the project permission in the project.  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment&#39;s parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a &#x60;commentId&#x60; is provided whose &#x60;permissions&#x60; does not equal BROWSE\\_PROJECTS, a 400 error will be returned.  This means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.  Global permissions are unaffected by context.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return GetUserPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPermissionsRequestBuilder getUserPermissions() throws IllegalArgumentException {
        return new GetUserPermissionsRequestBuilder();
    }
}
