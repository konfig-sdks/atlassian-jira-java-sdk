/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Avatar;
import com.konfigthis.client.model.ProjectAvatars;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectAvatarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectAvatarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectAvatarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteAvatarCall(String projectIdOrKey, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/avatar/{id}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAvatarValidateBeforeCall(String projectIdOrKey, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling deleteAvatar(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAvatar(Async)");
        }

        return deleteAvatarCall(projectIdOrKey, id, _callback);

    }


    private ApiResponse<Void> deleteAvatarWithHttpInfo(String projectIdOrKey, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(projectIdOrKey, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAvatarAsync(String projectIdOrKey, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(projectIdOrKey, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAvatarRequestBuilder {
        private final String projectIdOrKey;
        private final Long id;

        private DeleteAvatarRequestBuilder(String projectIdOrKey, Long id) {
            this.projectIdOrKey = projectIdOrKey;
            this.id = id;
        }

        /**
         * Build call for deleteAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the avatar is a system avatar or the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAvatarCall(projectIdOrKey, id, _callback);
        }


        /**
         * Execute deleteAvatar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the avatar is a system avatar or the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAvatarWithHttpInfo(projectIdOrKey, id);
        }

        /**
         * Execute deleteAvatar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the avatar is a system avatar or the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAvatarWithHttpInfo(projectIdOrKey, id);
        }

        /**
         * Execute deleteAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the avatar is a system avatar or the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAvatarAsync(projectIdOrKey, id, _callback);
        }
    }

    /**
     * Delete project avatar
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectIdOrKey The project ID or (case-sensitive) key. (required)
     * @param id The ID of the avatar. (required)
     * @return DeleteAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the avatar is a system avatar or the user does not have permission to administer the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAvatarRequestBuilder deleteAvatar(String projectIdOrKey, Long id) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteAvatarRequestBuilder(projectIdOrKey, id);
    }
    private okhttp3.Call getAllAvatarsCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/avatars"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAvatarsValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getAllAvatars(Async)");
        }

        return getAllAvatarsCall(projectIdOrKey, _callback);

    }


    private ApiResponse<ProjectAvatars> getAllAvatarsWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getAllAvatarsValidateBeforeCall(projectIdOrKey, null);
        Type localVarReturnType = new TypeToken<ProjectAvatars>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAvatarsAsync(String projectIdOrKey, final ApiCallback<ProjectAvatars> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAvatarsValidateBeforeCall(projectIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<ProjectAvatars>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllAvatarsRequestBuilder {
        private final String projectIdOrKey;

        private GetAllAvatarsRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for getAllAvatars
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAvatarsCall(projectIdOrKey, _callback);
        }


        /**
         * Execute getAllAvatars request
         * @return ProjectAvatars
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectAvatars execute() throws ApiException {
            ApiResponse<ProjectAvatars> localVarResp = getAllAvatarsWithHttpInfo(projectIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllAvatars request with HTTP info returned
         * @return ApiResponse&lt;ProjectAvatars&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectAvatars> executeWithHttpInfo() throws ApiException {
            return getAllAvatarsWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute getAllAvatars request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectAvatars> _callback) throws ApiException {
            return getAllAvatarsAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Get all project avatars
     * Returns all project avatars, grouped by system and custom avatars.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @return GetAllAvatarsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllAvatarsRequestBuilder getAllAvatars(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetAllAvatarsRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call setAvatarCall(String projectIdOrKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/avatar"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAvatarValidateBeforeCall(String projectIdOrKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling setAvatar(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setAvatar(Async)");
        }

        return setAvatarCall(projectIdOrKey, requestBody, _callback);

    }


    private ApiResponse<Object> setAvatarWithHttpInfo(String projectIdOrKey, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setAvatarValidateBeforeCall(projectIdOrKey, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAvatarAsync(String projectIdOrKey, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAvatarValidateBeforeCall(projectIdOrKey, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetAvatarRequestBuilder {
        private final String id;
        private final String projectIdOrKey;
        private String fileName;
        private Boolean isDeletable;
        private Boolean isSelected;
        private Boolean isSystemAvatar;
        private String owner;
        private Map<String, URI> urls;

        private SetAvatarRequestBuilder(String id, String projectIdOrKey) {
            this.id = id;
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set fileName
         * @param fileName The file name of the avatar icon. Returned for system avatars. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder fileName(String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        /**
         * Set isDeletable
         * @param isDeletable Whether the avatar can be deleted. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder isDeletable(Boolean isDeletable) {
            this.isDeletable = isDeletable;
            return this;
        }
        
        /**
         * Set isSelected
         * @param isSelected Whether the avatar is used in Jira. For example, shown as a project&#39;s avatar. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder isSelected(Boolean isSelected) {
            this.isSelected = isSelected;
            return this;
        }
        
        /**
         * Set isSystemAvatar
         * @param isSystemAvatar Whether the avatar is a system avatar. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder isSystemAvatar(Boolean isSystemAvatar) {
            this.isSystemAvatar = isSystemAvatar;
            return this;
        }
        
        /**
         * Set owner
         * @param owner The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder owner(String owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set urls
         * @param urls The list of avatar icon URLs. (optional)
         * @return SetAvatarRequestBuilder
         */
        public SetAvatarRequestBuilder urls(Map<String, URI> urls) {
            this.urls = urls;
            return this;
        }
        
        /**
         * Build call for setAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setAvatarCall(projectIdOrKey, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("fileName", this.fileName);
            requestBody.put("id", this.id);
            requestBody.put("isDeletable", this.isDeletable);
            requestBody.put("isSelected", this.isSelected);
            requestBody.put("isSystemAvatar", this.isSystemAvatar);
            requestBody.put("owner", this.owner);
            requestBody.put("urls", this.urls);
            return requestBody;
        }

        /**
         * Execute setAvatar request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = setAvatarWithHttpInfo(projectIdOrKey, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setAvatar request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setAvatarWithHttpInfo(projectIdOrKey, requestBody);
        }

        /**
         * Execute setAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return setAvatarAsync(projectIdOrKey, requestBody, _callback);
        }
    }

    /**
     * Set project avatar
     * Sets the avatar displayed for a project.  Use [Load project avatar](https://dac-static.atlassian.com) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @param requestBody  (required)
     * @return SetAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project or avatar is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
     </table>
     */
    public SetAvatarRequestBuilder setAvatar(String id, String projectIdOrKey) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new SetAvatarRequestBuilder(id, projectIdOrKey);
    }
    private okhttp3.Call setAvatar_0Call(String projectIdOrKey, Object body, Integer x, Integer y, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/avatar2"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (x != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("y", y));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAvatar_0ValidateBeforeCall(String projectIdOrKey, Object body, Integer x, Integer y, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling setAvatar_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setAvatar_0(Async)");
        }

        return setAvatar_0Call(projectIdOrKey, body, x, y, size, _callback);

    }


    private ApiResponse<Avatar> setAvatar_0WithHttpInfo(String projectIdOrKey, Object body, Integer x, Integer y, Integer size) throws ApiException {
        okhttp3.Call localVarCall = setAvatar_0ValidateBeforeCall(projectIdOrKey, body, x, y, size, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAvatar_0Async(String projectIdOrKey, Object body, Integer x, Integer y, Integer size, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAvatar_0ValidateBeforeCall(projectIdOrKey, body, x, y, size, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetAvatar0RequestBuilder {
        private final String projectIdOrKey;
        private Integer x;
        private Integer y;
        private Integer size;
        private Object body;

        private SetAvatar0RequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return SetAvatar0RequestBuilder
         */
        public SetAvatar0RequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set x
         * @param x The X coordinate of the top-left corner of the crop region. (optional, default to 0)
         * @return SetAvatar0RequestBuilder
         */
        public SetAvatar0RequestBuilder x(Integer x) {
            this.x = x;
            return this;
        }
        
        /**
         * Set y
         * @param y The Y coordinate of the top-left corner of the crop region. (optional, default to 0)
         * @return SetAvatar0RequestBuilder
         */
        public SetAvatar0RequestBuilder y(Integer y) {
            this.y = y;
            return this;
        }
        
        /**
         * Set size
         * @param size The length of each side of the crop region. (optional, default to 0)
         * @return SetAvatar0RequestBuilder
         */
        public SetAvatar0RequestBuilder size(Integer size) {
            this.size = size;
            return this;
        }
        
        /**
         * Build call for setAvatar_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setAvatar_0Call(projectIdOrKey, body, x, y, size, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setAvatar_0 request
         * @return Avatar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public Avatar execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Avatar> localVarResp = setAvatar_0WithHttpInfo(projectIdOrKey, body, x, y, size);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setAvatar_0 request with HTTP info returned
         * @return ApiResponse&lt;Avatar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Avatar> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setAvatar_0WithHttpInfo(projectIdOrKey, body, x, y, size);
        }

        /**
         * Execute setAvatar_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Avatar> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setAvatar_0Async(projectIdOrKey, body, x, y, size, _callback);
        }
    }

    /**
     * Load project avatar
     * Loads an avatar for a project.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](https://dac-static.atlassian.com).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](https://dac-static.atlassian.com) to set it as the project&#39;s displayed avatar.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @param body  (required)
     * @return SetAvatar0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view the project. </td><td>  -  </td></tr>
     </table>
     */
    public SetAvatar0RequestBuilder setAvatar_0(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new SetAvatar0RequestBuilder(projectIdOrKey);
    }
}
