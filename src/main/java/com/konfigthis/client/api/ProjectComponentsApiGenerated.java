/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ComponentIssuesCount;
import com.konfigthis.client.model.PageBean2ComponentJsonBean;
import com.konfigthis.client.model.PageBeanComponentWithIssueCount;
import com.konfigthis.client.model.ProjectComponent;
import java.net.URI;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectComponentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectComponentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectComponentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createComponentCall(ProjectComponent projectComponent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectComponent;

        // create path and map variables
        String localVarPath = "/rest/api/3/component";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createComponentValidateBeforeCall(ProjectComponent projectComponent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectComponent' is set
        if (projectComponent == null) {
            throw new ApiException("Missing the required parameter 'projectComponent' when calling createComponent(Async)");
        }

        return createComponentCall(projectComponent, _callback);

    }


    private ApiResponse<ProjectComponent> createComponentWithHttpInfo(ProjectComponent projectComponent) throws ApiException {
        okhttp3.Call localVarCall = createComponentValidateBeforeCall(projectComponent, null);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createComponentAsync(ProjectComponent projectComponent, final ApiCallback<ProjectComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = createComponentValidateBeforeCall(projectComponent, _callback);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateComponentRequestBuilder {
        private String description;
        private String ari;
        private User assignee;
        private String assigneeType;
        private String id;
        private Boolean isAssigneeTypeValid;
        private User lead;
        private String leadAccountId;
        private String leadUserName;
        private Map<String, String> metadata;
        private String name;
        private String project;
        private Long projectId;
        private User realAssignee;
        private String realAssigneeType;
        private URI self;

        private CreateComponentRequestBuilder() {
        }

        /**
         * Set description
         * @param description The description for the component. Optional when creating or updating a component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set ari
         * @param ari Compass component&#39;s ID. Can&#39;t be updated. Not required for creating a Project Component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder ari(String ari) {
            this.ari = ari;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder assignee(User assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set assigneeType
         * @param assigneeType The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder assigneeType(String assigneeType) {
            this.assigneeType = assigneeType;
            return this;
        }
        
        /**
         * Set id
         * @param id The unique identifier for the component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set isAssigneeTypeValid
         * @param isAssigneeTypeValid Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder isAssigneeTypeValid(Boolean isAssigneeTypeValid) {
            this.isAssigneeTypeValid = isAssigneeTypeValid;
            return this;
        }
        
        /**
         * Set lead
         * @param lead The user details for the component&#39;s lead user. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder lead(User lead) {
            this.lead = lead;
            return this;
        }
        
        /**
         * Set leadAccountId
         * @param leadAccountId The accountId of the component&#39;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder leadAccountId(String leadAccountId) {
            this.leadAccountId = leadAccountId;
            return this;
        }
        
        /**
         * Set leadUserName
         * @param leadUserName This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder leadUserName(String leadUserName) {
            this.leadUserName = leadUserName;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Compass component&#39;s metadata. Can&#39;t be updated. Not required for creating a Project Component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set name
         * @param name The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set project
         * @param project The key of the project the component is assigned to. Required when creating a component. Can&#39;t be updated. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project the component is assigned to. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set realAssignee
         * @param realAssignee The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder realAssignee(User realAssignee) {
            this.realAssignee = realAssignee;
            return this;
        }
        
        /**
         * Set realAssigneeType
         * @param realAssigneeType The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder realAssigneeType(String realAssigneeType) {
            this.realAssigneeType = realAssigneeType;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the component. (optional)
         * @return CreateComponentRequestBuilder
         */
        public CreateComponentRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Build call for createComponent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return createComponentCall(projectComponent, _callback);
        }

        private ProjectComponent buildBodyParams() {
            ProjectComponent projectComponent = new ProjectComponent();
            projectComponent.description(this.description);
            projectComponent.ari(this.ari);
            projectComponent.assignee(this.assignee);
            if (this.assigneeType != null)
            projectComponent.assigneeType(ProjectComponent.AssigneeTypeEnum.fromValue(this.assigneeType));
            projectComponent.id(this.id);
            projectComponent.isAssigneeTypeValid(this.isAssigneeTypeValid);
            projectComponent.lead(this.lead);
            projectComponent.leadAccountId(this.leadAccountId);
            projectComponent.leadUserName(this.leadUserName);
            projectComponent.metadata(this.metadata);
            projectComponent.name(this.name);
            projectComponent.project(this.project);
            projectComponent.projectId(this.projectId);
            projectComponent.realAssignee(this.realAssignee);
            if (this.realAssigneeType != null)
            projectComponent.realAssigneeType(ProjectComponent.RealAssigneeTypeEnum.fromValue(this.realAssigneeType));
            projectComponent.self(this.self);
            return projectComponent;
        }

        /**
         * Execute createComponent request
         * @return ProjectComponent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectComponent execute() throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            ApiResponse<ProjectComponent> localVarResp = createComponentWithHttpInfo(projectComponent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createComponent request with HTTP info returned
         * @return ApiResponse&lt;ProjectComponent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectComponent> executeWithHttpInfo() throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return createComponentWithHttpInfo(projectComponent);
        }

        /**
         * Execute createComponent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectComponent> _callback) throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return createComponentAsync(projectComponent, _callback);
        }
    }

    /**
     * Create component
     * Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectComponent  (required)
     * @return CreateComponentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
     </table>
     */
    public CreateComponentRequestBuilder createComponent() throws IllegalArgumentException {
        return new CreateComponentRequestBuilder();
    }
    private okhttp3.Call deleteComponentByIdCall(String id, String moveIssuesTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/component/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moveIssuesTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moveIssuesTo", moveIssuesTo));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteComponentByIdValidateBeforeCall(String id, String moveIssuesTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteComponentById(Async)");
        }

        return deleteComponentByIdCall(id, moveIssuesTo, _callback);

    }


    private ApiResponse<Void> deleteComponentByIdWithHttpInfo(String id, String moveIssuesTo) throws ApiException {
        okhttp3.Call localVarCall = deleteComponentByIdValidateBeforeCall(id, moveIssuesTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteComponentByIdAsync(String id, String moveIssuesTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteComponentByIdValidateBeforeCall(id, moveIssuesTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteComponentByIdRequestBuilder {
        private final String id;
        private String moveIssuesTo;

        private DeleteComponentByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set moveIssuesTo
         * @param moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made. (optional)
         * @return DeleteComponentByIdRequestBuilder
         */
        public DeleteComponentByIdRequestBuilder moveIssuesTo(String moveIssuesTo) {
            this.moveIssuesTo = moveIssuesTo;
            return this;
        }
        
        /**
         * Build call for deleteComponentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteComponentByIdCall(id, moveIssuesTo, _callback);
        }


        /**
         * Execute deleteComponentById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteComponentByIdWithHttpInfo(id, moveIssuesTo);
        }

        /**
         * Execute deleteComponentById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteComponentByIdWithHttpInfo(id, moveIssuesTo);
        }

        /**
         * Execute deleteComponentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteComponentByIdAsync(id, moveIssuesTo, _callback);
        }
    }

    /**
     * Delete component
     * Deletes a component.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the component. (required)
     * @return DeleteComponentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteComponentByIdRequestBuilder deleteComponentById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteComponentByIdRequestBuilder(id);
    }
    private okhttp3.Call findComponentsForProjectsCall(List<String> projectIdsOrKeys, Long startAt, Integer maxResults, String orderBy, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/component";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectIdsOrKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectIdsOrKeys", projectIdsOrKeys));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findComponentsForProjectsValidateBeforeCall(List<String> projectIdsOrKeys, Long startAt, Integer maxResults, String orderBy, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdsOrKeys' is set
        if (projectIdsOrKeys == null) {
            throw new ApiException("Missing the required parameter 'projectIdsOrKeys' when calling findComponentsForProjects(Async)");
        }

        return findComponentsForProjectsCall(projectIdsOrKeys, startAt, maxResults, orderBy, query, _callback);

    }


    private ApiResponse<PageBean2ComponentJsonBean> findComponentsForProjectsWithHttpInfo(List<String> projectIdsOrKeys, Long startAt, Integer maxResults, String orderBy, String query) throws ApiException {
        okhttp3.Call localVarCall = findComponentsForProjectsValidateBeforeCall(projectIdsOrKeys, startAt, maxResults, orderBy, query, null);
        Type localVarReturnType = new TypeToken<PageBean2ComponentJsonBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findComponentsForProjectsAsync(List<String> projectIdsOrKeys, Long startAt, Integer maxResults, String orderBy, String query, final ApiCallback<PageBean2ComponentJsonBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = findComponentsForProjectsValidateBeforeCall(projectIdsOrKeys, startAt, maxResults, orderBy, query, _callback);
        Type localVarReturnType = new TypeToken<PageBean2ComponentJsonBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindComponentsForProjectsRequestBuilder {
        private final List<String> projectIdsOrKeys;
        private Long startAt;
        private Integer maxResults;
        private String orderBy;
        private String query;

        private FindComponentsForProjectsRequestBuilder(List<String> projectIdsOrKeys) {
            this.projectIdsOrKeys = projectIdsOrKeys;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindComponentsForProjectsRequestBuilder
         */
        public FindComponentsForProjectsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return FindComponentsForProjectsRequestBuilder
         */
        public FindComponentsForProjectsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;description&#x60; Sorts by the component description.  *  &#x60;name&#x60; Sorts by component name. (optional)
         * @return FindComponentsForProjectsRequestBuilder
         */
        public FindComponentsForProjectsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set query
         * @param query Filter the results using a literal string. Components with a matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive). (optional)
         * @return FindComponentsForProjectsRequestBuilder
         */
        public FindComponentsForProjectsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for findComponentsForProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findComponentsForProjectsCall(projectIdsOrKeys, startAt, maxResults, orderBy, query, _callback);
        }


        /**
         * Execute findComponentsForProjects request
         * @return PageBean2ComponentJsonBean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public PageBean2ComponentJsonBean execute() throws ApiException {
            ApiResponse<PageBean2ComponentJsonBean> localVarResp = findComponentsForProjectsWithHttpInfo(projectIdsOrKeys, startAt, maxResults, orderBy, query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findComponentsForProjects request with HTTP info returned
         * @return ApiResponse&lt;PageBean2ComponentJsonBean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBean2ComponentJsonBean> executeWithHttpInfo() throws ApiException {
            return findComponentsForProjectsWithHttpInfo(projectIdsOrKeys, startAt, maxResults, orderBy, query);
        }

        /**
         * Execute findComponentsForProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBean2ComponentJsonBean> _callback) throws ApiException {
            return findComponentsForProjectsAsync(projectIdsOrKeys, startAt, maxResults, orderBy, query, _callback);
        }
    }

    /**
     * Find components for projects
     * Returns a [paginated](https://dac-static.atlassian.com) list of all components in a project, including global (Compass) components when applicable.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdsOrKeys The project IDs and/or project keys (case sensitive). (required)
     * @return FindComponentsForProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public FindComponentsForProjectsRequestBuilder findComponentsForProjects(List<String> projectIdsOrKeys) throws IllegalArgumentException {
        if (projectIdsOrKeys == null) throw new IllegalArgumentException("\"projectIdsOrKeys\" is required but got null");
        return new FindComponentsForProjectsRequestBuilder(projectIdsOrKeys);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/component/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<ProjectComponent> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<ProjectComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return ProjectComponent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectComponent execute() throws ApiException {
            ApiResponse<ProjectComponent> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ProjectComponent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectComponent> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectComponent> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get component
     * Returns a component.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     * @param id The ID of the component. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getRelatedIssueCountsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/component/{id}/relatedIssueCounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedIssueCountsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelatedIssueCounts(Async)");
        }

        return getRelatedIssueCountsCall(id, _callback);

    }


    private ApiResponse<ComponentIssuesCount> getRelatedIssueCountsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRelatedIssueCountsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ComponentIssuesCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelatedIssueCountsAsync(String id, final ApiCallback<ComponentIssuesCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedIssueCountsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ComponentIssuesCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRelatedIssueCountsRequestBuilder {
        private final String id;

        private GetRelatedIssueCountsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRelatedIssueCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelatedIssueCountsCall(id, _callback);
        }


        /**
         * Execute getRelatedIssueCounts request
         * @return ComponentIssuesCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ComponentIssuesCount execute() throws ApiException {
            ApiResponse<ComponentIssuesCount> localVarResp = getRelatedIssueCountsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRelatedIssueCounts request with HTTP info returned
         * @return ApiResponse&lt;ComponentIssuesCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ComponentIssuesCount> executeWithHttpInfo() throws ApiException {
            return getRelatedIssueCountsWithHttpInfo(id);
        }

        /**
         * Execute getRelatedIssueCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ComponentIssuesCount> _callback) throws ApiException {
            return getRelatedIssueCountsAsync(id, _callback);
        }
    }

    /**
     * Get component issues count
     * Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.   *  **Classic**: &#x60;read:jira-work&#x60;  *  **Granular**: &#x60;read:field:jira&#x60;, &#x60;read:project.component:jira&#x60;  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param id The ID of the component. (required)
     * @return GetRelatedIssueCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the component is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetRelatedIssueCountsRequestBuilder getRelatedIssueCounts(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRelatedIssueCountsRequestBuilder(id);
    }
    private okhttp3.Call listComponentsCall(String projectIdOrKey, String componentSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/components"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (componentSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("componentSource", componentSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listComponentsValidateBeforeCall(String projectIdOrKey, String componentSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling listComponents(Async)");
        }

        return listComponentsCall(projectIdOrKey, componentSource, _callback);

    }


    private ApiResponse<List<ProjectComponent>> listComponentsWithHttpInfo(String projectIdOrKey, String componentSource) throws ApiException {
        okhttp3.Call localVarCall = listComponentsValidateBeforeCall(projectIdOrKey, componentSource, null);
        Type localVarReturnType = new TypeToken<List<ProjectComponent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listComponentsAsync(String projectIdOrKey, String componentSource, final ApiCallback<List<ProjectComponent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listComponentsValidateBeforeCall(projectIdOrKey, componentSource, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectComponent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListComponentsRequestBuilder {
        private final String projectIdOrKey;
        private String componentSource;

        private ListComponentsRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set componentSource
         * @param componentSource The source of the components to return. Can be &#x60;jira&#x60; (default), &#x60;compass&#x60; or &#x60;auto&#x60;. When &#x60;auto&#x60; is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to &#x60;jira&#x60;. (optional, default to jira)
         * @return ListComponentsRequestBuilder
         */
        public ListComponentsRequestBuilder componentSource(String componentSource) {
            this.componentSource = componentSource;
            return this;
        }
        
        /**
         * Build call for listComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listComponentsCall(projectIdOrKey, componentSource, _callback);
        }


        /**
         * Execute listComponents request
         * @return List&lt;ProjectComponent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public List<ProjectComponent> execute() throws ApiException {
            ApiResponse<List<ProjectComponent>> localVarResp = listComponentsWithHttpInfo(projectIdOrKey, componentSource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listComponents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProjectComponent&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProjectComponent>> executeWithHttpInfo() throws ApiException {
            return listComponentsWithHttpInfo(projectIdOrKey, componentSource);
        }

        /**
         * Execute listComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProjectComponent>> _callback) throws ApiException {
            return listComponentsAsync(projectIdOrKey, componentSource, _callback);
        }
    }

    /**
     * Get project components
     * Returns all components in a project. See the [Get project components paginated](https://dac-static.atlassian.com) resource if you want to get a full list of components with pagination.  If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return ListComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ListComponentsRequestBuilder listComponents(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new ListComponentsRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call listPaginatedCall(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String componentSource, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/component"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (componentSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("componentSource", componentSource));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaginatedValidateBeforeCall(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String componentSource, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling listPaginated(Async)");
        }

        return listPaginatedCall(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query, _callback);

    }


    private ApiResponse<PageBeanComponentWithIssueCount> listPaginatedWithHttpInfo(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String componentSource, String query) throws ApiException {
        okhttp3.Call localVarCall = listPaginatedValidateBeforeCall(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query, null);
        Type localVarReturnType = new TypeToken<PageBeanComponentWithIssueCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPaginatedAsync(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String componentSource, String query, final ApiCallback<PageBeanComponentWithIssueCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaginatedValidateBeforeCall(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query, _callback);
        Type localVarReturnType = new TypeToken<PageBeanComponentWithIssueCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPaginatedRequestBuilder {
        private final String projectIdOrKey;
        private Long startAt;
        private Integer maxResults;
        private String orderBy;
        private String componentSource;
        private String query;

        private ListPaginatedRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;description&#x60; Sorts by the component description.  *  &#x60;issueCount&#x60; Sorts by the count of issues associated with the component.  *  &#x60;lead&#x60; Sorts by the user key of the component&#39;s project lead.  *  &#x60;name&#x60; Sorts by component name. (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set componentSource
         * @param componentSource The source of the components to return. Can be &#x60;jira&#x60; (default), &#x60;compass&#x60; or &#x60;auto&#x60;. When &#x60;auto&#x60; is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to &#x60;jira&#x60;. (optional, default to jira)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder componentSource(String componentSource) {
            this.componentSource = componentSource;
            return this;
        }
        
        /**
         * Set query
         * @param query Filter the results using a literal string. Components with a matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive). (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for listPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPaginatedCall(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query, _callback);
        }


        /**
         * Execute listPaginated request
         * @return PageBeanComponentWithIssueCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanComponentWithIssueCount execute() throws ApiException {
            ApiResponse<PageBeanComponentWithIssueCount> localVarResp = listPaginatedWithHttpInfo(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanComponentWithIssueCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanComponentWithIssueCount> executeWithHttpInfo() throws ApiException {
            return listPaginatedWithHttpInfo(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query);
        }

        /**
         * Execute listPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanComponentWithIssueCount> _callback) throws ApiException {
            return listPaginatedAsync(projectIdOrKey, startAt, maxResults, orderBy, componentSource, query, _callback);
        }
    }

    /**
     * Get project components paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of all components in a project. See the [Get project components](https://dac-static.atlassian.com) resource if you want to get a full list of versions without pagination.  If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return ListPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ListPaginatedRequestBuilder listPaginated(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new ListPaginatedRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call updateComponentByIdCall(String id, ProjectComponent projectComponent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectComponent;

        // create path and map variables
        String localVarPath = "/rest/api/3/component/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateComponentByIdValidateBeforeCall(String id, ProjectComponent projectComponent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateComponentById(Async)");
        }

        // verify the required parameter 'projectComponent' is set
        if (projectComponent == null) {
            throw new ApiException("Missing the required parameter 'projectComponent' when calling updateComponentById(Async)");
        }

        return updateComponentByIdCall(id, projectComponent, _callback);

    }


    private ApiResponse<ProjectComponent> updateComponentByIdWithHttpInfo(String id, ProjectComponent projectComponent) throws ApiException {
        okhttp3.Call localVarCall = updateComponentByIdValidateBeforeCall(id, projectComponent, null);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateComponentByIdAsync(String id, ProjectComponent projectComponent, final ApiCallback<ProjectComponent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateComponentByIdValidateBeforeCall(id, projectComponent, _callback);
        Type localVarReturnType = new TypeToken<ProjectComponent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateComponentByIdRequestBuilder {
        private final String id;
        private String description;
        private String ari;
        private User assignee;
        private String assigneeType;
        private String id;
        private Boolean isAssigneeTypeValid;
        private User lead;
        private String leadAccountId;
        private String leadUserName;
        private Map<String, String> metadata;
        private String name;
        private String project;
        private Long projectId;
        private User realAssignee;
        private String realAssigneeType;
        private URI self;

        private UpdateComponentByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description for the component. Optional when creating or updating a component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set ari
         * @param ari Compass component&#39;s ID. Can&#39;t be updated. Not required for creating a Project Component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder ari(String ari) {
            this.ari = ari;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder assignee(User assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set assigneeType
         * @param assigneeType The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder assigneeType(String assigneeType) {
            this.assigneeType = assigneeType;
            return this;
        }
        
        /**
         * Set id
         * @param id The unique identifier for the component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set isAssigneeTypeValid
         * @param isAssigneeTypeValid Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder isAssigneeTypeValid(Boolean isAssigneeTypeValid) {
            this.isAssigneeTypeValid = isAssigneeTypeValid;
            return this;
        }
        
        /**
         * Set lead
         * @param lead The user details for the component&#39;s lead user. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder lead(User lead) {
            this.lead = lead;
            return this;
        }
        
        /**
         * Set leadAccountId
         * @param leadAccountId The accountId of the component&#39;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder leadAccountId(String leadAccountId) {
            this.leadAccountId = leadAccountId;
            return this;
        }
        
        /**
         * Set leadUserName
         * @param leadUserName This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder leadUserName(String leadUserName) {
            this.leadUserName = leadUserName;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Compass component&#39;s metadata. Can&#39;t be updated. Not required for creating a Project Component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set name
         * @param name The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set project
         * @param project The key of the project the component is assigned to. Required when creating a component. Can&#39;t be updated. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project the component is assigned to. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set realAssignee
         * @param realAssignee The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder realAssignee(User realAssignee) {
            this.realAssignee = realAssignee;
            return this;
        }
        
        /**
         * Set realAssigneeType
         * @param realAssigneeType The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder realAssigneeType(String realAssigneeType) {
            this.realAssigneeType = realAssigneeType;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the component. (optional)
         * @return UpdateComponentByIdRequestBuilder
         */
        public UpdateComponentByIdRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Build call for updateComponentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return updateComponentByIdCall(id, projectComponent, _callback);
        }

        private ProjectComponent buildBodyParams() {
            ProjectComponent projectComponent = new ProjectComponent();
            projectComponent.description(this.description);
            projectComponent.ari(this.ari);
            projectComponent.assignee(this.assignee);
            if (this.assigneeType != null)
            projectComponent.assigneeType(ProjectComponent.AssigneeTypeEnum.fromValue(this.assigneeType));
            projectComponent.id(this.id);
            projectComponent.isAssigneeTypeValid(this.isAssigneeTypeValid);
            projectComponent.lead(this.lead);
            projectComponent.leadAccountId(this.leadAccountId);
            projectComponent.leadUserName(this.leadUserName);
            projectComponent.metadata(this.metadata);
            projectComponent.name(this.name);
            projectComponent.project(this.project);
            projectComponent.projectId(this.projectId);
            projectComponent.realAssignee(this.realAssignee);
            if (this.realAssigneeType != null)
            projectComponent.realAssigneeType(ProjectComponent.RealAssigneeTypeEnum.fromValue(this.realAssigneeType));
            projectComponent.self(this.self);
            return projectComponent;
        }

        /**
         * Execute updateComponentById request
         * @return ProjectComponent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectComponent execute() throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            ApiResponse<ProjectComponent> localVarResp = updateComponentByIdWithHttpInfo(id, projectComponent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateComponentById request with HTTP info returned
         * @return ApiResponse&lt;ProjectComponent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectComponent> executeWithHttpInfo() throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return updateComponentByIdWithHttpInfo(id, projectComponent);
        }

        /**
         * Execute updateComponentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectComponent> _callback) throws ApiException {
            ProjectComponent projectComponent = buildBodyParams();
            return updateComponentByIdAsync(id, projectComponent, _callback);
        }
    }

    /**
     * Update component
     * Updates a component. Any fields included in the request are overwritten. If &#x60;leadAccountId&#x60; is an empty string (\&quot;\&quot;) the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the component. (required)
     * @param projectComponent  (required)
     * @return UpdateComponentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the component is not found or the user does not have permission to browse the project containing the component. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateComponentByIdRequestBuilder updateComponentById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateComponentByIdRequestBuilder(id);
    }
}
