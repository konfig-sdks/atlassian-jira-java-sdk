/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ActorInputBean;
import com.konfigthis.client.model.ActorsMap;
import com.konfigthis.client.model.ProjectRole;
import com.konfigthis.client.model.ProjectRoleActorsUpdateBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectRoleActorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectRoleActorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectRoleActorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addActorsToRoleCall(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actorsMap;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActorsToRoleValidateBeforeCall(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling addActorsToRole(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addActorsToRole(Async)");
        }

        // verify the required parameter 'actorsMap' is set
        if (actorsMap == null) {
            throw new ApiException("Missing the required parameter 'actorsMap' when calling addActorsToRole(Async)");
        }

        return addActorsToRoleCall(projectIdOrKey, id, actorsMap, _callback);

    }


    private ApiResponse<ProjectRole> addActorsToRoleWithHttpInfo(String projectIdOrKey, Long id, ActorsMap actorsMap) throws ApiException {
        okhttp3.Call localVarCall = addActorsToRoleValidateBeforeCall(projectIdOrKey, id, actorsMap, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addActorsToRoleAsync(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = addActorsToRoleValidateBeforeCall(projectIdOrKey, id, actorsMap, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddActorsToRoleRequestBuilder {
        private final String projectIdOrKey;
        private final Long id;
        private List<String> group;
        private List<String> groupId;
        private List<String> user;

        private AddActorsToRoleRequestBuilder(String projectIdOrKey, Long id) {
            this.projectIdOrKey = projectIdOrKey;
            this.id = id;
        }

        /**
         * Set group
         * @param group The name of the group to add. This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. (optional)
         * @return AddActorsToRoleRequestBuilder
         */
        public AddActorsToRoleRequestBuilder group(List<String> group) {
            this.group = group;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group to add. This parameter cannot be used with the &#x60;group&#x60; parameter. (optional)
         * @return AddActorsToRoleRequestBuilder
         */
        public AddActorsToRoleRequestBuilder groupId(List<String> groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set user
         * @param user The user account ID of the user to add. (optional)
         * @return AddActorsToRoleRequestBuilder
         */
        public AddActorsToRoleRequestBuilder user(List<String> user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for addActorsToRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActorsMap actorsMap = buildBodyParams();
            return addActorsToRoleCall(projectIdOrKey, id, actorsMap, _callback);
        }

        private ActorsMap buildBodyParams() {
            ActorsMap actorsMap = new ActorsMap();
            actorsMap.group(this.group);
            actorsMap.groupId(this.groupId);
            actorsMap.user(this.user);
            return actorsMap;
        }

        /**
         * Execute addActorsToRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ActorsMap actorsMap = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = addActorsToRoleWithHttpInfo(projectIdOrKey, id, actorsMap);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addActorsToRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            ActorsMap actorsMap = buildBodyParams();
            return addActorsToRoleWithHttpInfo(projectIdOrKey, id, actorsMap);
        }

        /**
         * Execute addActorsToRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            ActorsMap actorsMap = buildBodyParams();
            return addActorsToRoleAsync(projectIdOrKey, id, actorsMap, _callback);
        }
    }

    /**
     * Add actors to project role
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](https://dac-static.atlassian.com).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group&#39;s name can change, use of group ID is recommended. (required)
     * @return AddActorsToRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public AddActorsToRoleRequestBuilder addActorsToRole(String projectIdOrKey, Long id) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddActorsToRoleRequestBuilder(projectIdOrKey, id);
    }
    private okhttp3.Call addDefaultActorsToRoleCall(Long id, ActorInputBean actorInputBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actorInputBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDefaultActorsToRoleValidateBeforeCall(Long id, ActorInputBean actorInputBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addDefaultActorsToRole(Async)");
        }

        // verify the required parameter 'actorInputBean' is set
        if (actorInputBean == null) {
            throw new ApiException("Missing the required parameter 'actorInputBean' when calling addDefaultActorsToRole(Async)");
        }

        return addDefaultActorsToRoleCall(id, actorInputBean, _callback);

    }


    private ApiResponse<ProjectRole> addDefaultActorsToRoleWithHttpInfo(Long id, ActorInputBean actorInputBean) throws ApiException {
        okhttp3.Call localVarCall = addDefaultActorsToRoleValidateBeforeCall(id, actorInputBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDefaultActorsToRoleAsync(Long id, ActorInputBean actorInputBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDefaultActorsToRoleValidateBeforeCall(id, actorInputBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDefaultActorsToRoleRequestBuilder {
        private final Long id;
        private List<String> group;
        private List<String> groupId;
        private List<String> user;

        private AddDefaultActorsToRoleRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set group
         * @param group The name of the group to add as a default actor. This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change,use of &#x60;groupId&#x60; is recommended. This parameter accepts a comma-separated list. For example, &#x60;\\\&quot;group\\\&quot;:[\\\&quot;project-admin\\\&quot;, \\\&quot;jira-developers\\\&quot;]&#x60;. (optional)
         * @return AddDefaultActorsToRoleRequestBuilder
         */
        public AddDefaultActorsToRoleRequestBuilder group(List<String> group) {
            this.group = group;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group to add as a default actor. This parameter cannot be used with the &#x60;group&#x60; parameter This parameter accepts a comma-separated list. For example, &#x60;\\\&quot;groupId\\\&quot;:[\\\&quot;77f6ab39-e755-4570-a6ae-2d7a8df0bcb8\\\&quot;, \\\&quot;0c011f85-69ed-49c4-a801-3b18d0f771bc\\\&quot;]&#x60;. (optional)
         * @return AddDefaultActorsToRoleRequestBuilder
         */
        public AddDefaultActorsToRoleRequestBuilder groupId(List<String> groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set user
         * @param user The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, &#x60;\\\&quot;user\\\&quot;:[\\\&quot;5b10a2844c20165700ede21g\\\&quot;, \\\&quot;5b109f2e9729b51b54dc274d\\\&quot;]&#x60;. (optional)
         * @return AddDefaultActorsToRoleRequestBuilder
         */
        public AddDefaultActorsToRoleRequestBuilder user(List<String> user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for addDefaultActorsToRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActorInputBean actorInputBean = buildBodyParams();
            return addDefaultActorsToRoleCall(id, actorInputBean, _callback);
        }

        private ActorInputBean buildBodyParams() {
            ActorInputBean actorInputBean = new ActorInputBean();
            actorInputBean.group(this.group);
            actorInputBean.groupId(this.groupId);
            actorInputBean.user(this.user);
            return actorInputBean;
        }

        /**
         * Execute addDefaultActorsToRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ActorInputBean actorInputBean = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = addDefaultActorsToRoleWithHttpInfo(id, actorInputBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDefaultActorsToRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            ActorInputBean actorInputBean = buildBodyParams();
            return addDefaultActorsToRoleWithHttpInfo(id, actorInputBean);
        }

        /**
         * Execute addDefaultActorsToRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            ActorInputBean actorInputBean = buildBodyParams();
            return addDefaultActorsToRoleAsync(id, actorInputBean, _callback);
        }
    }

    /**
     * Add default actors to project role
     * Adds [default actors](https://dac-static.atlassian.com) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @return AddDefaultActorsToRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public AddDefaultActorsToRoleRequestBuilder addDefaultActorsToRole(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddDefaultActorsToRoleRequestBuilder(id);
    }
    private okhttp3.Call getDefaultActorsForRoleCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultActorsForRoleValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDefaultActorsForRole(Async)");
        }

        return getDefaultActorsForRoleCall(id, _callback);

    }


    private ApiResponse<ProjectRole> getDefaultActorsForRoleWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getDefaultActorsForRoleValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultActorsForRoleAsync(Long id, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultActorsForRoleValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultActorsForRoleRequestBuilder {
        private final Long id;

        private GetDefaultActorsForRoleRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getDefaultActorsForRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultActorsForRoleCall(id, _callback);
        }


        /**
         * Execute getDefaultActorsForRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ApiResponse<ProjectRole> localVarResp = getDefaultActorsForRoleWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultActorsForRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            return getDefaultActorsForRoleWithHttpInfo(id);
        }

        /**
         * Execute getDefaultActorsForRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            return getDefaultActorsForRoleAsync(id, _callback);
        }
    }

    /**
     * Get default actors for project role
     * Returns the [default actors](https://dac-static.atlassian.com) for the project role.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return GetDefaultActorsForRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultActorsForRoleRequestBuilder getDefaultActorsForRole(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDefaultActorsForRoleRequestBuilder(id);
    }
    private okhttp3.Call removeActorsFromRoleCall(String projectIdOrKey, Long id, String user, String group, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeActorsFromRoleValidateBeforeCall(String projectIdOrKey, Long id, String user, String group, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling removeActorsFromRole(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeActorsFromRole(Async)");
        }

        return removeActorsFromRoleCall(projectIdOrKey, id, user, group, groupId, _callback);

    }


    private ApiResponse<Void> removeActorsFromRoleWithHttpInfo(String projectIdOrKey, Long id, String user, String group, String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeActorsFromRoleValidateBeforeCall(projectIdOrKey, id, user, group, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeActorsFromRoleAsync(String projectIdOrKey, Long id, String user, String group, String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeActorsFromRoleValidateBeforeCall(projectIdOrKey, id, user, group, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveActorsFromRoleRequestBuilder {
        private final String projectIdOrKey;
        private final Long id;
        private String user;
        private String group;
        private String groupId;

        private RemoveActorsFromRoleRequestBuilder(String projectIdOrKey, Long id) {
            this.projectIdOrKey = projectIdOrKey;
            this.id = id;
        }

        /**
         * Set user
         * @param user The user account ID of the user to remove from the project role. (optional)
         * @return RemoveActorsFromRoleRequestBuilder
         */
        public RemoveActorsFromRoleRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set group
         * @param group The name of the group to remove from the project role. This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. (optional)
         * @return RemoveActorsFromRoleRequestBuilder
         */
        public RemoveActorsFromRoleRequestBuilder group(String group) {
            this.group = group;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The ID of the group to remove from the project role. This parameter cannot be used with the &#x60;group&#x60; parameter. (optional)
         * @return RemoveActorsFromRoleRequestBuilder
         */
        public RemoveActorsFromRoleRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for removeActorsFromRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeActorsFromRoleCall(projectIdOrKey, id, user, group, groupId, _callback);
        }


        /**
         * Execute removeActorsFromRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeActorsFromRoleWithHttpInfo(projectIdOrKey, id, user, group, groupId);
        }

        /**
         * Execute removeActorsFromRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeActorsFromRoleWithHttpInfo(projectIdOrKey, id, user, group, groupId);
        }

        /**
         * Execute removeActorsFromRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeActorsFromRoleAsync(projectIdOrKey, id, user, group, groupId, _callback);
        }
    }

    /**
     * Delete actors from project role
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](https://dac-static.atlassian.com).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return RemoveActorsFromRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveActorsFromRoleRequestBuilder removeActorsFromRole(String projectIdOrKey, Long id) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveActorsFromRoleRequestBuilder(projectIdOrKey, id);
    }
    private okhttp3.Call removeDefaultActorsCall(Long id, String user, String groupId, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDefaultActorsValidateBeforeCall(Long id, String user, String groupId, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeDefaultActors(Async)");
        }

        return removeDefaultActorsCall(id, user, groupId, group, _callback);

    }


    private ApiResponse<ProjectRole> removeDefaultActorsWithHttpInfo(Long id, String user, String groupId, String group) throws ApiException {
        okhttp3.Call localVarCall = removeDefaultActorsValidateBeforeCall(id, user, groupId, group, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDefaultActorsAsync(Long id, String user, String groupId, String group, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDefaultActorsValidateBeforeCall(id, user, groupId, group, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDefaultActorsRequestBuilder {
        private final Long id;
        private String user;
        private String groupId;
        private String group;

        private RemoveDefaultActorsRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set user
         * @param user The user account ID of the user to remove as a default actor. (optional)
         * @return RemoveDefaultActorsRequestBuilder
         */
        public RemoveDefaultActorsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID of the group to be removed as a default actor. This parameter cannot be used with the &#x60;group&#x60; parameter. (optional)
         * @return RemoveDefaultActorsRequestBuilder
         */
        public RemoveDefaultActorsRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set group
         * @param group The group name of the group to be removed as a default actor.This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. (optional)
         * @return RemoveDefaultActorsRequestBuilder
         */
        public RemoveDefaultActorsRequestBuilder group(String group) {
            this.group = group;
            return this;
        }
        
        /**
         * Build call for removeDefaultActors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDefaultActorsCall(id, user, groupId, group, _callback);
        }


        /**
         * Execute removeDefaultActors request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ApiResponse<ProjectRole> localVarResp = removeDefaultActorsWithHttpInfo(id, user, groupId, group);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDefaultActors request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            return removeDefaultActorsWithHttpInfo(id, user, groupId, group);
        }

        /**
         * Execute removeDefaultActors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            return removeDefaultActorsAsync(id, user, groupId, group, _callback);
        }
    }

    /**
     * Delete default actors from project role
     * Deletes the [default actors](https://dac-static.atlassian.com) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return RemoveDefaultActorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDefaultActorsRequestBuilder removeDefaultActors(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveDefaultActorsRequestBuilder(id);
    }
    private okhttp3.Call setActorsForRoleCall(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectRoleActorsUpdateBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setActorsForRoleValidateBeforeCall(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling setActorsForRole(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setActorsForRole(Async)");
        }

        // verify the required parameter 'projectRoleActorsUpdateBean' is set
        if (projectRoleActorsUpdateBean == null) {
            throw new ApiException("Missing the required parameter 'projectRoleActorsUpdateBean' when calling setActorsForRole(Async)");
        }

        return setActorsForRoleCall(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);

    }


    private ApiResponse<ProjectRole> setActorsForRoleWithHttpInfo(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean) throws ApiException {
        okhttp3.Call localVarCall = setActorsForRoleValidateBeforeCall(projectIdOrKey, id, projectRoleActorsUpdateBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setActorsForRoleAsync(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = setActorsForRoleValidateBeforeCall(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetActorsForRoleRequestBuilder {
        private final String projectIdOrKey;
        private final Long id;
        private Map<String, List<String>> categorisedActors;
        private Long id;

        private SetActorsForRoleRequestBuilder(String projectIdOrKey, Long id) {
            this.projectIdOrKey = projectIdOrKey;
            this.id = id;
        }

        /**
         * Set categorisedActors
         * @param categorisedActors The actors to add to the project role.  Add groups using:   *  &#x60;atlassian-group-role-actor&#x60; and a list of group names.  *  &#x60;atlassian-group-role-actor-id&#x60; and a list of group IDs.  As a group&#39;s name can change, use of &#x60;atlassian-group-role-actor-id&#x60; is recommended. For example, &#x60;\\\&quot;atlassian-group-role-actor-id\\\&quot;:[\\\&quot;eef79f81-0b89-4fca-a736-4be531a10869\\\&quot;,\\\&quot;77f6ab39-e755-4570-a6ae-2d7a8df0bcb8\\\&quot;]&#x60;.  Add users using &#x60;atlassian-user-role-actor&#x60; and a list of account IDs. For example, &#x60;\\\&quot;atlassian-user-role-actor\\\&quot;:[\\\&quot;12345678-9abc-def1-2345-6789abcdef12\\\&quot;, \\\&quot;abcdef12-3456-789a-bcde-f123456789ab\\\&quot;]&#x60;. (optional)
         * @return SetActorsForRoleRequestBuilder
         */
        public SetActorsForRoleRequestBuilder categorisedActors(Map<String, List<String>> categorisedActors) {
            this.categorisedActors = categorisedActors;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (optional)
         * @return SetActorsForRoleRequestBuilder
         */
        public SetActorsForRoleRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for setActorsForRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean = buildBodyParams();
            return setActorsForRoleCall(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);
        }

        private ProjectRoleActorsUpdateBean buildBodyParams() {
            ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean = new ProjectRoleActorsUpdateBean();
            projectRoleActorsUpdateBean.categorisedActors(this.categorisedActors);
            projectRoleActorsUpdateBean.id(this.id);
            return projectRoleActorsUpdateBean;
        }

        /**
         * Execute setActorsForRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = setActorsForRoleWithHttpInfo(projectIdOrKey, id, projectRoleActorsUpdateBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setActorsForRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean = buildBodyParams();
            return setActorsForRoleWithHttpInfo(projectIdOrKey, id, projectRoleActorsUpdateBean);
        }

        /**
         * Execute setActorsForRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean = buildBodyParams();
            return setActorsForRoleAsync(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);
        }
    }

    /**
     * Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](https://dac-static.atlassian.com).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group&#39;s name can change, use of group ID is recommended. (required)
     * @return SetActorsForRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public SetActorsForRoleRequestBuilder setActorsForRole(String projectIdOrKey, Long id) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SetActorsForRoleRequestBuilder(projectIdOrKey, id);
    }
}
