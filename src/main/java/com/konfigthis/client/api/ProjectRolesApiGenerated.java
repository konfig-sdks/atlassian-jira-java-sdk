/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateUpdateRoleRequestBean;
import com.konfigthis.client.model.ProjectRole;
import com.konfigthis.client.model.ProjectRoleDetails;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectRolesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectRolesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectRolesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRoleCall(CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateRoleRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUpdateRoleRequestBean' is set
        if (createUpdateRoleRequestBean == null) {
            throw new ApiException("Missing the required parameter 'createUpdateRoleRequestBean' when calling createRole(Async)");
        }

        return createRoleCall(createUpdateRoleRequestBean, _callback);

    }


    private ApiResponse<ProjectRole> createRoleWithHttpInfo(CreateUpdateRoleRequestBean createUpdateRoleRequestBean) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createUpdateRoleRequestBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRoleAsync(CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createUpdateRoleRequestBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRoleRequestBuilder {
        private String description;
        private String name;

        private CreateRoleRequestBuilder() {
        }

        /**
         * Set description
         * @param description A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if a project role with the provided name already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return createRoleCall(createUpdateRoleRequestBean, _callback);
        }

        private CreateUpdateRoleRequestBean buildBodyParams() {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = new CreateUpdateRoleRequestBean();
            createUpdateRoleRequestBean.description(this.description);
            createUpdateRoleRequestBean.name(this.name);
            return createUpdateRoleRequestBean;
        }

        /**
         * Execute createRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if a project role with the provided name already exists. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = createRoleWithHttpInfo(createUpdateRoleRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if a project role with the provided name already exists. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return createRoleWithHttpInfo(createUpdateRoleRequestBean);
        }

        /**
         * Execute createRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if a project role with the provided name already exists. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return createRoleAsync(createUpdateRoleRequestBean, _callback);
        }
    }

    /**
     * Create project role
     * Creates a new project role with no [default actors](https://dac-static.atlassian.com). You can use the [Add default actors to project role](https://dac-static.atlassian.com) operation to add default actors to the project role after creating it.  *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*&lt;  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createUpdateRoleRequestBean  (required)
     * @return CreateRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if a project role with the provided name already exists. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoleRequestBuilder createRole() throws IllegalArgumentException {
        return new CreateRoleRequestBuilder();
    }
    private okhttp3.Call deleteRoleCall(Long id, Long swap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (swap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("swap", swap));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(Long id, Long swap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRole(Async)");
        }

        return deleteRoleCall(id, swap, _callback);

    }


    private ApiResponse<Void> deleteRoleWithHttpInfo(Long id, Long swap) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(id, swap, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRoleAsync(Long id, Long swap, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(id, swap, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRoleRequestBuilder {
        private final Long id;
        private Long swap;

        private DeleteRoleRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set swap
         * @param swap The ID of the project role that will replace the one being deleted. (optional)
         * @return DeleteRoleRequestBuilder
         */
        public DeleteRoleRequestBuilder swap(Long swap) {
            this.swap = swap;
            return this;
        }
        
        /**
         * Build call for deleteRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid or if the replacement project role is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role being deleted is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the project role being deleted is in use and a replacement project role is not specified in the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRoleCall(id, swap, _callback);
        }


        /**
         * Execute deleteRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid or if the replacement project role is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role being deleted is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the project role being deleted is in use and a replacement project role is not specified in the request. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRoleWithHttpInfo(id, swap);
        }

        /**
         * Execute deleteRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid or if the replacement project role is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role being deleted is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the project role being deleted is in use and a replacement project role is not specified in the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRoleWithHttpInfo(id, swap);
        }

        /**
         * Execute deleteRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid or if the replacement project role is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role being deleted is not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if the project role being deleted is in use and a replacement project role is not specified in the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRoleAsync(id, swap, _callback);
        }
    }

    /**
     * Delete project role
     * Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role to delete. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return DeleteRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid or if the replacement project role is not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role being deleted is not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if the project role being deleted is in use and a replacement project role is not specified in the request. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleRequestBuilder deleteRole(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteRoleRequestBuilder(id);
    }
    private okhttp3.Call getProjectRoleDetailsCall(String projectIdOrKey, Long id, Boolean excludeInactiveUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeInactiveUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeInactiveUsers", excludeInactiveUsers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectRoleDetailsValidateBeforeCall(String projectIdOrKey, Long id, Boolean excludeInactiveUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getProjectRoleDetails(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProjectRoleDetails(Async)");
        }

        return getProjectRoleDetailsCall(projectIdOrKey, id, excludeInactiveUsers, _callback);

    }


    private ApiResponse<ProjectRole> getProjectRoleDetailsWithHttpInfo(String projectIdOrKey, Long id, Boolean excludeInactiveUsers) throws ApiException {
        okhttp3.Call localVarCall = getProjectRoleDetailsValidateBeforeCall(projectIdOrKey, id, excludeInactiveUsers, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectRoleDetailsAsync(String projectIdOrKey, Long id, Boolean excludeInactiveUsers, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectRoleDetailsValidateBeforeCall(projectIdOrKey, id, excludeInactiveUsers, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectRoleDetailsRequestBuilder {
        private final String projectIdOrKey;
        private final Long id;
        private Boolean excludeInactiveUsers;

        private GetProjectRoleDetailsRequestBuilder(String projectIdOrKey, Long id) {
            this.projectIdOrKey = projectIdOrKey;
            this.id = id;
        }

        /**
         * Set excludeInactiveUsers
         * @param excludeInactiveUsers Exclude inactive users. (optional, default to false)
         * @return GetProjectRoleDetailsRequestBuilder
         */
        public GetProjectRoleDetailsRequestBuilder excludeInactiveUsers(Boolean excludeInactiveUsers) {
            this.excludeInactiveUsers = excludeInactiveUsers;
            return this;
        }
        
        /**
         * Build call for getProjectRoleDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectRoleDetailsCall(projectIdOrKey, id, excludeInactiveUsers, _callback);
        }


        /**
         * Execute getProjectRoleDetails request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ApiResponse<ProjectRole> localVarResp = getProjectRoleDetailsWithHttpInfo(projectIdOrKey, id, excludeInactiveUsers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectRoleDetails request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            return getProjectRoleDetailsWithHttpInfo(projectIdOrKey, id, excludeInactiveUsers);
        }

        /**
         * Execute getProjectRoleDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            return getProjectRoleDetailsAsync(projectIdOrKey, id, excludeInactiveUsers, _callback);
        }
    }

    /**
     * Get project role for project
     * Returns a project role&#39;s details and actors associated with the project. The list of actors is sorted by display name.  To check whether a user belongs to a role based on their group memberships, use [Get user](https://dac-static.atlassian.com) with the &#x60;groups&#x60; expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return GetProjectRoleDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectRoleDetailsRequestBuilder getProjectRoleDetails(String projectIdOrKey, Long id) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetProjectRoleDetailsRequestBuilder(projectIdOrKey, id);
    }
    private okhttp3.Call getProjectRoleListCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectRoleListValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getProjectRoleList(Async)");
        }

        return getProjectRoleListCall(projectIdOrKey, _callback);

    }


    private ApiResponse<Map<String, URI>> getProjectRoleListWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getProjectRoleListValidateBeforeCall(projectIdOrKey, null);
        Type localVarReturnType = new TypeToken<Map<String, URI>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectRoleListAsync(String projectIdOrKey, final ApiCallback<Map<String, URI>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectRoleListValidateBeforeCall(projectIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<Map<String, URI>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectRoleListRequestBuilder {
        private final String projectIdOrKey;

        private GetProjectRoleListRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for getProjectRoleList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or or if the user does not have administrative permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectRoleListCall(projectIdOrKey, _callback);
        }


        /**
         * Execute getProjectRoleList request
         * @return Map&lt;String, URI&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or or if the user does not have administrative permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, URI> execute() throws ApiException {
            ApiResponse<Map<String, URI>> localVarResp = getProjectRoleListWithHttpInfo(projectIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectRoleList request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, URI&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or or if the user does not have administrative permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, URI>> executeWithHttpInfo() throws ApiException {
            return getProjectRoleListWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute getProjectRoleList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or or if the user does not have administrative permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, URI>> _callback) throws ApiException {
            return getProjectRoleListAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Get project roles for project
     * Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.  Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](https://dac-static.atlassian.com) for more information.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return GetProjectRoleListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or or if the user does not have administrative permissions for the project. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectRoleListRequestBuilder getProjectRoleList(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetProjectRoleListRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call getRoleByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRoleById(Async)");
        }

        return getRoleByIdCall(id, _callback);

    }


    private ApiResponse<ProjectRole> getRoleByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getRoleByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleByIdAsync(Long id, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleByIdRequestBuilder {
        private final Long id;

        private GetRoleByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getRoleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleByIdCall(id, _callback);
        }


        /**
         * Execute getRoleById request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            ApiResponse<ProjectRole> localVarResp = getRoleByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleById request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            return getRoleByIdWithHttpInfo(id);
        }

        /**
         * Execute getRoleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            return getRoleByIdAsync(id, _callback);
        }
    }

    /**
     * Get project role by ID
     * Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @return GetRoleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleByIdRequestBuilder getRoleById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetRoleByIdRequestBuilder(id);
    }
    private okhttp3.Call getRoleDetailsCall(String projectIdOrKey, Boolean currentMember, Boolean excludeConnectAddons, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/roledetails"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentMember", currentMember));
        }

        if (excludeConnectAddons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeConnectAddons", excludeConnectAddons));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleDetailsValidateBeforeCall(String projectIdOrKey, Boolean currentMember, Boolean excludeConnectAddons, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getRoleDetails(Async)");
        }

        return getRoleDetailsCall(projectIdOrKey, currentMember, excludeConnectAddons, _callback);

    }


    private ApiResponse<List<ProjectRoleDetails>> getRoleDetailsWithHttpInfo(String projectIdOrKey, Boolean currentMember, Boolean excludeConnectAddons) throws ApiException {
        okhttp3.Call localVarCall = getRoleDetailsValidateBeforeCall(projectIdOrKey, currentMember, excludeConnectAddons, null);
        Type localVarReturnType = new TypeToken<List<ProjectRoleDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleDetailsAsync(String projectIdOrKey, Boolean currentMember, Boolean excludeConnectAddons, final ApiCallback<List<ProjectRoleDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleDetailsValidateBeforeCall(projectIdOrKey, currentMember, excludeConnectAddons, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectRoleDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleDetailsRequestBuilder {
        private final String projectIdOrKey;
        private Boolean currentMember;
        private Boolean excludeConnectAddons;

        private GetRoleDetailsRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set currentMember
         * @param currentMember Whether the roles should be filtered to include only those the user is assigned to. (optional, default to false)
         * @return GetRoleDetailsRequestBuilder
         */
        public GetRoleDetailsRequestBuilder currentMember(Boolean currentMember) {
            this.currentMember = currentMember;
            return this;
        }
        
        /**
         * Set excludeConnectAddons
         * @param excludeConnectAddons  (optional, default to false)
         * @return GetRoleDetailsRequestBuilder
         */
        public GetRoleDetailsRequestBuilder excludeConnectAddons(Boolean excludeConnectAddons) {
            this.excludeConnectAddons = excludeConnectAddons;
            return this;
        }
        
        /**
         * Build call for getRoleDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or if the user does not have the necessary permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleDetailsCall(projectIdOrKey, currentMember, excludeConnectAddons, _callback);
        }


        /**
         * Execute getRoleDetails request
         * @return List&lt;ProjectRoleDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or if the user does not have the necessary permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public List<ProjectRoleDetails> execute() throws ApiException {
            ApiResponse<List<ProjectRoleDetails>> localVarResp = getRoleDetailsWithHttpInfo(projectIdOrKey, currentMember, excludeConnectAddons);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRoleDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProjectRoleDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or if the user does not have the necessary permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProjectRoleDetails>> executeWithHttpInfo() throws ApiException {
            return getRoleDetailsWithHttpInfo(projectIdOrKey, currentMember, excludeConnectAddons);
        }

        /**
         * Execute getRoleDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or if the user does not have the necessary permissions for the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProjectRoleDetails>> _callback) throws ApiException {
            return getRoleDetailsAsync(projectIdOrKey, currentMember, excludeConnectAddons, _callback);
        }
    }

    /**
     * Get project role details
     * Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return GetRoleDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or if the user does not have the necessary permissions for the project. </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleDetailsRequestBuilder getRoleDetails(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetRoleDetailsRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call listProjectRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listProjectRolesCall(_callback);

    }


    private ApiResponse<List<ProjectRole>> listProjectRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProjectRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProjectRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProjectRolesAsync(final ApiCallback<List<ProjectRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProjectRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProjectRolesRequestBuilder {

        private ListProjectRolesRequestBuilder() {
        }

        /**
         * Build call for listProjectRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProjectRolesCall(_callback);
        }


        /**
         * Execute listProjectRoles request
         * @return List&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
         </table>
         */
        public List<ProjectRole> execute() throws ApiException {
            ApiResponse<List<ProjectRole>> localVarResp = listProjectRolesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProjectRoles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProjectRole&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProjectRole>> executeWithHttpInfo() throws ApiException {
            return listProjectRolesWithHttpInfo();
        }

        /**
         * Execute listProjectRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProjectRole>> _callback) throws ApiException {
            return listProjectRolesAsync(_callback);
        }
    }

    /**
     * Get all project roles
     * Gets a list of all project roles, complete with project role details and default actors.  ### About project roles ###  [Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).  Project roles are used in [permission schemes](https://dac-static.atlassian.com), [email notification schemes](https://dac-static.atlassian.com), [issue security levels](https://dac-static.atlassian.com), [comment visibility](https://dac-static.atlassian.com), and workflow conditions.  #### Members and actors ####  In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.  Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-&#39;default-members&#39;-for-a-project-role) of the project role or set at the project level:   *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListProjectRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectRolesRequestBuilder listProjectRoles() throws IllegalArgumentException {
        return new ListProjectRolesRequestBuilder();
    }
    private okhttp3.Call partiallyUpdateRoleCall(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateRoleRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateRoleValidateBeforeCall(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partiallyUpdateRole(Async)");
        }

        // verify the required parameter 'createUpdateRoleRequestBean' is set
        if (createUpdateRoleRequestBean == null) {
            throw new ApiException("Missing the required parameter 'createUpdateRoleRequestBean' when calling partiallyUpdateRole(Async)");
        }

        return partiallyUpdateRoleCall(id, createUpdateRoleRequestBean, _callback);

    }


    private ApiResponse<ProjectRole> partiallyUpdateRoleWithHttpInfo(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateRoleValidateBeforeCall(id, createUpdateRoleRequestBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateRoleAsync(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateRoleValidateBeforeCall(id, createUpdateRoleRequestBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateRoleRequestBuilder {
        private final Long id;
        private String description;
        private String name;

        private PartiallyUpdateRoleRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. (optional)
         * @return PartiallyUpdateRoleRequestBuilder
         */
        public PartiallyUpdateRoleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. (optional)
         * @return PartiallyUpdateRoleRequestBuilder
         */
        public PartiallyUpdateRoleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for partiallyUpdateRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return partiallyUpdateRoleCall(id, createUpdateRoleRequestBean, _callback);
        }

        private CreateUpdateRoleRequestBean buildBodyParams() {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = new CreateUpdateRoleRequestBean();
            createUpdateRoleRequestBean.description(this.description);
            createUpdateRoleRequestBean.name(this.name);
            return createUpdateRoleRequestBean;
        }

        /**
         * Execute partiallyUpdateRole request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = partiallyUpdateRoleWithHttpInfo(id, createUpdateRoleRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateRole request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return partiallyUpdateRoleWithHttpInfo(id, createUpdateRoleRequestBean);
        }

        /**
         * Execute partiallyUpdateRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return partiallyUpdateRoleAsync(id, createUpdateRoleRequestBean, _callback);
        }
    }

    /**
     * Partial update project role
     * Updates either the project role&#39;s name or its description.  You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @param createUpdateRoleRequestBean  (required)
     * @return PartiallyUpdateRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateRoleRequestBuilder partiallyUpdateRole(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new PartiallyUpdateRoleRequestBuilder(id);
    }
    private okhttp3.Call updateRolePropertiesCall(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateRoleRequestBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRolePropertiesValidateBeforeCall(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRoleProperties(Async)");
        }

        // verify the required parameter 'createUpdateRoleRequestBean' is set
        if (createUpdateRoleRequestBean == null) {
            throw new ApiException("Missing the required parameter 'createUpdateRoleRequestBean' when calling updateRoleProperties(Async)");
        }

        return updateRolePropertiesCall(id, createUpdateRoleRequestBean, _callback);

    }


    private ApiResponse<ProjectRole> updateRolePropertiesWithHttpInfo(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean) throws ApiException {
        okhttp3.Call localVarCall = updateRolePropertiesValidateBeforeCall(id, createUpdateRoleRequestBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRolePropertiesAsync(Long id, CreateUpdateRoleRequestBean createUpdateRoleRequestBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRolePropertiesValidateBeforeCall(id, createUpdateRoleRequestBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRolePropertiesRequestBuilder {
        private final Long id;
        private String description;
        private String name;

        private UpdateRolePropertiesRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. (optional)
         * @return UpdateRolePropertiesRequestBuilder
         */
        public UpdateRolePropertiesRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. (optional)
         * @return UpdateRolePropertiesRequestBuilder
         */
        public UpdateRolePropertiesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateRoleProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return updateRolePropertiesCall(id, createUpdateRoleRequestBean, _callback);
        }

        private CreateUpdateRoleRequestBean buildBodyParams() {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = new CreateUpdateRoleRequestBean();
            createUpdateRoleRequestBean.description(this.description);
            createUpdateRoleRequestBean.name(this.name);
            return createUpdateRoleRequestBean;
        }

        /**
         * Execute updateRoleProperties request
         * @return ProjectRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectRole execute() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            ApiResponse<ProjectRole> localVarResp = updateRolePropertiesWithHttpInfo(id, createUpdateRoleRequestBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRoleProperties request with HTTP info returned
         * @return ApiResponse&lt;ProjectRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectRole> executeWithHttpInfo() throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return updateRolePropertiesWithHttpInfo(id, createUpdateRoleRequestBean);
        }

        /**
         * Execute updateRoleProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectRole> _callback) throws ApiException {
            CreateUpdateRoleRequestBean createUpdateRoleRequestBean = buildBodyParams();
            return updateRolePropertiesAsync(id, createUpdateRoleRequestBean, _callback);
        }
    }

    /**
     * Fully update project role
     * Updates the project role&#39;s name and description. You must include both a name and a description in the request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](https://dac-static.atlassian.com) to get a list of project role IDs. (required)
     * @param createUpdateRoleRequestBean  (required)
     * @return UpdateRolePropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRolePropertiesRequestBuilder updateRoleProperties(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateRolePropertiesRequestBuilder(id);
    }
}
