/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldReplacement;
import com.konfigthis.client.model.DeleteAndReplaceVersionBean;
import java.time.LocalDate;
import com.konfigthis.client.model.PageBeanVersion;
import com.konfigthis.client.model.SimpleLink;
import java.net.URI;
import com.konfigthis.client.model.Version;
import com.konfigthis.client.model.VersionApprover;
import com.konfigthis.client.model.VersionIssueCounts;
import com.konfigthis.client.model.VersionIssuesStatus;
import com.konfigthis.client.model.VersionMoveBean;
import com.konfigthis.client.model.VersionRelatedWork;
import com.konfigthis.client.model.VersionUnresolvedIssuesCount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectVersionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectVersionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectVersionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createProjectVersionCall(Version version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = version;

        // create path and map variables
        String localVarPath = "/rest/api/3/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectVersionValidateBeforeCall(Version version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createProjectVersion(Async)");
        }

        return createProjectVersionCall(version, _callback);

    }


    private ApiResponse<Version> createProjectVersionWithHttpInfo(Version version) throws ApiException {
        okhttp3.Call localVarCall = createProjectVersionValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectVersionAsync(Version version, final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectVersionValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectVersionRequestBuilder {
        private String description;
        private List<VersionApprover> approvers;
        private Boolean archived;
        private String driver;
        private String expand;
        private String id;
        private VersionIssuesStatus issuesStatusForFixVersion;
        private URI moveUnfixedIssuesTo;
        private String name;
        private List<SimpleLink> operations;
        private Boolean overdue;
        private String project;
        private Long projectId;
        private LocalDate releaseDate;
        private Boolean released;
        private URI self;
        private LocalDate startDate;
        private String userReleaseDate;
        private String userStartDate;

        private CreateProjectVersionRequestBuilder() {
        }

        /**
         * Set description
         * @param description The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set approvers
         * @param approvers If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder approvers(List<VersionApprover> approvers) {
            this.approvers = approvers;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Indicates that the version is archived. Optional when creating or updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set driver
         * @param driver If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder driver(String driver) {
            this.driver = driver;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuesStatusForFixVersion
         * @param issuesStatusForFixVersion If the expand option &#x60;issuesstatus&#x60; is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder issuesStatusForFixVersion(VersionIssuesStatus issuesStatusForFixVersion) {
            this.issuesStatusForFixVersion = issuesStatusForFixVersion;
            return this;
        }
        
        /**
         * Set moveUnfixedIssuesTo
         * @param moveUnfixedIssuesTo The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder moveUnfixedIssuesTo(URI moveUnfixedIssuesTo) {
            this.moveUnfixedIssuesTo = moveUnfixedIssuesTo;
            return this;
        }
        
        /**
         * Set name
         * @param name The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set operations
         * @param operations If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder operations(List<SimpleLink> operations) {
            this.operations = operations;
            return this;
        }
        
        /**
         * Set overdue
         * @param overdue Indicates that the version is overdue. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder overdue(Boolean overdue) {
            this.overdue = overdue;
            return this;
        }
        
        /**
         * Set project
         * @param project Deprecated. Use &#x60;projectId&#x60;. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set releaseDate
         * @param releaseDate The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder releaseDate(LocalDate releaseDate) {
            this.releaseDate = releaseDate;
            return this;
        }
        
        /**
         * Set released
         * @param released Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder released(Boolean released) {
            this.released = released;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set userReleaseDate
         * @param userReleaseDate The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder userReleaseDate(String userReleaseDate) {
            this.userReleaseDate = userReleaseDate;
            return this;
        }
        
        /**
         * Set userStartDate
         * @param userStartDate The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format. (optional)
         * @return CreateProjectVersionRequestBuilder
         */
        public CreateProjectVersionRequestBuilder userStartDate(String userStartDate) {
            this.userStartDate = userStartDate;
            return this;
        }
        
        /**
         * Build call for createProjectVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Version version = buildBodyParams();
            return createProjectVersionCall(version, _callback);
        }

        private Version buildBodyParams() {
            Version version = new Version();
            version.description(this.description);
            version.approvers(this.approvers);
            version.archived(this.archived);
            version.driver(this.driver);
            version.expand(this.expand);
            version.id(this.id);
            version.issuesStatusForFixVersion(this.issuesStatusForFixVersion);
            version.moveUnfixedIssuesTo(this.moveUnfixedIssuesTo);
            version.name(this.name);
            version.operations(this.operations);
            version.overdue(this.overdue);
            version.project(this.project);
            version.projectId(this.projectId);
            version.releaseDate(this.releaseDate);
            version.released(this.released);
            version.self(this.self);
            version.startDate(this.startDate);
            version.userReleaseDate(this.userReleaseDate);
            version.userStartDate(this.userStartDate);
            return version;
        }

        /**
         * Execute createProjectVersion request
         * @return Version
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public Version execute() throws ApiException {
            Version version = buildBodyParams();
            ApiResponse<Version> localVarResp = createProjectVersionWithHttpInfo(version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectVersion request with HTTP info returned
         * @return ApiResponse&lt;Version&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Version> executeWithHttpInfo() throws ApiException {
            Version version = buildBodyParams();
            return createProjectVersionWithHttpInfo(version);
        }

        /**
         * Execute createProjectVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Version> _callback) throws ApiException {
            Version version = buildBodyParams();
            return createProjectVersionAsync(version, _callback);
        }
    }

    /**
     * Create version
     * Creates a project version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
     * @param version  (required)
     * @return CreateProjectVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectVersionRequestBuilder createProjectVersion() throws IllegalArgumentException {
        return new CreateProjectVersionRequestBuilder();
    }
    private okhttp3.Call createRelatedWorkCall(String id, VersionRelatedWork versionRelatedWork, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = versionRelatedWork;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/relatedwork"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRelatedWorkValidateBeforeCall(String id, VersionRelatedWork versionRelatedWork, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createRelatedWork(Async)");
        }

        // verify the required parameter 'versionRelatedWork' is set
        if (versionRelatedWork == null) {
            throw new ApiException("Missing the required parameter 'versionRelatedWork' when calling createRelatedWork(Async)");
        }

        return createRelatedWorkCall(id, versionRelatedWork, _callback);

    }


    private ApiResponse<VersionRelatedWork> createRelatedWorkWithHttpInfo(String id, VersionRelatedWork versionRelatedWork) throws ApiException {
        okhttp3.Call localVarCall = createRelatedWorkValidateBeforeCall(id, versionRelatedWork, null);
        Type localVarReturnType = new TypeToken<VersionRelatedWork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRelatedWorkAsync(String id, VersionRelatedWork versionRelatedWork, final ApiCallback<VersionRelatedWork> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRelatedWorkValidateBeforeCall(id, versionRelatedWork, _callback);
        Type localVarReturnType = new TypeToken<VersionRelatedWork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRelatedWorkRequestBuilder {
        private final String category;
        private final String id;
        private String title;
        private Long issueId;
        private String relatedWorkId;
        private URI url;

        private CreateRelatedWorkRequestBuilder(String category, String id) {
            this.category = category;
            this.id = id;
        }

        /**
         * Set title
         * @param title The title of the related work (optional)
         * @return CreateRelatedWorkRequestBuilder
         */
        public CreateRelatedWorkRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set issueId
         * @param issueId The title of the related work (optional)
         * @return CreateRelatedWorkRequestBuilder
         */
        public CreateRelatedWorkRequestBuilder issueId(Long issueId) {
            this.issueId = issueId;
            return this;
        }
        
        /**
         * Set relatedWorkId
         * @param relatedWorkId The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it. (optional)
         * @return CreateRelatedWorkRequestBuilder
         */
        public CreateRelatedWorkRequestBuilder relatedWorkId(String relatedWorkId) {
            this.relatedWorkId = relatedWorkId;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL of the related work (optional)
         * @return CreateRelatedWorkRequestBuilder
         */
        public CreateRelatedWorkRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Build call for createRelatedWork
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return createRelatedWorkCall(id, versionRelatedWork, _callback);
        }

        private VersionRelatedWork buildBodyParams() {
            VersionRelatedWork versionRelatedWork = new VersionRelatedWork();
            versionRelatedWork.title(this.title);
            versionRelatedWork.category(this.category);
            versionRelatedWork.issueId(this.issueId);
            versionRelatedWork.relatedWorkId(this.relatedWorkId);
            versionRelatedWork.url(this.url);
            return versionRelatedWork;
        }

        /**
         * Execute createRelatedWork request
         * @return VersionRelatedWork
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public VersionRelatedWork execute() throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            ApiResponse<VersionRelatedWork> localVarResp = createRelatedWorkWithHttpInfo(id, versionRelatedWork);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRelatedWork request with HTTP info returned
         * @return ApiResponse&lt;VersionRelatedWork&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionRelatedWork> executeWithHttpInfo() throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return createRelatedWorkWithHttpInfo(id, versionRelatedWork);
        }

        /**
         * Execute createRelatedWork request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionRelatedWork> _callback) throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return createRelatedWorkAsync(id, versionRelatedWork, _callback);
        }
    }

    /**
     * Create related work
     * Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param id  (required)
     * @param versionRelatedWork  (required)
     * @return CreateRelatedWorkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRelatedWorkRequestBuilder createRelatedWork(String category, String id) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateRelatedWorkRequestBuilder(category, id);
    }
    private okhttp3.Call deleteAndReplaceVersionCall(String id, DeleteAndReplaceVersionBean deleteAndReplaceVersionBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAndReplaceVersionBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/removeAndSwap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAndReplaceVersionValidateBeforeCall(String id, DeleteAndReplaceVersionBean deleteAndReplaceVersionBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAndReplaceVersion(Async)");
        }

        // verify the required parameter 'deleteAndReplaceVersionBean' is set
        if (deleteAndReplaceVersionBean == null) {
            throw new ApiException("Missing the required parameter 'deleteAndReplaceVersionBean' when calling deleteAndReplaceVersion(Async)");
        }

        return deleteAndReplaceVersionCall(id, deleteAndReplaceVersionBean, _callback);

    }


    private ApiResponse<Object> deleteAndReplaceVersionWithHttpInfo(String id, DeleteAndReplaceVersionBean deleteAndReplaceVersionBean) throws ApiException {
        okhttp3.Call localVarCall = deleteAndReplaceVersionValidateBeforeCall(id, deleteAndReplaceVersionBean, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAndReplaceVersionAsync(String id, DeleteAndReplaceVersionBean deleteAndReplaceVersionBean, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAndReplaceVersionValidateBeforeCall(id, deleteAndReplaceVersionBean, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAndReplaceVersionRequestBuilder {
        private final String id;
        private List<CustomFieldReplacement> customFieldReplacementList;
        private Long moveAffectedIssuesTo;
        private Long moveFixIssuesTo;

        private DeleteAndReplaceVersionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set customFieldReplacementList
         * @param customFieldReplacementList An array of custom field IDs (&#x60;customFieldId&#x60;) and version IDs (&#x60;moveTo&#x60;) to update when the fields contain the deleted version. (optional)
         * @return DeleteAndReplaceVersionRequestBuilder
         */
        public DeleteAndReplaceVersionRequestBuilder customFieldReplacementList(List<CustomFieldReplacement> customFieldReplacementList) {
            this.customFieldReplacementList = customFieldReplacementList;
            return this;
        }
        
        /**
         * Set moveAffectedIssuesTo
         * @param moveAffectedIssuesTo The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version. (optional)
         * @return DeleteAndReplaceVersionRequestBuilder
         */
        public DeleteAndReplaceVersionRequestBuilder moveAffectedIssuesTo(Long moveAffectedIssuesTo) {
            this.moveAffectedIssuesTo = moveAffectedIssuesTo;
            return this;
        }
        
        /**
         * Set moveFixIssuesTo
         * @param moveFixIssuesTo The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version. (optional)
         * @return DeleteAndReplaceVersionRequestBuilder
         */
        public DeleteAndReplaceVersionRequestBuilder moveFixIssuesTo(Long moveFixIssuesTo) {
            this.moveFixIssuesTo = moveFixIssuesTo;
            return this;
        }
        
        /**
         * Build call for deleteAndReplaceVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = buildBodyParams();
            return deleteAndReplaceVersionCall(id, deleteAndReplaceVersionBean, _callback);
        }

        private DeleteAndReplaceVersionBean buildBodyParams() {
            DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = new DeleteAndReplaceVersionBean();
            deleteAndReplaceVersionBean.customFieldReplacementList(this.customFieldReplacementList);
            deleteAndReplaceVersionBean.moveAffectedIssuesTo(this.moveAffectedIssuesTo);
            deleteAndReplaceVersionBean.moveFixIssuesTo(this.moveFixIssuesTo);
            return deleteAndReplaceVersionBean;
        }

        /**
         * Execute deleteAndReplaceVersion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = buildBodyParams();
            ApiResponse<Object> localVarResp = deleteAndReplaceVersionWithHttpInfo(id, deleteAndReplaceVersionBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAndReplaceVersion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = buildBodyParams();
            return deleteAndReplaceVersionWithHttpInfo(id, deleteAndReplaceVersionBean);
        }

        /**
         * Execute deleteAndReplaceVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = buildBodyParams();
            return deleteAndReplaceVersionAsync(id, deleteAndReplaceVersionBean, _callback);
        }
    }

    /**
     * Delete and replace version
     * Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, or any version picker custom fields. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param id The ID of the version. (required)
     * @param deleteAndReplaceVersionBean  (required)
     * @return DeleteAndReplaceVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAndReplaceVersionRequestBuilder deleteAndReplaceVersion(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteAndReplaceVersionRequestBuilder(id);
    }
    private okhttp3.Call deleteProjectVersionCall(String id, String moveFixIssuesTo, String moveAffectedIssuesTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moveFixIssuesTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moveFixIssuesTo", moveFixIssuesTo));
        }

        if (moveAffectedIssuesTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moveAffectedIssuesTo", moveAffectedIssuesTo));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectVersionValidateBeforeCall(String id, String moveFixIssuesTo, String moveAffectedIssuesTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProjectVersion(Async)");
        }

        return deleteProjectVersionCall(id, moveFixIssuesTo, moveAffectedIssuesTo, _callback);

    }


    private ApiResponse<Void> deleteProjectVersionWithHttpInfo(String id, String moveFixIssuesTo, String moveAffectedIssuesTo) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectVersionValidateBeforeCall(id, moveFixIssuesTo, moveAffectedIssuesTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProjectVersionAsync(String id, String moveFixIssuesTo, String moveAffectedIssuesTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectVersionValidateBeforeCall(id, moveFixIssuesTo, moveAffectedIssuesTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProjectVersionRequestBuilder {
        private final String id;
        private String moveFixIssuesTo;
        private String moveAffectedIssuesTo;

        private DeleteProjectVersionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set moveFixIssuesTo
         * @param moveFixIssuesTo The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. (optional)
         * @return DeleteProjectVersionRequestBuilder
         */
        public DeleteProjectVersionRequestBuilder moveFixIssuesTo(String moveFixIssuesTo) {
            this.moveFixIssuesTo = moveFixIssuesTo;
            return this;
        }
        
        /**
         * Set moveAffectedIssuesTo
         * @param moveAffectedIssuesTo The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. (optional)
         * @return DeleteProjectVersionRequestBuilder
         */
        public DeleteProjectVersionRequestBuilder moveAffectedIssuesTo(String moveAffectedIssuesTo) {
            this.moveAffectedIssuesTo = moveAffectedIssuesTo;
            return this;
        }
        
        /**
         * Build call for deleteProjectVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectVersionCall(id, moveFixIssuesTo, moveAffectedIssuesTo, _callback);
        }


        /**
         * Execute deleteProjectVersion request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteProjectVersionWithHttpInfo(id, moveFixIssuesTo, moveAffectedIssuesTo);
        }

        /**
         * Execute deleteProjectVersion request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProjectVersionWithHttpInfo(id, moveFixIssuesTo, moveAffectedIssuesTo);
        }

        /**
         * Execute deleteProjectVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProjectVersionAsync(id, moveFixIssuesTo, moveAffectedIssuesTo, _callback);
        }
    }

    /**
     * Delete version
     * Deletes a project version.  Deprecated, use [Delete and replace version](https://dac-static.atlassian.com) that supports swapping version values in custom fields, in addition to the swapping for &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60; or &#x60;affectedVersion&#x60;. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; that contain the deleted version are cleared.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param id The ID of the version. (required)
     * @return DeleteProjectVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeleteProjectVersionRequestBuilder deleteProjectVersion(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteProjectVersionRequestBuilder(id);
    }
    private okhttp3.Call deleteRelatedWorkCall(String versionId, String relatedWorkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}"
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "relatedWorkId" + "}", localVarApiClient.escapeString(relatedWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRelatedWorkValidateBeforeCall(String versionId, String relatedWorkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteRelatedWork(Async)");
        }

        // verify the required parameter 'relatedWorkId' is set
        if (relatedWorkId == null) {
            throw new ApiException("Missing the required parameter 'relatedWorkId' when calling deleteRelatedWork(Async)");
        }

        return deleteRelatedWorkCall(versionId, relatedWorkId, _callback);

    }


    private ApiResponse<Void> deleteRelatedWorkWithHttpInfo(String versionId, String relatedWorkId) throws ApiException {
        okhttp3.Call localVarCall = deleteRelatedWorkValidateBeforeCall(versionId, relatedWorkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRelatedWorkAsync(String versionId, String relatedWorkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRelatedWorkValidateBeforeCall(versionId, relatedWorkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRelatedWorkRequestBuilder {
        private final String versionId;
        private final String relatedWorkId;

        private DeleteRelatedWorkRequestBuilder(String versionId, String relatedWorkId) {
            this.versionId = versionId;
            this.relatedWorkId = relatedWorkId;
        }

        /**
         * Build call for deleteRelatedWork
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the related work is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if  the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version/related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRelatedWorkCall(versionId, relatedWorkId, _callback);
        }


        /**
         * Execute deleteRelatedWork request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the related work is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if  the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version/related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRelatedWorkWithHttpInfo(versionId, relatedWorkId);
        }

        /**
         * Execute deleteRelatedWork request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the related work is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if  the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version/related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRelatedWorkWithHttpInfo(versionId, relatedWorkId);
        }

        /**
         * Execute deleteRelatedWork request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the related work is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if  the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version/related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRelatedWorkAsync(versionId, relatedWorkId, _callback);
        }
    }

    /**
     * Delete related work
     * Deletes the given related work for the given version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param versionId The ID of the version that the target related work belongs to. (required)
     * @param relatedWorkId The ID of the related work to delete. (required)
     * @return DeleteRelatedWorkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the related work is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if  the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version/related work is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRelatedWorkRequestBuilder deleteRelatedWork(String versionId, String relatedWorkId) throws IllegalArgumentException {
        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        if (relatedWorkId == null) throw new IllegalArgumentException("\"relatedWorkId\" is required but got null");
            

        return new DeleteRelatedWorkRequestBuilder(versionId, relatedWorkId);
    }
    private okhttp3.Call getAllProjectVersionsCall(String projectIdOrKey, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/versions"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProjectVersionsValidateBeforeCall(String projectIdOrKey, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getAllProjectVersions(Async)");
        }

        return getAllProjectVersionsCall(projectIdOrKey, expand, _callback);

    }


    private ApiResponse<List<Version>> getAllProjectVersionsWithHttpInfo(String projectIdOrKey, String expand) throws ApiException {
        okhttp3.Call localVarCall = getAllProjectVersionsValidateBeforeCall(projectIdOrKey, expand, null);
        Type localVarReturnType = new TypeToken<List<Version>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProjectVersionsAsync(String projectIdOrKey, String expand, final ApiCallback<List<Version>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProjectVersionsValidateBeforeCall(projectIdOrKey, expand, _callback);
        Type localVarReturnType = new TypeToken<List<Version>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllProjectVersionsRequestBuilder {
        private final String projectIdOrKey;
        private String expand;

        private GetAllProjectVersionsRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts &#x60;operations&#x60;, which returns actions that can be performed on the version. (optional)
         * @return GetAllProjectVersionsRequestBuilder
         */
        public GetAllProjectVersionsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getAllProjectVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProjectVersionsCall(projectIdOrKey, expand, _callback);
        }


        /**
         * Execute getAllProjectVersions request
         * @return List&lt;Version&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public List<Version> execute() throws ApiException {
            ApiResponse<List<Version>> localVarResp = getAllProjectVersionsWithHttpInfo(projectIdOrKey, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllProjectVersions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Version&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Version>> executeWithHttpInfo() throws ApiException {
            return getAllProjectVersionsWithHttpInfo(projectIdOrKey, expand);
        }

        /**
         * Execute getAllProjectVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Version>> _callback) throws ApiException {
            return getAllProjectVersionsAsync(projectIdOrKey, expand, _callback);
        }
    }

    /**
     * Get project versions
     * Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](https://dac-static.atlassian.com) if you want to get the versions in a project with pagination.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return GetAllProjectVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllProjectVersionsRequestBuilder getAllProjectVersions(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetAllProjectVersionsRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call getProjectVersionCall(String id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVersionValidateBeforeCall(String id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProjectVersion(Async)");
        }

        return getProjectVersionCall(id, expand, _callback);

    }


    private ApiResponse<Version> getProjectVersionWithHttpInfo(String id, String expand) throws ApiException {
        okhttp3.Call localVarCall = getProjectVersionValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectVersionAsync(String id, String expand, final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVersionValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectVersionRequestBuilder {
        private final String id;
        private String expand;

        private GetProjectVersionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing the Atlassian account IDs of approvers for this version. (optional)
         * @return GetProjectVersionRequestBuilder
         */
        public GetProjectVersionRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getProjectVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectVersionCall(id, expand, _callback);
        }


        /**
         * Execute getProjectVersion request
         * @return Version
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public Version execute() throws ApiException {
            ApiResponse<Version> localVarResp = getProjectVersionWithHttpInfo(id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectVersion request with HTTP info returned
         * @return ApiResponse&lt;Version&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Version> executeWithHttpInfo() throws ApiException {
            return getProjectVersionWithHttpInfo(id, expand);
        }

        /**
         * Execute getProjectVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Version> _callback) throws ApiException {
            return getProjectVersionAsync(id, expand, _callback);
        }
    }

    /**
     * Get version
     * Returns a project version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     * @param id The ID of the version. (required)
     * @return GetProjectVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectVersionRequestBuilder getProjectVersion(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetProjectVersionRequestBuilder(id);
    }
    private okhttp3.Call getRelatedIssueCountsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/relatedIssueCounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedIssueCountsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelatedIssueCounts(Async)");
        }

        return getRelatedIssueCountsCall(id, _callback);

    }


    private ApiResponse<VersionIssueCounts> getRelatedIssueCountsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRelatedIssueCountsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VersionIssueCounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelatedIssueCountsAsync(String id, final ApiCallback<VersionIssueCounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedIssueCountsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VersionIssueCounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRelatedIssueCountsRequestBuilder {
        private final String id;

        private GetRelatedIssueCountsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRelatedIssueCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelatedIssueCountsCall(id, _callback);
        }


        /**
         * Execute getRelatedIssueCounts request
         * @return VersionIssueCounts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public VersionIssueCounts execute() throws ApiException {
            ApiResponse<VersionIssueCounts> localVarResp = getRelatedIssueCountsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRelatedIssueCounts request with HTTP info returned
         * @return ApiResponse&lt;VersionIssueCounts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionIssueCounts> executeWithHttpInfo() throws ApiException {
            return getRelatedIssueCountsWithHttpInfo(id);
        }

        /**
         * Execute getRelatedIssueCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionIssueCounts> _callback) throws ApiException {
            return getRelatedIssueCountsAsync(id, _callback);
        }
    }

    /**
     * Get version&#39;s related issues count
     * Returns the following counts for a version:   *  Number of issues where the &#x60;fixVersion&#x60; is set to the version.  *  Number of issues where the &#x60;affectedVersion&#x60; is set to the version.  *  Number of issues where a version custom field is set to the version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* project permission for the project that contains the version.
     * @param id The ID of the version. (required)
     * @return GetRelatedIssueCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetRelatedIssueCountsRequestBuilder getRelatedIssueCounts(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRelatedIssueCountsRequestBuilder(id);
    }
    private okhttp3.Call getRelatedWorkItemsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/relatedwork"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedWorkItemsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelatedWorkItems(Async)");
        }

        return getRelatedWorkItemsCall(id, _callback);

    }


    private ApiResponse<List<VersionRelatedWork>> getRelatedWorkItemsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRelatedWorkItemsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<VersionRelatedWork>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelatedWorkItemsAsync(String id, final ApiCallback<List<VersionRelatedWork>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedWorkItemsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<VersionRelatedWork>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRelatedWorkItemsRequestBuilder {
        private final String id;

        private GetRelatedWorkItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRelatedWorkItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if reading related work fails </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelatedWorkItemsCall(id, _callback);
        }


        /**
         * Execute getRelatedWorkItems request
         * @return List&lt;VersionRelatedWork&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if reading related work fails </td><td>  -  </td></tr>
         </table>
         */
        public List<VersionRelatedWork> execute() throws ApiException {
            ApiResponse<List<VersionRelatedWork>> localVarResp = getRelatedWorkItemsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRelatedWorkItems request with HTTP info returned
         * @return ApiResponse&lt;List&lt;VersionRelatedWork&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if reading related work fails </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<VersionRelatedWork>> executeWithHttpInfo() throws ApiException {
            return getRelatedWorkItemsWithHttpInfo(id);
        }

        /**
         * Execute getRelatedWorkItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Returned if reading related work fails </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<VersionRelatedWork>> _callback) throws ApiException {
            return getRelatedWorkItemsAsync(id, _callback);
        }
    }

    /**
     * Get related work
     * Returns related work items for the given version id.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     * @param id The ID of the version. (required)
     * @return GetRelatedWorkItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned if reading related work fails </td><td>  -  </td></tr>
     </table>
     */
    public GetRelatedWorkItemsRequestBuilder getRelatedWorkItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRelatedWorkItemsRequestBuilder(id);
    }
    private okhttp3.Call getUnresolvedIssueCountCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/unresolvedIssueCount"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnresolvedIssueCountValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUnresolvedIssueCount(Async)");
        }

        return getUnresolvedIssueCountCall(id, _callback);

    }


    private ApiResponse<VersionUnresolvedIssuesCount> getUnresolvedIssueCountWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUnresolvedIssueCountValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VersionUnresolvedIssuesCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnresolvedIssueCountAsync(String id, final ApiCallback<VersionUnresolvedIssuesCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnresolvedIssueCountValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VersionUnresolvedIssuesCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnresolvedIssueCountRequestBuilder {
        private final String id;

        private GetUnresolvedIssueCountRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getUnresolvedIssueCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnresolvedIssueCountCall(id, _callback);
        }


        /**
         * Execute getUnresolvedIssueCount request
         * @return VersionUnresolvedIssuesCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public VersionUnresolvedIssuesCount execute() throws ApiException {
            ApiResponse<VersionUnresolvedIssuesCount> localVarResp = getUnresolvedIssueCountWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnresolvedIssueCount request with HTTP info returned
         * @return ApiResponse&lt;VersionUnresolvedIssuesCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionUnresolvedIssuesCount> executeWithHttpInfo() throws ApiException {
            return getUnresolvedIssueCountWithHttpInfo(id);
        }

        /**
         * Execute getUnresolvedIssueCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionUnresolvedIssuesCount> _callback) throws ApiException {
            return getUnresolvedIssueCountAsync(id, _callback);
        }
    }

    /**
     * Get version&#39;s unresolved issues count
     * Returns counts of the issues and unresolved issues for the project version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* project permission for the project that contains the version.
     * @param id The ID of the version. (required)
     * @return GetUnresolvedIssueCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the version is not found.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
     </table>
     */
    public GetUnresolvedIssueCountRequestBuilder getUnresolvedIssueCount(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUnresolvedIssueCountRequestBuilder(id);
    }
    private okhttp3.Call listPaginatedCall(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String query, String status, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/version"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaginatedValidateBeforeCall(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String query, String status, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling listPaginated(Async)");
        }

        return listPaginatedCall(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand, _callback);

    }


    private ApiResponse<PageBeanVersion> listPaginatedWithHttpInfo(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String query, String status, String expand) throws ApiException {
        okhttp3.Call localVarCall = listPaginatedValidateBeforeCall(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPaginatedAsync(String projectIdOrKey, Long startAt, Integer maxResults, String orderBy, String query, String status, String expand, final ApiCallback<PageBeanVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaginatedValidateBeforeCall(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPaginatedRequestBuilder {
        private final String projectIdOrKey;
        private Long startAt;
        private Integer maxResults;
        private String orderBy;
        private String query;
        private String status;
        private String expand;

        private ListPaginatedRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;description&#x60; Sorts by version description.  *  &#x60;name&#x60; Sorts by version name.  *  &#x60;releaseDate&#x60; Sorts by release date, starting with the oldest date. Versions with no release date are listed last.  *  &#x60;sequence&#x60; Sorts by the order of appearance in the user interface.  *  &#x60;startDate&#x60; Sorts by start date, starting with the oldest date. Versions with no start date are listed last. (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set query
         * @param query Filter the results using a literal string. Versions with matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive). (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set status
         * @param status A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are &#x60;released&#x60;, &#x60;unreleased&#x60;, and &#x60;archived&#x60;. (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;issuesstatus&#x60; Returns the number of issues in each status category for each version.  *  &#x60;operations&#x60; Returns actions that can be performed on the specified version.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing the approvers for this version. (optional)
         * @return ListPaginatedRequestBuilder
         */
        public ListPaginatedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPaginatedCall(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand, _callback);
        }


        /**
         * Execute listPaginated request
         * @return PageBeanVersion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanVersion execute() throws ApiException {
            ApiResponse<PageBeanVersion> localVarResp = listPaginatedWithHttpInfo(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageBeanVersion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanVersion> executeWithHttpInfo() throws ApiException {
            return listPaginatedWithHttpInfo(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand);
        }

        /**
         * Execute listPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanVersion> _callback) throws ApiException {
            return listPaginatedAsync(projectIdOrKey, startAt, maxResults, orderBy, query, status, expand, _callback);
        }
    }

    /**
     * Get project versions paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of all versions in a project. See the [Get project versions](https://dac-static.atlassian.com) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return ListPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public ListPaginatedRequestBuilder listPaginated(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new ListPaginatedRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call mergeVersionsCall(String id, String moveIssuesTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "moveIssuesTo" + "}", localVarApiClient.escapeString(moveIssuesTo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeVersionsValidateBeforeCall(String id, String moveIssuesTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling mergeVersions(Async)");
        }

        // verify the required parameter 'moveIssuesTo' is set
        if (moveIssuesTo == null) {
            throw new ApiException("Missing the required parameter 'moveIssuesTo' when calling mergeVersions(Async)");
        }

        return mergeVersionsCall(id, moveIssuesTo, _callback);

    }


    private ApiResponse<Object> mergeVersionsWithHttpInfo(String id, String moveIssuesTo) throws ApiException {
        okhttp3.Call localVarCall = mergeVersionsValidateBeforeCall(id, moveIssuesTo, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call mergeVersionsAsync(String id, String moveIssuesTo, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeVersionsValidateBeforeCall(id, moveIssuesTo, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MergeVersionsRequestBuilder {
        private final String id;
        private final String moveIssuesTo;

        private MergeVersionsRequestBuilder(String id, String moveIssuesTo) {
            this.id = id;
            this.moveIssuesTo = moveIssuesTo;
        }

        /**
         * Build call for mergeVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version to be deleted or the version to merge to are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return mergeVersionsCall(id, moveIssuesTo, _callback);
        }


        /**
         * Execute mergeVersions request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version to be deleted or the version to merge to are not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = mergeVersionsWithHttpInfo(id, moveIssuesTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute mergeVersions request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version to be deleted or the version to merge to are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return mergeVersionsWithHttpInfo(id, moveIssuesTo);
        }

        /**
         * Execute mergeVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version to be deleted or the version to merge to are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return mergeVersionsAsync(id, moveIssuesTo, _callback);
        }
    }

    /**
     * Merge versions
     * Merges two project versions. The merge is completed by deleting the version specified in &#x60;id&#x60; and replacing any occurrences of its ID in &#x60;fixVersion&#x60; with the version ID specified in &#x60;moveIssuesTo&#x60;.  Consider using [Delete and replace version](https://dac-static.atlassian.com) instead. This resource supports swapping version values in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and custom fields.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param id The ID of the version to delete. (required)
     * @param moveIssuesTo The ID of the version to merge into. (required)
     * @return MergeVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the version is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version to be deleted or the version to merge to are not found. </td><td>  -  </td></tr>
     </table>
     */
    public MergeVersionsRequestBuilder mergeVersions(String id, String moveIssuesTo) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (moveIssuesTo == null) throw new IllegalArgumentException("\"moveIssuesTo\" is required but got null");
            

        return new MergeVersionsRequestBuilder(id, moveIssuesTo);
    }
    private okhttp3.Call updateRelatedWorkCall(String id, VersionRelatedWork versionRelatedWork, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = versionRelatedWork;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/relatedwork"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRelatedWorkValidateBeforeCall(String id, VersionRelatedWork versionRelatedWork, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRelatedWork(Async)");
        }

        // verify the required parameter 'versionRelatedWork' is set
        if (versionRelatedWork == null) {
            throw new ApiException("Missing the required parameter 'versionRelatedWork' when calling updateRelatedWork(Async)");
        }

        return updateRelatedWorkCall(id, versionRelatedWork, _callback);

    }


    private ApiResponse<VersionRelatedWork> updateRelatedWorkWithHttpInfo(String id, VersionRelatedWork versionRelatedWork) throws ApiException {
        okhttp3.Call localVarCall = updateRelatedWorkValidateBeforeCall(id, versionRelatedWork, null);
        Type localVarReturnType = new TypeToken<VersionRelatedWork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRelatedWorkAsync(String id, VersionRelatedWork versionRelatedWork, final ApiCallback<VersionRelatedWork> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRelatedWorkValidateBeforeCall(id, versionRelatedWork, _callback);
        Type localVarReturnType = new TypeToken<VersionRelatedWork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRelatedWorkRequestBuilder {
        private final String category;
        private final String id;
        private String title;
        private Long issueId;
        private String relatedWorkId;
        private URI url;

        private UpdateRelatedWorkRequestBuilder(String category, String id) {
            this.category = category;
            this.id = id;
        }

        /**
         * Set title
         * @param title The title of the related work (optional)
         * @return UpdateRelatedWorkRequestBuilder
         */
        public UpdateRelatedWorkRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set issueId
         * @param issueId The title of the related work (optional)
         * @return UpdateRelatedWorkRequestBuilder
         */
        public UpdateRelatedWorkRequestBuilder issueId(Long issueId) {
            this.issueId = issueId;
            return this;
        }
        
        /**
         * Set relatedWorkId
         * @param relatedWorkId The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it. (optional)
         * @return UpdateRelatedWorkRequestBuilder
         */
        public UpdateRelatedWorkRequestBuilder relatedWorkId(String relatedWorkId) {
            this.relatedWorkId = relatedWorkId;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL of the related work (optional)
         * @return UpdateRelatedWorkRequestBuilder
         */
        public UpdateRelatedWorkRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Build call for updateRelatedWork
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful together with updated related work. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request data is invalid </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or the related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return updateRelatedWorkCall(id, versionRelatedWork, _callback);
        }

        private VersionRelatedWork buildBodyParams() {
            VersionRelatedWork versionRelatedWork = new VersionRelatedWork();
            versionRelatedWork.title(this.title);
            versionRelatedWork.category(this.category);
            versionRelatedWork.issueId(this.issueId);
            versionRelatedWork.relatedWorkId(this.relatedWorkId);
            versionRelatedWork.url(this.url);
            return versionRelatedWork;
        }

        /**
         * Execute updateRelatedWork request
         * @return VersionRelatedWork
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful together with updated related work. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request data is invalid </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or the related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public VersionRelatedWork execute() throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            ApiResponse<VersionRelatedWork> localVarResp = updateRelatedWorkWithHttpInfo(id, versionRelatedWork);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRelatedWork request with HTTP info returned
         * @return ApiResponse&lt;VersionRelatedWork&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful together with updated related work. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request data is invalid </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or the related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VersionRelatedWork> executeWithHttpInfo() throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return updateRelatedWorkWithHttpInfo(id, versionRelatedWork);
        }

        /**
         * Execute updateRelatedWork request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful together with updated related work. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request data is invalid </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or the related work is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VersionRelatedWork> _callback) throws ApiException {
            VersionRelatedWork versionRelatedWork = buildBodyParams();
            return updateRelatedWorkAsync(id, versionRelatedWork, _callback);
        }
    }

    /**
     * Update related work
     * Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can&#39;t be edited.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     * @param id The ID of the version to update the related work on. For the related work id, pass it to the input JSON. (required)
     * @param versionRelatedWork  (required)
     * @return UpdateRelatedWorkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful together with updated related work. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request data is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version or the related work is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRelatedWorkRequestBuilder updateRelatedWork(String category, String id) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRelatedWorkRequestBuilder(category, id);
    }
    private okhttp3.Call updateSequenceWithinProjectCall(String id, VersionMoveBean versionMoveBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = versionMoveBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}/move"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSequenceWithinProjectValidateBeforeCall(String id, VersionMoveBean versionMoveBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSequenceWithinProject(Async)");
        }

        // verify the required parameter 'versionMoveBean' is set
        if (versionMoveBean == null) {
            throw new ApiException("Missing the required parameter 'versionMoveBean' when calling updateSequenceWithinProject(Async)");
        }

        return updateSequenceWithinProjectCall(id, versionMoveBean, _callback);

    }


    private ApiResponse<Version> updateSequenceWithinProjectWithHttpInfo(String id, VersionMoveBean versionMoveBean) throws ApiException {
        okhttp3.Call localVarCall = updateSequenceWithinProjectValidateBeforeCall(id, versionMoveBean, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSequenceWithinProjectAsync(String id, VersionMoveBean versionMoveBean, final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSequenceWithinProjectValidateBeforeCall(id, versionMoveBean, _callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSequenceWithinProjectRequestBuilder {
        private final String id;
        private URI after;
        private String position;

        private UpdateSequenceWithinProjectRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set after
         * @param after The URL (self link) of the version after which to place the moved version. Cannot be used with &#x60;position&#x60;. (optional)
         * @return UpdateSequenceWithinProjectRequestBuilder
         */
        public UpdateSequenceWithinProjectRequestBuilder after(URI after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set position
         * @param position An absolute position in which to place the moved version. Cannot be used with &#x60;after&#x60;. (optional)
         * @return UpdateSequenceWithinProjectRequestBuilder
         */
        public UpdateSequenceWithinProjectRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for updateSequenceWithinProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or move after version are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VersionMoveBean versionMoveBean = buildBodyParams();
            return updateSequenceWithinProjectCall(id, versionMoveBean, _callback);
        }

        private VersionMoveBean buildBodyParams() {
            VersionMoveBean versionMoveBean = new VersionMoveBean();
            versionMoveBean.after(this.after);
            if (this.position != null)
            versionMoveBean.position(VersionMoveBean.PositionEnum.fromValue(this.position));
            return versionMoveBean;
        }

        /**
         * Execute updateSequenceWithinProject request
         * @return Version
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or move after version are not found. </td><td>  -  </td></tr>
         </table>
         */
        public Version execute() throws ApiException {
            VersionMoveBean versionMoveBean = buildBodyParams();
            ApiResponse<Version> localVarResp = updateSequenceWithinProjectWithHttpInfo(id, versionMoveBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSequenceWithinProject request with HTTP info returned
         * @return ApiResponse&lt;Version&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or move after version are not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Version> executeWithHttpInfo() throws ApiException {
            VersionMoveBean versionMoveBean = buildBodyParams();
            return updateSequenceWithinProjectWithHttpInfo(id, versionMoveBean);
        }

        /**
         * Execute updateSequenceWithinProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version or move after version are not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Version> _callback) throws ApiException {
            VersionMoveBean versionMoveBean = buildBodyParams();
            return updateSequenceWithinProjectAsync(id, versionMoveBean, _callback);
        }
    }

    /**
     * Move version
     * Modifies the version&#39;s sequence within the project, which affects the display order of the versions in Jira.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* project permission for the project that contains the version.
     * @param id The ID of the version to be moved. (required)
     * @param versionMoveBean  (required)
     * @return UpdateSequenceWithinProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version or move after version are not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSequenceWithinProjectRequestBuilder updateSequenceWithinProject(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateSequenceWithinProjectRequestBuilder(id);
    }
    private okhttp3.Call updateVersionCall(String id, Version version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = version;

        // create path and map variables
        String localVarPath = "/rest/api/3/version/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVersionValidateBeforeCall(String id, Version version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateVersion(Async)");
        }

        return updateVersionCall(id, version, _callback);

    }


    private ApiResponse<Version> updateVersionWithHttpInfo(String id, Version version) throws ApiException {
        okhttp3.Call localVarCall = updateVersionValidateBeforeCall(id, version, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateVersionAsync(String id, Version version, final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVersionValidateBeforeCall(id, version, _callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateVersionRequestBuilder {
        private final String id;
        private String description;
        private List<VersionApprover> approvers;
        private Boolean archived;
        private String driver;
        private String expand;
        private String id;
        private VersionIssuesStatus issuesStatusForFixVersion;
        private URI moveUnfixedIssuesTo;
        private String name;
        private List<SimpleLink> operations;
        private Boolean overdue;
        private String project;
        private Long projectId;
        private LocalDate releaseDate;
        private Boolean released;
        private URI self;
        private LocalDate startDate;
        private String userReleaseDate;
        private String userStartDate;

        private UpdateVersionRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set approvers
         * @param approvers If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder approvers(List<VersionApprover> approvers) {
            this.approvers = approvers;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Indicates that the version is archived. Optional when creating or updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set driver
         * @param driver If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder driver(String driver) {
            this.driver = driver;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issuesStatusForFixVersion
         * @param issuesStatusForFixVersion If the expand option &#x60;issuesstatus&#x60; is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder issuesStatusForFixVersion(VersionIssuesStatus issuesStatusForFixVersion) {
            this.issuesStatusForFixVersion = issuesStatusForFixVersion;
            return this;
        }
        
        /**
         * Set moveUnfixedIssuesTo
         * @param moveUnfixedIssuesTo The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder moveUnfixedIssuesTo(URI moveUnfixedIssuesTo) {
            this.moveUnfixedIssuesTo = moveUnfixedIssuesTo;
            return this;
        }
        
        /**
         * Set name
         * @param name The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set operations
         * @param operations If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder operations(List<SimpleLink> operations) {
            this.operations = operations;
            return this;
        }
        
        /**
         * Set overdue
         * @param overdue Indicates that the version is overdue. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder overdue(Boolean overdue) {
            this.overdue = overdue;
            return this;
        }
        
        /**
         * Set project
         * @param project Deprecated. Use &#x60;projectId&#x60;. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder projectId(Long projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set releaseDate
         * @param releaseDate The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder releaseDate(LocalDate releaseDate) {
            this.releaseDate = releaseDate;
            return this;
        }
        
        /**
         * Set released
         * @param released Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder released(Boolean released) {
            this.released = released;
            return this;
        }
        
        /**
         * Set self
         * @param self The URL of the version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set userReleaseDate
         * @param userReleaseDate The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder userReleaseDate(String userReleaseDate) {
            this.userReleaseDate = userReleaseDate;
            return this;
        }
        
        /**
         * Set userStartDate
         * @param userStartDate The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format. (optional)
         * @return UpdateVersionRequestBuilder
         */
        public UpdateVersionRequestBuilder userStartDate(String userStartDate) {
            this.userStartDate = userStartDate;
            return this;
        }
        
        /**
         * Build call for updateVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request is invalid.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Version version = buildBodyParams();
            return updateVersionCall(id, version, _callback);
        }

        private Version buildBodyParams() {
            Version version = new Version();
            version.description(this.description);
            version.approvers(this.approvers);
            version.archived(this.archived);
            version.driver(this.driver);
            version.expand(this.expand);
            version.id(this.id);
            version.issuesStatusForFixVersion(this.issuesStatusForFixVersion);
            version.moveUnfixedIssuesTo(this.moveUnfixedIssuesTo);
            version.name(this.name);
            version.operations(this.operations);
            version.overdue(this.overdue);
            version.project(this.project);
            version.projectId(this.projectId);
            version.releaseDate(this.releaseDate);
            version.released(this.released);
            version.self(this.self);
            version.startDate(this.startDate);
            version.userReleaseDate(this.userReleaseDate);
            version.userStartDate(this.userStartDate);
            return version;
        }

        /**
         * Execute updateVersion request
         * @return Version
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request is invalid.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Version execute() throws ApiException {
            Version version = buildBodyParams();
            ApiResponse<Version> localVarResp = updateVersionWithHttpInfo(id, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateVersion request with HTTP info returned
         * @return ApiResponse&lt;Version&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request is invalid.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Version> executeWithHttpInfo() throws ApiException {
            Version version = buildBodyParams();
            return updateVersionWithHttpInfo(id, version);
        }

        /**
         * Execute updateVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  the request is invalid.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Version> _callback) throws ApiException {
            Version version = buildBodyParams();
            return updateVersionAsync(id, version, _callback);
        }
    }

    /**
     * Update version
     * Updates a project version.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     * @param id The ID of the version. (required)
     * @param version  (required)
     * @return UpdateVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  the request is invalid.  *  the user does not have the required permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the version is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVersionRequestBuilder updateVersion(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateVersionRequestBuilder(id);
    }
}
