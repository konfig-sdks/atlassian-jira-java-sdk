/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateProjectDetails;
import com.konfigthis.client.model.IssueTypeWithStatus;
import com.konfigthis.client.model.NotificationScheme;
import com.konfigthis.client.model.PageBeanProject;
import com.konfigthis.client.model.Project;
import com.konfigthis.client.model.ProjectIdentifiers;
import com.konfigthis.client.model.ProjectIssueTypeHierarchy;
import java.util.Set;
import com.konfigthis.client.model.UpdateProjectDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveProjectCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/archive"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveProjectValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling archiveProject(Async)");
        }

        return archiveProjectCall(projectIdOrKey, _callback);

    }


    private ApiResponse<Object> archiveProjectWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = archiveProjectValidateBeforeCall(projectIdOrKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call archiveProjectAsync(String projectIdOrKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveProjectValidateBeforeCall(projectIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ArchiveProjectRequestBuilder {
        private final String projectIdOrKey;

        private ArchiveProjectRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for archiveProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveProjectCall(projectIdOrKey, _callback);
        }


        /**
         * Execute archiveProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = archiveProjectWithHttpInfo(projectIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute archiveProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return archiveProjectWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute archiveProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return archiveProjectAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Archive project
     * Archives a project. You can&#39;t delete a project if it&#39;s archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return ArchiveProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveProjectRequestBuilder archiveProject(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new ArchiveProjectRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call createProjectBasedOnTemplateCall(CreateProjectDetails createProjectDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectBasedOnTemplateValidateBeforeCall(CreateProjectDetails createProjectDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createProjectDetails' is set
        if (createProjectDetails == null) {
            throw new ApiException("Missing the required parameter 'createProjectDetails' when calling createProjectBasedOnTemplate(Async)");
        }

        return createProjectBasedOnTemplateCall(createProjectDetails, _callback);

    }


    private ApiResponse<ProjectIdentifiers> createProjectBasedOnTemplateWithHttpInfo(CreateProjectDetails createProjectDetails) throws ApiException {
        okhttp3.Call localVarCall = createProjectBasedOnTemplateValidateBeforeCall(createProjectDetails, null);
        Type localVarReturnType = new TypeToken<ProjectIdentifiers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectBasedOnTemplateAsync(CreateProjectDetails createProjectDetails, final ApiCallback<ProjectIdentifiers> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectBasedOnTemplateValidateBeforeCall(createProjectDetails, _callback);
        Type localVarReturnType = new TypeToken<ProjectIdentifiers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectBasedOnTemplateRequestBuilder {
        private final String key;
        private final String name;
        private String description;
        private String assigneeType;
        private Long avatarId;
        private Long categoryId;
        private Long fieldConfigurationScheme;
        private Long issueSecurityScheme;
        private Long issueTypeScheme;
        private Long issueTypeScreenScheme;
        private String lead;
        private String leadAccountId;
        private Long notificationScheme;
        private Long permissionScheme;
        private String projectTemplateKey;
        private String projectTypeKey;
        private String url;
        private Long workflowScheme;

        private CreateProjectBasedOnTemplateRequestBuilder(String key, String name) {
            this.key = key;
            this.name = name;
        }

        /**
         * Set description
         * @param description A brief description of the project. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set assigneeType
         * @param assigneeType The default assignee when creating issues for this project. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder assigneeType(String assigneeType) {
            this.assigneeType = assigneeType;
            return this;
        }
        
        /**
         * Set avatarId
         * @param avatarId An integer value for the project&#39;s avatar. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder avatarId(Long avatarId) {
            this.avatarId = avatarId;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId The ID of the project&#39;s category. A complete list of category IDs is found using the [Get all project categories](https://dac-static.atlassian.com) operation. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder categoryId(Long categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set fieldConfigurationScheme
         * @param fieldConfigurationScheme The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](https://dac-static.atlassian.com) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder fieldConfigurationScheme(Long fieldConfigurationScheme) {
            this.fieldConfigurationScheme = fieldConfigurationScheme;
            return this;
        }
        
        /**
         * Set issueSecurityScheme
         * @param issueSecurityScheme The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](https://dac-static.atlassian.com) resource to get all issue security scheme IDs. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder issueSecurityScheme(Long issueSecurityScheme) {
            this.issueSecurityScheme = issueSecurityScheme;
            return this;
        }
        
        /**
         * Set issueTypeScheme
         * @param issueTypeScheme The ID of the issue type scheme for the project. Use the [Get all issue type schemes](https://dac-static.atlassian.com) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder issueTypeScheme(Long issueTypeScheme) {
            this.issueTypeScheme = issueTypeScheme;
            return this;
        }
        
        /**
         * Set issueTypeScreenScheme
         * @param issueTypeScreenScheme The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](https://dac-static.atlassian.com) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder issueTypeScreenScheme(Long issueTypeScreenScheme) {
            this.issueTypeScreenScheme = issueTypeScreenScheme;
            return this;
        }
        
        /**
         * Set lead
         * @param lead This parameter is deprecated because of privacy changes. Use &#x60;leadAccountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either &#x60;lead&#x60; or &#x60;leadAccountId&#x60; must be set when creating a project. Cannot be provided with &#x60;leadAccountId&#x60;. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder lead(String lead) {
            this.lead = lead;
            return this;
        }
        
        /**
         * Set leadAccountId
         * @param leadAccountId The account ID of the project lead. Either &#x60;lead&#x60; or &#x60;leadAccountId&#x60; must be set when creating a project. Cannot be provided with &#x60;lead&#x60;. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder leadAccountId(String leadAccountId) {
            this.leadAccountId = leadAccountId;
            return this;
        }
        
        /**
         * Set notificationScheme
         * @param notificationScheme The ID of the notification scheme for the project. Use the [Get notification schemes](https://dac-static.atlassian.com) resource to get a list of notification scheme IDs. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder notificationScheme(Long notificationScheme) {
            this.notificationScheme = notificationScheme;
            return this;
        }
        
        /**
         * Set permissionScheme
         * @param permissionScheme The ID of the permission scheme for the project. Use the [Get all permission schemes](https://dac-static.atlassian.com) resource to see a list of all permission scheme IDs. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder permissionScheme(Long permissionScheme) {
            this.permissionScheme = permissionScheme;
            return this;
        }
        
        /**
         * Set projectTemplateKey
         * @param projectTemplateKey A predefined configuration for a project. The type of the &#x60;projectTemplateKey&#x60; must match with the type of the &#x60;projectTypeKey&#x60;. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder projectTemplateKey(String projectTemplateKey) {
            this.projectTemplateKey = projectTemplateKey;
            return this;
        }
        
        /**
         * Set projectTypeKey
         * @param projectTypeKey The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don&#39;t specify the project template you have to specify the project type. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder projectTypeKey(String projectTypeKey) {
            this.projectTypeKey = projectTypeKey;
            return this;
        }
        
        /**
         * Set url
         * @param url A link to information about this project, such as project documentation (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set workflowScheme
         * @param workflowScheme The ID of the workflow scheme for the project. Use the [Get all workflow schemes](https://dac-static.atlassian.com) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key. (optional)
         * @return CreateProjectBasedOnTemplateRequestBuilder
         */
        public CreateProjectBasedOnTemplateRequestBuilder workflowScheme(Long workflowScheme) {
            this.workflowScheme = workflowScheme;
            return this;
        }
        
        /**
         * Build call for createProjectBasedOnTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the project is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid and the project could not be created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to create projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProjectDetails createProjectDetails = buildBodyParams();
            return createProjectBasedOnTemplateCall(createProjectDetails, _callback);
        }

        private CreateProjectDetails buildBodyParams() {
            CreateProjectDetails createProjectDetails = new CreateProjectDetails();
            createProjectDetails.description(this.description);
            if (this.assigneeType != null)
            createProjectDetails.assigneeType(CreateProjectDetails.AssigneeTypeEnum.fromValue(this.assigneeType));
            createProjectDetails.avatarId(this.avatarId);
            createProjectDetails.categoryId(this.categoryId);
            createProjectDetails.fieldConfigurationScheme(this.fieldConfigurationScheme);
            createProjectDetails.issueSecurityScheme(this.issueSecurityScheme);
            createProjectDetails.issueTypeScheme(this.issueTypeScheme);
            createProjectDetails.issueTypeScreenScheme(this.issueTypeScreenScheme);
            createProjectDetails.key(this.key);
            createProjectDetails.lead(this.lead);
            createProjectDetails.leadAccountId(this.leadAccountId);
            createProjectDetails.name(this.name);
            createProjectDetails.notificationScheme(this.notificationScheme);
            createProjectDetails.permissionScheme(this.permissionScheme);
            if (this.projectTemplateKey != null)
            createProjectDetails.projectTemplateKey(CreateProjectDetails.ProjectTemplateKeyEnum.fromValue(this.projectTemplateKey));
            if (this.projectTypeKey != null)
            createProjectDetails.projectTypeKey(CreateProjectDetails.ProjectTypeKeyEnum.fromValue(this.projectTypeKey));
            createProjectDetails.url(this.url);
            createProjectDetails.workflowScheme(this.workflowScheme);
            return createProjectDetails;
        }

        /**
         * Execute createProjectBasedOnTemplate request
         * @return ProjectIdentifiers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the project is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid and the project could not be created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to create projects. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectIdentifiers execute() throws ApiException {
            CreateProjectDetails createProjectDetails = buildBodyParams();
            ApiResponse<ProjectIdentifiers> localVarResp = createProjectBasedOnTemplateWithHttpInfo(createProjectDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectBasedOnTemplate request with HTTP info returned
         * @return ApiResponse&lt;ProjectIdentifiers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the project is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid and the project could not be created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to create projects. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectIdentifiers> executeWithHttpInfo() throws ApiException {
            CreateProjectDetails createProjectDetails = buildBodyParams();
            return createProjectBasedOnTemplateWithHttpInfo(createProjectDetails);
        }

        /**
         * Execute createProjectBasedOnTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the project is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid and the project could not be created. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have permission to create projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectIdentifiers> _callback) throws ApiException {
            CreateProjectDetails createProjectDetails = buildBodyParams();
            return createProjectBasedOnTemplateAsync(createProjectDetails, _callback);
        }
    }

    /**
     * Create project
     * Creates a project based on a project type template, as shown in the following table:  | Project Type Key | Project Template Key |   |--|--|   | &#x60;business&#x60; | &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-content-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-process-control&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-procurement&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-project-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking&#x60; |   | &#x60;service_desk&#x60; | &#x60;com.atlassian.servicedesk:simplified-it-service-management&#x60;, &#x60;com.atlassian.servicedesk:simplified-general-service-desk-it&#x60;, &#x60;com.atlassian.servicedesk:simplified-general-service-desk-business&#x60;, &#x60;com.atlassian.servicedesk:simplified-external-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-hr-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-facilities-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-legal-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-analytics-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-marketing-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-design-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-sales-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-blank-project-business&#x60;, &#x60;com.atlassian.servicedesk:simplified-blank-project-it&#x60;, &#x60;com.atlassian.servicedesk:simplified-finance-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-it-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-hr-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-legal-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-marketing-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-facilities-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-general-it-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-general-business-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-analytics-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-finance-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-design-service-desk&#x60;, &#x60;com.atlassian.servicedesk:next-gen-sales-service-desk&#x60; |   | &#x60;software&#x60; | &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-kanban&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-scrum&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-basic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-kanban-classic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-scrum-classic&#x60; |   The project types are available according to the installed Jira features as follows:   *  Jira Core, the default, enables &#x60;business&#x60; projects.  *  Jira Service Management enables &#x60;service_desk&#x60; projects.  *  Jira Software enables &#x60;software&#x60; projects.  To determine which features are installed, go to **Jira settings** &gt; **Apps** &gt; **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** &gt; **Apps** &gt; **Finding new apps**. For more information, see [Managing add-ons](https://confluence.atlassian.com/x/S31NLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param createProjectDetails The JSON representation of the project being created. (required)
     * @return CreateProjectBasedOnTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the project is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid and the project could not be created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have permission to create projects. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectBasedOnTemplateRequestBuilder createProjectBasedOnTemplate(String key, String name) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateProjectBasedOnTemplateRequestBuilder(key, name);
    }
    private okhttp3.Call deleteProjectAsyncCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/delete"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectAsyncValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling deleteProjectAsync(Async)");
        }

        return deleteProjectAsyncCall(projectIdOrKey, _callback);

    }


    private ApiResponse<Void> deleteProjectAsyncWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectAsyncValidateBeforeCall(projectIdOrKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProjectAsyncAsync(String projectIdOrKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectAsyncValidateBeforeCall(projectIdOrKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProjectAsyncRequestBuilder {
        private final String projectIdOrKey;

        private DeleteProjectAsyncRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for deleteProjectAsync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectAsyncCall(projectIdOrKey, _callback);
        }


        /**
         * Execute deleteProjectAsync request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProjectAsyncWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute deleteProjectAsync request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProjectAsyncWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute deleteProjectAsync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProjectAsyncAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Delete project asynchronously
     * Deletes a project asynchronously.  This operation is:   *  transactional, that is, if part of the delete fails the project is not deleted.  *  [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return DeleteProjectAsyncRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectAsyncRequestBuilder deleteProjectAsync(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new DeleteProjectAsyncRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call deleteProjectByIdOrKeyCall(String projectIdOrKey, Boolean enableUndo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableUndo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUndo", enableUndo));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectByIdOrKeyValidateBeforeCall(String projectIdOrKey, Boolean enableUndo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling deleteProjectByIdOrKey(Async)");
        }

        return deleteProjectByIdOrKeyCall(projectIdOrKey, enableUndo, _callback);

    }


    private ApiResponse<Void> deleteProjectByIdOrKeyWithHttpInfo(String projectIdOrKey, Boolean enableUndo) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectByIdOrKeyValidateBeforeCall(projectIdOrKey, enableUndo, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProjectByIdOrKeyAsync(String projectIdOrKey, Boolean enableUndo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectByIdOrKeyValidateBeforeCall(projectIdOrKey, enableUndo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProjectByIdOrKeyRequestBuilder {
        private final String projectIdOrKey;
        private Boolean enableUndo;

        private DeleteProjectByIdOrKeyRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set enableUndo
         * @param enableUndo Whether this project is placed in the Jira recycle bin where it will be available for restoration. (optional, default to true)
         * @return DeleteProjectByIdOrKeyRequestBuilder
         */
        public DeleteProjectByIdOrKeyRequestBuilder enableUndo(Boolean enableUndo) {
            this.enableUndo = enableUndo;
            return this;
        }
        
        /**
         * Build call for deleteProjectByIdOrKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the project is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to delete it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectByIdOrKeyCall(projectIdOrKey, enableUndo, _callback);
        }


        /**
         * Execute deleteProjectByIdOrKey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the project is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to delete it. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProjectByIdOrKeyWithHttpInfo(projectIdOrKey, enableUndo);
        }

        /**
         * Execute deleteProjectByIdOrKey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the project is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to delete it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProjectByIdOrKeyWithHttpInfo(projectIdOrKey, enableUndo);
        }

        /**
         * Execute deleteProjectByIdOrKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the project is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to delete it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProjectByIdOrKeyAsync(projectIdOrKey, enableUndo, _callback);
        }
    }

    /**
     * Delete project
     * Deletes a project.  You can&#39;t delete a project if it&#39;s archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return DeleteProjectByIdOrKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the project is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to delete it. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectByIdOrKeyRequestBuilder deleteProjectByIdOrKey(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new DeleteProjectByIdOrKeyRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call getAllCall(String expand, Integer recent, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String expand, Integer recent, List<String> properties, final ApiCallback _callback) throws ApiException {
        return getAllCall(expand, recent, properties, _callback);

    }


    private ApiResponse<List<Project>> getAllWithHttpInfo(String expand, Integer recent, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(expand, recent, properties, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String expand, Integer recent, List<String> properties, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(expand, recent, properties, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String expand;
        private Integer recent;
        private List<String> properties;

        private GetAllRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;projectKeys&#x60; Returns all project keys associated with the project. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set recent
         * @param recent Returns the user&#39;s most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder recent(Integer recent) {
            this.recent = recent;
            return this;
        }
        
        /**
         * Set properties
         * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder properties(List<String> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(expand, recent, properties, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public List<Project> execute() throws ApiException {
            ApiResponse<List<Project>> localVarResp = getAllWithHttpInfo(expand, recent, properties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Project&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<List<Project>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(expand, recent, properties);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<List<Project>> _callback) throws ApiException {
            return getAllAsync(expand, recent, properties, _callback);
        }
    }

    /**
     * Get all projects
     * Returns all projects visible to the user. Deprecated, use [Get projects paginated](https://dac-static.atlassian.com) that supports search and pagination.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getIssueTypeHierarchyCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectId}/hierarchy"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeHierarchyValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIssueTypeHierarchy(Async)");
        }

        return getIssueTypeHierarchyCall(projectId, _callback);

    }


    private ApiResponse<ProjectIssueTypeHierarchy> getIssueTypeHierarchyWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeHierarchyValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectIssueTypeHierarchy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeHierarchyAsync(Long projectId, final ApiCallback<ProjectIssueTypeHierarchy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeHierarchyValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectIssueTypeHierarchy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeHierarchyRequestBuilder {
        private final Long projectId;

        private GetIssueTypeHierarchyRequestBuilder(Long projectId) {
            this.projectId = projectId;
        }

        /**
         * Build call for getIssueTypeHierarchy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeHierarchyCall(projectId, _callback);
        }


        /**
         * Execute getIssueTypeHierarchy request
         * @return ProjectIssueTypeHierarchy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectIssueTypeHierarchy execute() throws ApiException {
            ApiResponse<ProjectIssueTypeHierarchy> localVarResp = getIssueTypeHierarchyWithHttpInfo(projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeHierarchy request with HTTP info returned
         * @return ApiResponse&lt;ProjectIssueTypeHierarchy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectIssueTypeHierarchy> executeWithHttpInfo() throws ApiException {
            return getIssueTypeHierarchyWithHttpInfo(projectId);
        }

        /**
         * Execute getIssueTypeHierarchy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectIssueTypeHierarchy> _callback) throws ApiException {
            return getIssueTypeHierarchyAsync(projectId, _callback);
        }
    }

    /**
     * Get project issue type hierarchy
     * Get the issue type hierarchy for a next-gen project.  The issue type hierarchy for a project consists of:   *  *Epic* at level 1 (optional).  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectId The ID of the project. (required)
     * @return GetIssueTypeHierarchyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeHierarchyRequestBuilder getIssueTypeHierarchy(Long projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        return new GetIssueTypeHierarchyRequestBuilder(projectId);
    }
    private okhttp3.Call getNotificationSchemeCall(String projectKeyOrId, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectKeyOrId}/notificationscheme"
            .replace("{" + "projectKeyOrId" + "}", localVarApiClient.escapeString(projectKeyOrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationSchemeValidateBeforeCall(String projectKeyOrId, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectKeyOrId' is set
        if (projectKeyOrId == null) {
            throw new ApiException("Missing the required parameter 'projectKeyOrId' when calling getNotificationScheme(Async)");
        }

        return getNotificationSchemeCall(projectKeyOrId, expand, _callback);

    }


    private ApiResponse<NotificationScheme> getNotificationSchemeWithHttpInfo(String projectKeyOrId, String expand) throws ApiException {
        okhttp3.Call localVarCall = getNotificationSchemeValidateBeforeCall(projectKeyOrId, expand, null);
        Type localVarReturnType = new TypeToken<NotificationScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNotificationSchemeAsync(String projectKeyOrId, String expand, final ApiCallback<NotificationScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationSchemeValidateBeforeCall(projectKeyOrId, expand, _callback);
        Type localVarReturnType = new TypeToken<NotificationScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNotificationSchemeRequestBuilder {
        private final String projectKeyOrId;
        private String expand;

        private GetNotificationSchemeRequestBuilder(String projectKeyOrId) {
            this.projectKeyOrId = projectKeyOrId;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
         * @return GetNotificationSchemeRequestBuilder
         */
        public GetNotificationSchemeRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getNotificationScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user is not an administrator. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNotificationSchemeCall(projectKeyOrId, expand, _callback);
        }


        /**
         * Execute getNotificationScheme request
         * @return NotificationScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user is not an administrator. </td><td>  -  </td></tr>
         </table>
         */
        public NotificationScheme execute() throws ApiException {
            ApiResponse<NotificationScheme> localVarResp = getNotificationSchemeWithHttpInfo(projectKeyOrId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNotificationScheme request with HTTP info returned
         * @return ApiResponse&lt;NotificationScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user is not an administrator. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NotificationScheme> executeWithHttpInfo() throws ApiException {
            return getNotificationSchemeWithHttpInfo(projectKeyOrId, expand);
        }

        /**
         * Execute getNotificationScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user is not an administrator. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NotificationScheme> _callback) throws ApiException {
            return getNotificationSchemeAsync(projectKeyOrId, expand, _callback);
        }
    }

    /**
     * Get project notification scheme
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @return GetNotificationSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user is not an administrator. </td><td>  -  </td></tr>
     </table>
     */
    public GetNotificationSchemeRequestBuilder getNotificationScheme(String projectKeyOrId) throws IllegalArgumentException {
        if (projectKeyOrId == null) throw new IllegalArgumentException("\"projectKeyOrId\" is required but got null");
            

        return new GetNotificationSchemeRequestBuilder(projectKeyOrId);
    }
    private okhttp3.Call getProjectDetailsByIdOrKeyCall(String projectIdOrKey, String expand, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDetailsByIdOrKeyValidateBeforeCall(String projectIdOrKey, String expand, List<String> properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getProjectDetailsByIdOrKey(Async)");
        }

        return getProjectDetailsByIdOrKeyCall(projectIdOrKey, expand, properties, _callback);

    }


    private ApiResponse<Project> getProjectDetailsByIdOrKeyWithHttpInfo(String projectIdOrKey, String expand, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getProjectDetailsByIdOrKeyValidateBeforeCall(projectIdOrKey, expand, properties, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectDetailsByIdOrKeyAsync(String projectIdOrKey, String expand, List<String> properties, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDetailsByIdOrKeyValidateBeforeCall(projectIdOrKey, expand, properties, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectDetailsByIdOrKeyRequestBuilder {
        private final String projectIdOrKey;
        private String expand;
        private List<String> properties;

        private GetProjectDetailsByIdOrKeyRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project.  *  &#x60;issueTypeHierarchy&#x60; The project issue type hierarchy. (optional)
         * @return GetProjectDetailsByIdOrKeyRequestBuilder
         */
        public GetProjectDetailsByIdOrKeyRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set properties
         * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
         * @return GetProjectDetailsByIdOrKeyRequestBuilder
         */
        public GetProjectDetailsByIdOrKeyRequestBuilder properties(List<String> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for getProjectDetailsByIdOrKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectDetailsByIdOrKeyCall(projectIdOrKey, expand, properties, _callback);
        }


        /**
         * Execute getProjectDetailsByIdOrKey request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            ApiResponse<Project> localVarResp = getProjectDetailsByIdOrKeyWithHttpInfo(projectIdOrKey, expand, properties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectDetailsByIdOrKey request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            return getProjectDetailsByIdOrKeyWithHttpInfo(projectIdOrKey, expand, properties);
        }

        /**
         * Execute getProjectDetailsByIdOrKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            return getProjectDetailsByIdOrKeyAsync(projectIdOrKey, expand, properties, _callback);
        }
    }

    /**
     * Get project
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return GetProjectDetailsByIdOrKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectDetailsByIdOrKeyRequestBuilder getProjectDetailsByIdOrKey(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetProjectDetailsByIdOrKeyRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call getStatusesForProjectCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/statuses"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusesForProjectValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling getStatusesForProject(Async)");
        }

        return getStatusesForProjectCall(projectIdOrKey, _callback);

    }


    private ApiResponse<List<IssueTypeWithStatus>> getStatusesForProjectWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getStatusesForProjectValidateBeforeCall(projectIdOrKey, null);
        Type localVarReturnType = new TypeToken<List<IssueTypeWithStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusesForProjectAsync(String projectIdOrKey, final ApiCallback<List<IssueTypeWithStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusesForProjectValidateBeforeCall(projectIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<List<IssueTypeWithStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusesForProjectRequestBuilder {
        private final String projectIdOrKey;

        private GetStatusesForProjectRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for getStatusesForProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusesForProjectCall(projectIdOrKey, _callback);
        }


        /**
         * Execute getStatusesForProject request
         * @return List&lt;IssueTypeWithStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public List<IssueTypeWithStatus> execute() throws ApiException {
            ApiResponse<List<IssueTypeWithStatus>> localVarResp = getStatusesForProjectWithHttpInfo(projectIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatusesForProject request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IssueTypeWithStatus&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IssueTypeWithStatus>> executeWithHttpInfo() throws ApiException {
            return getStatusesForProjectWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute getStatusesForProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IssueTypeWithStatus>> _callback) throws ApiException {
            return getStatusesForProjectAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Get all statuses for project
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return GetStatusesForProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have permission to view it. </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusesForProjectRequestBuilder getStatusesForProject(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new GetStatusesForProjectRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call listRecentProjectsCall(String expand, List<Object> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecentProjectsValidateBeforeCall(String expand, List<Object> properties, final ApiCallback _callback) throws ApiException {
        return listRecentProjectsCall(expand, properties, _callback);

    }


    private ApiResponse<List<Project>> listRecentProjectsWithHttpInfo(String expand, List<Object> properties) throws ApiException {
        okhttp3.Call localVarCall = listRecentProjectsValidateBeforeCall(expand, properties, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecentProjectsAsync(String expand, List<Object> properties, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecentProjectsValidateBeforeCall(expand, properties, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecentProjectsRequestBuilder {
        private String expand;
        private List<Object> properties;

        private ListRecentProjectsRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;projectKeys&#x60; Returns all project keys associated with a project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;url&#x60; Returns the URL associated with the project.  *  &#x60;permissions&#x60; Returns the permissions associated with the project.  *  &#x60;insight&#x60; EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.  *  &#x60;*&#x60; Returns the project with all available expand options. (optional)
         * @return ListRecentProjectsRequestBuilder
         */
        public ListRecentProjectsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set properties
         * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. (optional)
         * @return ListRecentProjectsRequestBuilder
         */
        public ListRecentProjectsRequestBuilder properties(List<Object> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Build call for listRecentProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecentProjectsCall(expand, properties, _callback);
        }


        /**
         * Execute listRecentProjects request
         * @return List&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public List<Project> execute() throws ApiException {
            ApiResponse<List<Project>> localVarResp = listRecentProjectsWithHttpInfo(expand, properties);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecentProjects request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Project&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Project>> executeWithHttpInfo() throws ApiException {
            return listRecentProjectsWithHttpInfo(expand, properties);
        }

        /**
         * Execute listRecentProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Project>> _callback) throws ApiException {
            return listRecentProjectsAsync(expand, properties, _callback);
        }
    }

    /**
     * Get recent projects
     * Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListRecentProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListRecentProjectsRequestBuilder listRecentProjects() throws IllegalArgumentException {
        return new ListRecentProjectsRequestBuilder();
    }
    private okhttp3.Call listVisibleProjectsCall(Long startAt, Integer maxResults, String orderBy, Set<Long> id, Set<String> keys, String query, String typeKey, Long categoryId, String action, String expand, List<String> status, List<Object> properties, String propertyQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (typeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeKey", typeKey));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (propertyQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyQuery", propertyQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVisibleProjectsValidateBeforeCall(Long startAt, Integer maxResults, String orderBy, Set<Long> id, Set<String> keys, String query, String typeKey, Long categoryId, String action, String expand, List<String> status, List<Object> properties, String propertyQuery, final ApiCallback _callback) throws ApiException {
        return listVisibleProjectsCall(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery, _callback);

    }


    private ApiResponse<PageBeanProject> listVisibleProjectsWithHttpInfo(Long startAt, Integer maxResults, String orderBy, Set<Long> id, Set<String> keys, String query, String typeKey, Long categoryId, String action, String expand, List<String> status, List<Object> properties, String propertyQuery) throws ApiException {
        okhttp3.Call localVarCall = listVisibleProjectsValidateBeforeCall(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery, null);
        Type localVarReturnType = new TypeToken<PageBeanProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVisibleProjectsAsync(Long startAt, Integer maxResults, String orderBy, Set<Long> id, Set<String> keys, String query, String typeKey, Long categoryId, String action, String expand, List<String> status, List<Object> properties, String propertyQuery, final ApiCallback<PageBeanProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVisibleProjectsValidateBeforeCall(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery, _callback);
        Type localVarReturnType = new TypeToken<PageBeanProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVisibleProjectsRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private String orderBy;
        private Set<Long> id;
        private Set<String> keys;
        private String query;
        private String typeKey;
        private Long categoryId;
        private String action;
        private String expand;
        private List<String> status;
        private List<Object> properties;
        private String propertyQuery;

        private ListVisibleProjectsRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field.   *  &#x60;category&#x60; Sorts by project category. A complete list of category IDs is found using [Get all project categories](https://dac-static.atlassian.com).  *  &#x60;issueCount&#x60; Sorts by the total number of issues in each project.  *  &#x60;key&#x60; Sorts by project key.  *  &#x60;lastIssueUpdatedTime&#x60; Sorts by the last issue update time.  *  &#x60;name&#x60; Sorts by project name.  *  &#x60;owner&#x60; Sorts by project lead.  *  &#x60;archivedDate&#x60; EXPERIMENTAL. Sorts by project archived date.  *  &#x60;deletedDate&#x60; EXPERIMENTAL. Sorts by project deleted date. (optional, default to key)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set id
         * @param id The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Up to 50 project IDs can be provided. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set keys
         * @param keys The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, &#x60;keys&#x3D;PA&amp;keys&#x3D;PB&#x60;. Up to 50 project keys can be provided. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder keys(Set<String> keys) {
            this.keys = keys;
            return this;
        }
        
        /**
         * Set query
         * @param query Filter the results using a literal string. Projects with a matching &#x60;key&#x60; or &#x60;name&#x60; are returned (case insensitive). (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set typeKey
         * @param typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are &#x60;business&#x60;, &#x60;service_desk&#x60;, and &#x60;software&#x60;. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder typeKey(String typeKey) {
            this.typeKey = typeKey;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId The ID of the project&#39;s category. A complete list of category IDs is found using the [Get all project categories](https://dac-static.atlassian.com) operation. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder categoryId(Long categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set action
         * @param action Filter results by projects for which the user can:   *  &#x60;view&#x60; the project, meaning that they have one of the following permissions:           *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  &#x60;browse&#x60; the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  &#x60;edit&#x60; the project, meaning that they have one of the following permissions:           *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  &#x60;create&#x60; the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created. (optional, default to view)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;projectKeys&#x60; Returns all project keys associated with a project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;url&#x60; Returns the URL associated with the project.  *  &#x60;insight&#x60; EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set status
         * @param status EXPERIMENTAL. Filter results by project status:   *  &#x60;live&#x60; Search live projects.  *  &#x60;archived&#x60; Search archived projects.  *  &#x60;deleted&#x60; Search deleted projects, those in the recycle bin. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder status(List<String> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set properties
         * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder properties(List<Object> properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set propertyQuery
         * @param propertyQuery EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of &#x60;nested&#x60; from &#x60;{\&quot;something\&quot;:{\&quot;nested\&quot;:1,\&quot;other\&quot;:2}}&#x60; use &#x60;[thepropertykey].something.nested&#x3D;1&#x60;. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (&#x3D;) characters. Note that &#x60;thepropertykey&#x60; is only returned when included in &#x60;properties&#x60;. (optional)
         * @return ListVisibleProjectsRequestBuilder
         */
        public ListVisibleProjectsRequestBuilder propertyQuery(String propertyQuery) {
            this.propertyQuery = propertyQuery;
            return this;
        }
        
        /**
         * Build call for listVisibleProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no projects matching the search criteria are found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVisibleProjectsCall(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery, _callback);
        }


        /**
         * Execute listVisibleProjects request
         * @return PageBeanProject
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no projects matching the search criteria are found. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanProject execute() throws ApiException {
            ApiResponse<PageBeanProject> localVarResp = listVisibleProjectsWithHttpInfo(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVisibleProjects request with HTTP info returned
         * @return ApiResponse&lt;PageBeanProject&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no projects matching the search criteria are found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanProject> executeWithHttpInfo() throws ApiException {
            return listVisibleProjectsWithHttpInfo(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery);
        }

        /**
         * Execute listVisibleProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if no projects matching the search criteria are found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanProject> _callback) throws ApiException {
            return listVisibleProjectsAsync(startAt, maxResults, orderBy, id, keys, query, typeKey, categoryId, action, expand, status, properties, propertyQuery, _callback);
        }
    }

    /**
     * Get projects paginated
     * Returns a [paginated](https://dac-static.atlassian.com) list of projects visible to the user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListVisibleProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if no projects matching the search criteria are found. </td><td>  -  </td></tr>
     </table>
     */
    public ListVisibleProjectsRequestBuilder listVisibleProjects() throws IllegalArgumentException {
        return new ListVisibleProjectsRequestBuilder();
    }
    private okhttp3.Call restoreProjectCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/restore"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreProjectValidateBeforeCall(String projectIdOrKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling restoreProject(Async)");
        }

        return restoreProjectCall(projectIdOrKey, _callback);

    }


    private ApiResponse<Project> restoreProjectWithHttpInfo(String projectIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = restoreProjectValidateBeforeCall(projectIdOrKey, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restoreProjectAsync(String projectIdOrKey, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreProjectValidateBeforeCall(projectIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestoreProjectRequestBuilder {
        private final String projectIdOrKey;

        private RestoreProjectRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Build call for restoreProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restoreProjectCall(projectIdOrKey, _callback);
        }


        /**
         * Execute restoreProject request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            ApiResponse<Project> localVarResp = restoreProjectWithHttpInfo(projectIdOrKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restoreProject request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            return restoreProjectWithHttpInfo(projectIdOrKey);
        }

        /**
         * Execute restoreProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            return restoreProjectAsync(projectIdOrKey, _callback);
        }
    }

    /**
     * Restore deleted or archived project
     * Restores a project that has been archived or placed in the Jira recycle bin.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return RestoreProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found or the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreProjectRequestBuilder restoreProject(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new RestoreProjectRequestBuilder(projectIdOrKey);
    }
    private okhttp3.Call updateProjectDetailsCall(String projectIdOrKey, UpdateProjectDetails updateProjectDetails, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProjectDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}"
            .replace("{" + "projectIdOrKey" + "}", localVarApiClient.escapeString(projectIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectDetailsValidateBeforeCall(String projectIdOrKey, UpdateProjectDetails updateProjectDetails, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling updateProjectDetails(Async)");
        }

        // verify the required parameter 'updateProjectDetails' is set
        if (updateProjectDetails == null) {
            throw new ApiException("Missing the required parameter 'updateProjectDetails' when calling updateProjectDetails(Async)");
        }

        return updateProjectDetailsCall(projectIdOrKey, updateProjectDetails, expand, _callback);

    }


    private ApiResponse<Project> updateProjectDetailsWithHttpInfo(String projectIdOrKey, UpdateProjectDetails updateProjectDetails, String expand) throws ApiException {
        okhttp3.Call localVarCall = updateProjectDetailsValidateBeforeCall(projectIdOrKey, updateProjectDetails, expand, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectDetailsAsync(String projectIdOrKey, UpdateProjectDetails updateProjectDetails, String expand, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectDetailsValidateBeforeCall(projectIdOrKey, updateProjectDetails, expand, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectDetailsRequestBuilder {
        private final String projectIdOrKey;
        private String description;
        private String assigneeType;
        private Long avatarId;
        private Long categoryId;
        private Long issueSecurityScheme;
        private String key;
        private String lead;
        private String leadAccountId;
        private String name;
        private Long notificationScheme;
        private Long permissionScheme;
        private String url;
        private String expand;

        private UpdateProjectDetailsRequestBuilder(String projectIdOrKey) {
            this.projectIdOrKey = projectIdOrKey;
        }

        /**
         * Set description
         * @param description A brief description of the project. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set assigneeType
         * @param assigneeType The default assignee when creating issues for this project. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder assigneeType(String assigneeType) {
            this.assigneeType = assigneeType;
            return this;
        }
        
        /**
         * Set avatarId
         * @param avatarId An integer value for the project&#39;s avatar. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder avatarId(Long avatarId) {
            this.avatarId = avatarId;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId The ID of the project&#39;s category. A complete list of category IDs is found using the [Get all project categories](https://dac-static.atlassian.com) operation. To remove the project category from the project, set the value to &#x60;-1.&#x60; (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder categoryId(Long categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set issueSecurityScheme
         * @param issueSecurityScheme The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](https://dac-static.atlassian.com) resource to get all issue security scheme IDs. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder issueSecurityScheme(Long issueSecurityScheme) {
            this.issueSecurityScheme = issueSecurityScheme;
            return this;
        }
        
        /**
         * Set key
         * @param key Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set lead
         * @param lead This parameter is deprecated because of privacy changes. Use &#x60;leadAccountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with &#x60;leadAccountId&#x60;. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder lead(String lead) {
            this.lead = lead;
            return this;
        }
        
        /**
         * Set leadAccountId
         * @param leadAccountId The account ID of the project lead. Cannot be provided with &#x60;lead&#x60;. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder leadAccountId(String leadAccountId) {
            this.leadAccountId = leadAccountId;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the project. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set notificationScheme
         * @param notificationScheme The ID of the notification scheme for the project. Use the [Get notification schemes](https://dac-static.atlassian.com) resource to get a list of notification scheme IDs. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder notificationScheme(Long notificationScheme) {
            this.notificationScheme = notificationScheme;
            return this;
        }
        
        /**
         * Set permissionScheme
         * @param permissionScheme The ID of the permission scheme for the project. Use the [Get all permission schemes](https://dac-static.atlassian.com) resource to see a list of all permission scheme IDs. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder permissionScheme(Long permissionScheme) {
            this.permissionScheme = permissionScheme;
            return this;
        }
        
        /**
         * Set url
         * @param url A link to information about this project, such as project documentation (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project. (optional)
         * @return UpdateProjectDetailsRequestBuilder
         */
        public UpdateProjectDetailsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for updateProjectDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the project is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateProjectDetails updateProjectDetails = buildBodyParams();
            return updateProjectDetailsCall(projectIdOrKey, updateProjectDetails, expand, _callback);
        }

        private UpdateProjectDetails buildBodyParams() {
            UpdateProjectDetails updateProjectDetails = new UpdateProjectDetails();
            updateProjectDetails.description(this.description);
            if (this.assigneeType != null)
            updateProjectDetails.assigneeType(UpdateProjectDetails.AssigneeTypeEnum.fromValue(this.assigneeType));
            updateProjectDetails.avatarId(this.avatarId);
            updateProjectDetails.categoryId(this.categoryId);
            updateProjectDetails.issueSecurityScheme(this.issueSecurityScheme);
            updateProjectDetails.key(this.key);
            updateProjectDetails.lead(this.lead);
            updateProjectDetails.leadAccountId(this.leadAccountId);
            updateProjectDetails.name(this.name);
            updateProjectDetails.notificationScheme(this.notificationScheme);
            updateProjectDetails.permissionScheme(this.permissionScheme);
            updateProjectDetails.url(this.url);
            return updateProjectDetails;
        }

        /**
         * Execute updateProjectDetails request
         * @return Project
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the project is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Project execute() throws ApiException {
            UpdateProjectDetails updateProjectDetails = buildBodyParams();
            ApiResponse<Project> localVarResp = updateProjectDetailsWithHttpInfo(projectIdOrKey, updateProjectDetails, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectDetails request with HTTP info returned
         * @return ApiResponse&lt;Project&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the project is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Project> executeWithHttpInfo() throws ApiException {
            UpdateProjectDetails updateProjectDetails = buildBodyParams();
            return updateProjectDetailsWithHttpInfo(projectIdOrKey, updateProjectDetails, expand);
        }

        /**
         * Execute updateProjectDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the project is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Project> _callback) throws ApiException {
            UpdateProjectDetails updateProjectDetails = buildBodyParams();
            return updateProjectDetailsAsync(projectIdOrKey, updateProjectDetails, expand, _callback);
        }
    }

    /**
     * Update project
     * Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.  All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param updateProjectDetails The project details to be updated. (required)
     * @return UpdateProjectDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the project is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectDetailsRequestBuilder updateProjectDetails(String projectIdOrKey) throws IllegalArgumentException {
        if (projectIdOrKey == null) throw new IllegalArgumentException("\"projectIdOrKey\" is required but got null");
            

        return new UpdateProjectDetailsRequestBuilder(projectIdOrKey);
    }
}
