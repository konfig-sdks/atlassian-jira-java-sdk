/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PageBeanScreenScheme;
import com.konfigthis.client.model.ScreenSchemeDetails;
import com.konfigthis.client.model.ScreenSchemeId;
import com.konfigthis.client.model.ScreenTypes;
import java.util.Set;
import com.konfigthis.client.model.UpdateScreenSchemeDetails;
import com.konfigthis.client.model.UpdateScreenTypes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScreenSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreenSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScreenSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createScreenSchemeCall(ScreenSchemeDetails screenSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = screenSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/screenscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScreenSchemeValidateBeforeCall(ScreenSchemeDetails screenSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenSchemeDetails' is set
        if (screenSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'screenSchemeDetails' when calling createScreenScheme(Async)");
        }

        return createScreenSchemeCall(screenSchemeDetails, _callback);

    }


    private ApiResponse<ScreenSchemeId> createScreenSchemeWithHttpInfo(ScreenSchemeDetails screenSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = createScreenSchemeValidateBeforeCall(screenSchemeDetails, null);
        Type localVarReturnType = new TypeToken<ScreenSchemeId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createScreenSchemeAsync(ScreenSchemeDetails screenSchemeDetails, final ApiCallback<ScreenSchemeId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScreenSchemeValidateBeforeCall(screenSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<ScreenSchemeId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateScreenSchemeRequestBuilder {
        private final String name;
        private final ScreenTypes screens;
        private String description;

        private CreateScreenSchemeRequestBuilder(String name, ScreenTypes screens) {
            this.name = name;
            this.screens = screens;
        }

        /**
         * Set description
         * @param description The description of the screen scheme. The maximum length is 255 characters. (optional)
         * @return CreateScreenSchemeRequestBuilder
         */
        public CreateScreenSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createScreenScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScreenSchemeDetails screenSchemeDetails = buildBodyParams();
            return createScreenSchemeCall(screenSchemeDetails, _callback);
        }

        private ScreenSchemeDetails buildBodyParams() {
            ScreenSchemeDetails screenSchemeDetails = new ScreenSchemeDetails();
            screenSchemeDetails.description(this.description);
            screenSchemeDetails.name(this.name);
            screenSchemeDetails.screens(this.screens);
            return screenSchemeDetails;
        }

        /**
         * Execute createScreenScheme request
         * @return ScreenSchemeId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ScreenSchemeId execute() throws ApiException {
            ScreenSchemeDetails screenSchemeDetails = buildBodyParams();
            ApiResponse<ScreenSchemeId> localVarResp = createScreenSchemeWithHttpInfo(screenSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScreenScheme request with HTTP info returned
         * @return ApiResponse&lt;ScreenSchemeId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScreenSchemeId> executeWithHttpInfo() throws ApiException {
            ScreenSchemeDetails screenSchemeDetails = buildBodyParams();
            return createScreenSchemeWithHttpInfo(screenSchemeDetails);
        }

        /**
         * Execute createScreenScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScreenSchemeId> _callback) throws ApiException {
            ScreenSchemeDetails screenSchemeDetails = buildBodyParams();
            return createScreenSchemeAsync(screenSchemeDetails, _callback);
        }
    }

    /**
     * Create screen scheme
     * Creates a screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenSchemeDetails  (required)
     * @return CreateScreenSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateScreenSchemeRequestBuilder createScreenScheme(String name, ScreenTypes screens) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (screens == null) throw new IllegalArgumentException("\"screens\" is required but got null");
        return new CreateScreenSchemeRequestBuilder(name, screens);
    }
    private okhttp3.Call deleteSchemeByIdCall(String screenSchemeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screenscheme/{screenSchemeId}"
            .replace("{" + "screenSchemeId" + "}", localVarApiClient.escapeString(screenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeByIdValidateBeforeCall(String screenSchemeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenSchemeId' is set
        if (screenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'screenSchemeId' when calling deleteSchemeById(Async)");
        }

        return deleteSchemeByIdCall(screenSchemeId, _callback);

    }


    private ApiResponse<Void> deleteSchemeByIdWithHttpInfo(String screenSchemeId) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeByIdValidateBeforeCall(screenSchemeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSchemeByIdAsync(String screenSchemeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeByIdValidateBeforeCall(screenSchemeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSchemeByIdRequestBuilder {
        private final String screenSchemeId;

        private DeleteSchemeByIdRequestBuilder(String screenSchemeId) {
            this.screenSchemeId = screenSchemeId;
        }

        /**
         * Build call for deleteSchemeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeByIdCall(screenSchemeId, _callback);
        }


        /**
         * Execute deleteSchemeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSchemeByIdWithHttpInfo(screenSchemeId);
        }

        /**
         * Execute deleteSchemeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSchemeByIdWithHttpInfo(screenSchemeId);
        }

        /**
         * Execute deleteSchemeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the screen scheme is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSchemeByIdAsync(screenSchemeId, _callback);
        }
    }

    /**
     * Delete screen scheme
     * Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenSchemeId The ID of the screen scheme. (required)
     * @return DeleteSchemeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the screen scheme is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeByIdRequestBuilder deleteSchemeById(String screenSchemeId) throws IllegalArgumentException {
        if (screenSchemeId == null) throw new IllegalArgumentException("\"screenSchemeId\" is required but got null");
            

        return new DeleteSchemeByIdRequestBuilder(screenSchemeId);
    }
    private okhttp3.Call listScreenSchemesCall(Long startAt, Integer maxResults, Set<Long> id, String expand, String queryString, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screenscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScreenSchemesValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, String expand, String queryString, String orderBy, final ApiCallback _callback) throws ApiException {
        return listScreenSchemesCall(startAt, maxResults, id, expand, queryString, orderBy, _callback);

    }


    private ApiResponse<PageBeanScreenScheme> listScreenSchemesWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id, String expand, String queryString, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listScreenSchemesValidateBeforeCall(startAt, maxResults, id, expand, queryString, orderBy, null);
        Type localVarReturnType = new TypeToken<PageBeanScreenScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScreenSchemesAsync(Long startAt, Integer maxResults, Set<Long> id, String expand, String queryString, String orderBy, final ApiCallback<PageBeanScreenScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScreenSchemesValidateBeforeCall(startAt, maxResults, id, expand, queryString, orderBy, _callback);
        Type localVarReturnType = new TypeToken<PageBeanScreenScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListScreenSchemesRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;
        private String expand;
        private String queryString;
        private String orderBy;

        private ListScreenSchemesRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 25)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) include additional information in the response. This parameter accepts &#x60;issueTypeScreenSchemes&#x60; that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to. (optional, default to )
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set queryString
         * @param queryString String used to perform a case-insensitive partial match with screen scheme name. (optional, default to )
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder queryString(String queryString) {
            this.queryString = queryString;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;id&#x60; Sorts by screen scheme ID.  *  &#x60;name&#x60; Sorts by screen scheme name. (optional)
         * @return ListScreenSchemesRequestBuilder
         */
        public ListScreenSchemesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for listScreenSchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScreenSchemesCall(startAt, maxResults, id, expand, queryString, orderBy, _callback);
        }


        /**
         * Execute listScreenSchemes request
         * @return PageBeanScreenScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanScreenScheme execute() throws ApiException {
            ApiResponse<PageBeanScreenScheme> localVarResp = listScreenSchemesWithHttpInfo(startAt, maxResults, id, expand, queryString, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listScreenSchemes request with HTTP info returned
         * @return ApiResponse&lt;PageBeanScreenScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanScreenScheme> executeWithHttpInfo() throws ApiException {
            return listScreenSchemesWithHttpInfo(startAt, maxResults, id, expand, queryString, orderBy);
        }

        /**
         * Execute listScreenSchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanScreenScheme> _callback) throws ApiException {
            return listScreenSchemesAsync(startAt, maxResults, id, expand, queryString, orderBy, _callback);
        }
    }

    /**
     * Get screen schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListScreenSchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public ListScreenSchemesRequestBuilder listScreenSchemes() throws IllegalArgumentException {
        return new ListScreenSchemesRequestBuilder();
    }
    private okhttp3.Call updateSchemeByIdCall(String screenSchemeId, UpdateScreenSchemeDetails updateScreenSchemeDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateScreenSchemeDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/screenscheme/{screenSchemeId}"
            .replace("{" + "screenSchemeId" + "}", localVarApiClient.escapeString(screenSchemeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeByIdValidateBeforeCall(String screenSchemeId, UpdateScreenSchemeDetails updateScreenSchemeDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenSchemeId' is set
        if (screenSchemeId == null) {
            throw new ApiException("Missing the required parameter 'screenSchemeId' when calling updateSchemeById(Async)");
        }

        // verify the required parameter 'updateScreenSchemeDetails' is set
        if (updateScreenSchemeDetails == null) {
            throw new ApiException("Missing the required parameter 'updateScreenSchemeDetails' when calling updateSchemeById(Async)");
        }

        return updateSchemeByIdCall(screenSchemeId, updateScreenSchemeDetails, _callback);

    }


    private ApiResponse<Object> updateSchemeByIdWithHttpInfo(String screenSchemeId, UpdateScreenSchemeDetails updateScreenSchemeDetails) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeByIdValidateBeforeCall(screenSchemeId, updateScreenSchemeDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeByIdAsync(String screenSchemeId, UpdateScreenSchemeDetails updateScreenSchemeDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeByIdValidateBeforeCall(screenSchemeId, updateScreenSchemeDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeByIdRequestBuilder {
        private final String screenSchemeId;
        private String description;
        private String name;
        private UpdateScreenTypes screens;

        private UpdateSchemeByIdRequestBuilder(String screenSchemeId) {
            this.screenSchemeId = screenSchemeId;
        }

        /**
         * Set description
         * @param description The description of the screen scheme. The maximum length is 255 characters. (optional)
         * @return UpdateSchemeByIdRequestBuilder
         */
        public UpdateSchemeByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the screen scheme. The name must be unique. The maximum length is 255 characters. (optional)
         * @return UpdateSchemeByIdRequestBuilder
         */
        public UpdateSchemeByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set screens
         * @param screens The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted. (optional)
         * @return UpdateSchemeByIdRequestBuilder
         */
        public UpdateSchemeByIdRequestBuilder screens(UpdateScreenTypes screens) {
            this.screens = screens;
            return this;
        }
        
        /**
         * Build call for updateSchemeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateScreenSchemeDetails updateScreenSchemeDetails = buildBodyParams();
            return updateSchemeByIdCall(screenSchemeId, updateScreenSchemeDetails, _callback);
        }

        private UpdateScreenSchemeDetails buildBodyParams() {
            UpdateScreenSchemeDetails updateScreenSchemeDetails = new UpdateScreenSchemeDetails();
            updateScreenSchemeDetails.description(this.description);
            updateScreenSchemeDetails.name(this.name);
            updateScreenSchemeDetails.screens(this.screens);
            return updateScreenSchemeDetails;
        }

        /**
         * Execute updateSchemeById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateScreenSchemeDetails updateScreenSchemeDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSchemeByIdWithHttpInfo(screenSchemeId, updateScreenSchemeDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSchemeById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateScreenSchemeDetails updateScreenSchemeDetails = buildBodyParams();
            return updateSchemeByIdWithHttpInfo(screenSchemeId, updateScreenSchemeDetails);
        }

        /**
         * Execute updateSchemeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateScreenSchemeDetails updateScreenSchemeDetails = buildBodyParams();
            return updateSchemeByIdAsync(screenSchemeId, updateScreenSchemeDetails, _callback);
        }
    }

    /**
     * Update screen scheme
     * Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenSchemeId The ID of the screen scheme. (required)
     * @param updateScreenSchemeDetails The screen scheme update details. (required)
     * @return UpdateSchemeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeByIdRequestBuilder updateSchemeById(String screenSchemeId) throws IllegalArgumentException {
        if (screenSchemeId == null) throw new IllegalArgumentException("\"screenSchemeId\" is required but got null");
            

        return new UpdateSchemeByIdRequestBuilder(screenSchemeId);
    }
}
