/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddFieldBean;
import com.konfigthis.client.model.MoveFieldBean;
import com.konfigthis.client.model.ScreenableField;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScreenTabFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreenTabFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScreenTabFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFieldToTabCall(Long screenId, Long tabId, AddFieldBean addFieldBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFieldBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()))
            .replace("{" + "tabId" + "}", localVarApiClient.escapeString(tabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFieldToTabValidateBeforeCall(Long screenId, Long tabId, AddFieldBean addFieldBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling addFieldToTab(Async)");
        }

        // verify the required parameter 'tabId' is set
        if (tabId == null) {
            throw new ApiException("Missing the required parameter 'tabId' when calling addFieldToTab(Async)");
        }

        // verify the required parameter 'addFieldBean' is set
        if (addFieldBean == null) {
            throw new ApiException("Missing the required parameter 'addFieldBean' when calling addFieldToTab(Async)");
        }

        return addFieldToTabCall(screenId, tabId, addFieldBean, _callback);

    }


    private ApiResponse<ScreenableField> addFieldToTabWithHttpInfo(Long screenId, Long tabId, AddFieldBean addFieldBean) throws ApiException {
        okhttp3.Call localVarCall = addFieldToTabValidateBeforeCall(screenId, tabId, addFieldBean, null);
        Type localVarReturnType = new TypeToken<ScreenableField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFieldToTabAsync(Long screenId, Long tabId, AddFieldBean addFieldBean, final ApiCallback<ScreenableField> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFieldToTabValidateBeforeCall(screenId, tabId, addFieldBean, _callback);
        Type localVarReturnType = new TypeToken<ScreenableField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFieldToTabRequestBuilder {
        private final String fieldId;
        private final Long screenId;
        private final Long tabId;

        private AddFieldToTabRequestBuilder(String fieldId, Long screenId, Long tabId) {
            this.fieldId = fieldId;
            this.screenId = screenId;
            this.tabId = tabId;
        }

        /**
         * Build call for addFieldToTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddFieldBean addFieldBean = buildBodyParams();
            return addFieldToTabCall(screenId, tabId, addFieldBean, _callback);
        }

        private AddFieldBean buildBodyParams() {
            AddFieldBean addFieldBean = new AddFieldBean();
            addFieldBean.fieldId(this.fieldId);
            return addFieldBean;
        }

        /**
         * Execute addFieldToTab request
         * @return ScreenableField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ScreenableField execute() throws ApiException {
            AddFieldBean addFieldBean = buildBodyParams();
            ApiResponse<ScreenableField> localVarResp = addFieldToTabWithHttpInfo(screenId, tabId, addFieldBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFieldToTab request with HTTP info returned
         * @return ApiResponse&lt;ScreenableField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScreenableField> executeWithHttpInfo() throws ApiException {
            AddFieldBean addFieldBean = buildBodyParams();
            return addFieldToTabWithHttpInfo(screenId, tabId, addFieldBean);
        }

        /**
         * Execute addFieldToTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScreenableField> _callback) throws ApiException {
            AddFieldBean addFieldBean = buildBodyParams();
            return addFieldToTabAsync(screenId, tabId, addFieldBean, _callback);
        }
    }

    /**
     * Add screen tab field
     * Adds a field to a screen tab.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param addFieldBean  (required)
     * @return AddFieldToTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public AddFieldToTabRequestBuilder addFieldToTab(String fieldId, Long screenId, Long tabId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        if (tabId == null) throw new IllegalArgumentException("\"tabId\" is required but got null");
        return new AddFieldToTabRequestBuilder(fieldId, screenId, tabId);
    }
    private okhttp3.Call getAllCall(Long screenId, Long tabId, String projectKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()))
            .replace("{" + "tabId" + "}", localVarApiClient.escapeString(tabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Long screenId, Long tabId, String projectKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling getAll(Async)");
        }

        // verify the required parameter 'tabId' is set
        if (tabId == null) {
            throw new ApiException("Missing the required parameter 'tabId' when calling getAll(Async)");
        }

        return getAllCall(screenId, tabId, projectKey, _callback);

    }


    private ApiResponse<List<ScreenableField>> getAllWithHttpInfo(Long screenId, Long tabId, String projectKey) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(screenId, tabId, projectKey, null);
        Type localVarReturnType = new TypeToken<List<ScreenableField>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Long screenId, Long tabId, String projectKey, final ApiCallback<List<ScreenableField>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(screenId, tabId, projectKey, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenableField>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final Long screenId;
        private final Long tabId;
        private String projectKey;

        private GetAllRequestBuilder(Long screenId, Long tabId) {
            this.screenId = screenId;
            this.tabId = tabId;
        }

        /**
         * Set projectKey
         * @param projectKey The key of the project. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder projectKey(String projectKey) {
            this.projectKey = projectKey;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen or screen tab is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(screenId, tabId, projectKey, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;ScreenableField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen or screen tab is not found. </td><td>  -  </td></tr>
         </table>
         */
        public List<ScreenableField> execute() throws ApiException {
            ApiResponse<List<ScreenableField>> localVarResp = getAllWithHttpInfo(screenId, tabId, projectKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ScreenableField&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen or screen tab is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ScreenableField>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(screenId, tabId, projectKey);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen or screen tab is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ScreenableField>> _callback) throws ApiException {
            return getAllAsync(screenId, tabId, projectKey, _callback);
        }
    }

    /**
     * Get all screen tab fields
     * Returns all fields for a screen tab.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the screen or screen tab is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(Long screenId, Long tabId) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        if (tabId == null) throw new IllegalArgumentException("\"tabId\" is required but got null");
        return new GetAllRequestBuilder(screenId, tabId);
    }
    private okhttp3.Call moveFieldCall(Long screenId, Long tabId, String id, MoveFieldBean moveFieldBean, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveFieldBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()))
            .replace("{" + "tabId" + "}", localVarApiClient.escapeString(tabId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveFieldValidateBeforeCall(Long screenId, Long tabId, String id, MoveFieldBean moveFieldBean, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling moveField(Async)");
        }

        // verify the required parameter 'tabId' is set
        if (tabId == null) {
            throw new ApiException("Missing the required parameter 'tabId' when calling moveField(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling moveField(Async)");
        }

        // verify the required parameter 'moveFieldBean' is set
        if (moveFieldBean == null) {
            throw new ApiException("Missing the required parameter 'moveFieldBean' when calling moveField(Async)");
        }

        return moveFieldCall(screenId, tabId, id, moveFieldBean, _callback);

    }


    private ApiResponse<Object> moveFieldWithHttpInfo(Long screenId, Long tabId, String id, MoveFieldBean moveFieldBean) throws ApiException {
        okhttp3.Call localVarCall = moveFieldValidateBeforeCall(screenId, tabId, id, moveFieldBean, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveFieldAsync(Long screenId, Long tabId, String id, MoveFieldBean moveFieldBean, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveFieldValidateBeforeCall(screenId, tabId, id, moveFieldBean, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MoveFieldRequestBuilder {
        private final Long screenId;
        private final Long tabId;
        private final String id;
        private URI after;
        private String position;

        private MoveFieldRequestBuilder(Long screenId, Long tabId, String id) {
            this.screenId = screenId;
            this.tabId = tabId;
            this.id = id;
        }

        /**
         * Set after
         * @param after The ID of the screen tab field after which to place the moved screen tab field. Required if &#x60;position&#x60; isn&#39;t provided. (optional)
         * @return MoveFieldRequestBuilder
         */
        public MoveFieldRequestBuilder after(URI after) {
            this.after = after;
            return this;
        }
        
        /**
         * Set position
         * @param position The named position to which the screen tab field should be moved. Required if &#x60;after&#x60; isn&#39;t provided. (optional)
         * @return MoveFieldRequestBuilder
         */
        public MoveFieldRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for moveField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MoveFieldBean moveFieldBean = buildBodyParams();
            return moveFieldCall(screenId, tabId, id, moveFieldBean, _callback);
        }

        private MoveFieldBean buildBodyParams() {
            MoveFieldBean moveFieldBean = new MoveFieldBean();
            moveFieldBean.after(this.after);
            if (this.position != null)
            moveFieldBean.position(MoveFieldBean.PositionEnum.fromValue(this.position));
            return moveFieldBean;
        }

        /**
         * Execute moveField request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            MoveFieldBean moveFieldBean = buildBodyParams();
            ApiResponse<Object> localVarResp = moveFieldWithHttpInfo(screenId, tabId, id, moveFieldBean);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute moveField request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            MoveFieldBean moveFieldBean = buildBodyParams();
            return moveFieldWithHttpInfo(screenId, tabId, id, moveFieldBean);
        }

        /**
         * Execute moveField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            MoveFieldBean moveFieldBean = buildBodyParams();
            return moveFieldAsync(screenId, tabId, id, moveFieldBean, _callback);
        }
    }

    /**
     * Move screen tab field
     * Moves a screen tab field.  If &#x60;after&#x60; and &#x60;position&#x60; are provided in the request, &#x60;position&#x60; is ignored.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param id The ID of the field. (required)
     * @param moveFieldBean  (required)
     * @return MoveFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. </td><td>  -  </td></tr>
     </table>
     */
    public MoveFieldRequestBuilder moveField(Long screenId, Long tabId, String id) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        if (tabId == null) throw new IllegalArgumentException("\"tabId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new MoveFieldRequestBuilder(screenId, tabId, id);
    }
    private okhttp3.Call removeFieldFromTabCall(Long screenId, Long tabId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()))
            .replace("{" + "tabId" + "}", localVarApiClient.escapeString(tabId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFieldFromTabValidateBeforeCall(Long screenId, Long tabId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling removeFieldFromTab(Async)");
        }

        // verify the required parameter 'tabId' is set
        if (tabId == null) {
            throw new ApiException("Missing the required parameter 'tabId' when calling removeFieldFromTab(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFieldFromTab(Async)");
        }

        return removeFieldFromTabCall(screenId, tabId, id, _callback);

    }


    private ApiResponse<Void> removeFieldFromTabWithHttpInfo(Long screenId, Long tabId, String id) throws ApiException {
        okhttp3.Call localVarCall = removeFieldFromTabValidateBeforeCall(screenId, tabId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFieldFromTabAsync(Long screenId, Long tabId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFieldFromTabValidateBeforeCall(screenId, tabId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFieldFromTabRequestBuilder {
        private final Long screenId;
        private final Long tabId;
        private final String id;

        private RemoveFieldFromTabRequestBuilder(Long screenId, Long tabId, String id) {
            this.screenId = screenId;
            this.tabId = tabId;
            this.id = id;
        }

        /**
         * Build call for removeFieldFromTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFieldFromTabCall(screenId, tabId, id, _callback);
        }


        /**
         * Execute removeFieldFromTab request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFieldFromTabWithHttpInfo(screenId, tabId, id);
        }

        /**
         * Execute removeFieldFromTab request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFieldFromTabWithHttpInfo(screenId, tabId, id);
        }

        /**
         * Execute removeFieldFromTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFieldFromTabAsync(screenId, tabId, id, _callback);
        }
    }

    /**
     * Remove screen tab field
     * Removes a field from a screen tab.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param id The ID of the field. (required)
     * @return RemoveFieldFromTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the screen, screen tab, or field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFieldFromTabRequestBuilder removeFieldFromTab(Long screenId, Long tabId, String id) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        if (tabId == null) throw new IllegalArgumentException("\"tabId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveFieldFromTabRequestBuilder(screenId, tabId, id);
    }
}
