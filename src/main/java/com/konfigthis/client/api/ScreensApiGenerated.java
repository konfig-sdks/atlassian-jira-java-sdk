/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PageBeanScreen;
import com.konfigthis.client.model.PageBeanScreenWithTab;
import com.konfigthis.client.model.Screen;
import com.konfigthis.client.model.ScreenDetails;
import com.konfigthis.client.model.ScreenableField;
import java.util.Set;
import com.konfigthis.client.model.UpdateScreenDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScreensApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScreensApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScreensApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFieldToDefaultScreenCall(String fieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/addToDefault/{fieldId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFieldToDefaultScreenValidateBeforeCall(String fieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling addFieldToDefaultScreen(Async)");
        }

        return addFieldToDefaultScreenCall(fieldId, _callback);

    }


    private ApiResponse<Object> addFieldToDefaultScreenWithHttpInfo(String fieldId) throws ApiException {
        okhttp3.Call localVarCall = addFieldToDefaultScreenValidateBeforeCall(fieldId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFieldToDefaultScreenAsync(String fieldId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFieldToDefaultScreenValidateBeforeCall(fieldId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFieldToDefaultScreenRequestBuilder {
        private final String fieldId;

        private AddFieldToDefaultScreenRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Build call for addFieldToDefaultScreen
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field it not found or the field is already present. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addFieldToDefaultScreenCall(fieldId, _callback);
        }


        /**
         * Execute addFieldToDefaultScreen request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field it not found or the field is already present. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = addFieldToDefaultScreenWithHttpInfo(fieldId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFieldToDefaultScreen request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field it not found or the field is already present. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return addFieldToDefaultScreenWithHttpInfo(fieldId);
        }

        /**
         * Execute addFieldToDefaultScreen request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the field it not found or the field is already present. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return addFieldToDefaultScreenAsync(fieldId, _callback);
        }
    }

    /**
     * Add field to default screen
     * Adds a field to the default tab of the default screen.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the field. (required)
     * @return AddFieldToDefaultScreenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field it not found or the field is already present. </td><td>  -  </td></tr>
     </table>
     */
    public AddFieldToDefaultScreenRequestBuilder addFieldToDefaultScreen(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new AddFieldToDefaultScreenRequestBuilder(fieldId);
    }
    private okhttp3.Call createDefaultFieldTabCall(ScreenDetails screenDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = screenDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDefaultFieldTabValidateBeforeCall(ScreenDetails screenDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenDetails' is set
        if (screenDetails == null) {
            throw new ApiException("Missing the required parameter 'screenDetails' when calling createDefaultFieldTab(Async)");
        }

        return createDefaultFieldTabCall(screenDetails, _callback);

    }


    private ApiResponse<Screen> createDefaultFieldTabWithHttpInfo(ScreenDetails screenDetails) throws ApiException {
        okhttp3.Call localVarCall = createDefaultFieldTabValidateBeforeCall(screenDetails, null);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDefaultFieldTabAsync(ScreenDetails screenDetails, final ApiCallback<Screen> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDefaultFieldTabValidateBeforeCall(screenDetails, _callback);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDefaultFieldTabRequestBuilder {
        private final String name;
        private String description;

        private CreateDefaultFieldTabRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the screen. The maximum length is 255 characters. (optional)
         * @return CreateDefaultFieldTabRequestBuilder
         */
        public CreateDefaultFieldTabRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createDefaultFieldTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScreenDetails screenDetails = buildBodyParams();
            return createDefaultFieldTabCall(screenDetails, _callback);
        }

        private ScreenDetails buildBodyParams() {
            ScreenDetails screenDetails = new ScreenDetails();
            screenDetails.description(this.description);
            screenDetails.name(this.name);
            return screenDetails;
        }

        /**
         * Execute createDefaultFieldTab request
         * @return Screen
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Screen execute() throws ApiException {
            ScreenDetails screenDetails = buildBodyParams();
            ApiResponse<Screen> localVarResp = createDefaultFieldTabWithHttpInfo(screenDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDefaultFieldTab request with HTTP info returned
         * @return ApiResponse&lt;Screen&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Screen> executeWithHttpInfo() throws ApiException {
            ScreenDetails screenDetails = buildBodyParams();
            return createDefaultFieldTabWithHttpInfo(screenDetails);
        }

        /**
         * Execute createDefaultFieldTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Screen> _callback) throws ApiException {
            ScreenDetails screenDetails = buildBodyParams();
            return createDefaultFieldTabAsync(screenDetails, _callback);
        }
    }

    /**
     * Create screen
     * Creates a screen with a default field tab.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenDetails  (required)
     * @return CreateDefaultFieldTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDefaultFieldTabRequestBuilder createDefaultFieldTab(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateDefaultFieldTabRequestBuilder(name);
    }
    private okhttp3.Call deleteScreenCall(Long screenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScreenValidateBeforeCall(Long screenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling deleteScreen(Async)");
        }

        return deleteScreenCall(screenId, _callback);

    }


    private ApiResponse<Void> deleteScreenWithHttpInfo(Long screenId) throws ApiException {
        okhttp3.Call localVarCall = deleteScreenValidateBeforeCall(screenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteScreenAsync(Long screenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScreenValidateBeforeCall(screenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteScreenRequestBuilder {
        private final Long screenId;

        private DeleteScreenRequestBuilder(Long screenId) {
            this.screenId = screenId;
        }

        /**
         * Build call for deleteScreen
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteScreenCall(screenId, _callback);
        }


        /**
         * Execute deleteScreen request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteScreenWithHttpInfo(screenId);
        }

        /**
         * Execute deleteScreen request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteScreenWithHttpInfo(screenId);
        }

        /**
         * Execute deleteScreen request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteScreenAsync(screenId, _callback);
        }
    }

    /**
     * Delete screen
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.
     * @param screenId The ID of the screen. (required)
     * @return DeleteScreenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteScreenRequestBuilder deleteScreen(Long screenId) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        return new DeleteScreenRequestBuilder(screenId);
    }
    private okhttp3.Call getForFieldScreensCall(String fieldId, Long startAt, Integer maxResults, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/field/{fieldId}/screens"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForFieldScreensValidateBeforeCall(String fieldId, Long startAt, Integer maxResults, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getForFieldScreens(Async)");
        }

        return getForFieldScreensCall(fieldId, startAt, maxResults, expand, _callback);

    }


    private ApiResponse<PageBeanScreenWithTab> getForFieldScreensWithHttpInfo(String fieldId, Long startAt, Integer maxResults, String expand) throws ApiException {
        okhttp3.Call localVarCall = getForFieldScreensValidateBeforeCall(fieldId, startAt, maxResults, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanScreenWithTab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForFieldScreensAsync(String fieldId, Long startAt, Integer maxResults, String expand, final ApiCallback<PageBeanScreenWithTab> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForFieldScreensValidateBeforeCall(fieldId, startAt, maxResults, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanScreenWithTab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForFieldScreensRequestBuilder {
        private final String fieldId;
        private Long startAt;
        private Integer maxResults;
        private String expand;

        private GetForFieldScreensRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetForFieldScreensRequestBuilder
         */
        public GetForFieldScreensRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return GetForFieldScreensRequestBuilder
         */
        public GetForFieldScreensRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information about screens in the response. This parameter accepts &#x60;tab&#x60; which returns details about the screen tabs the field is used in. (optional)
         * @return GetForFieldScreensRequestBuilder
         */
        public GetForFieldScreensRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getForFieldScreens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForFieldScreensCall(fieldId, startAt, maxResults, expand, _callback);
        }


        /**
         * Execute getForFieldScreens request
         * @return PageBeanScreenWithTab
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanScreenWithTab execute() throws ApiException {
            ApiResponse<PageBeanScreenWithTab> localVarResp = getForFieldScreensWithHttpInfo(fieldId, startAt, maxResults, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForFieldScreens request with HTTP info returned
         * @return ApiResponse&lt;PageBeanScreenWithTab&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanScreenWithTab> executeWithHttpInfo() throws ApiException {
            return getForFieldScreensWithHttpInfo(fieldId, startAt, maxResults, expand);
        }

        /**
         * Execute getForFieldScreens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanScreenWithTab> _callback) throws ApiException {
            return getForFieldScreensAsync(fieldId, startAt, maxResults, expand, _callback);
        }
    }

    /**
     * Get screens for a field
     * Returns a [paginated](https://dac-static.atlassian.com) list of the screens a field is used in.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the field to return screens for. (required)
     * @return GetForFieldScreensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetForFieldScreensRequestBuilder getForFieldScreens(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetForFieldScreensRequestBuilder(fieldId);
    }
    private okhttp3.Call listAvailableFieldsCall(Long screenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}/availableFields"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableFieldsValidateBeforeCall(Long screenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling listAvailableFields(Async)");
        }

        return listAvailableFieldsCall(screenId, _callback);

    }


    private ApiResponse<List<ScreenableField>> listAvailableFieldsWithHttpInfo(Long screenId) throws ApiException {
        okhttp3.Call localVarCall = listAvailableFieldsValidateBeforeCall(screenId, null);
        Type localVarReturnType = new TypeToken<List<ScreenableField>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableFieldsAsync(Long screenId, final ApiCallback<List<ScreenableField>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableFieldsValidateBeforeCall(screenId, _callback);
        Type localVarReturnType = new TypeToken<List<ScreenableField>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableFieldsRequestBuilder {
        private final Long screenId;

        private ListAvailableFieldsRequestBuilder(Long screenId) {
            this.screenId = screenId;
        }

        /**
         * Build call for listAvailableFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableFieldsCall(screenId, _callback);
        }


        /**
         * Execute listAvailableFields request
         * @return List&lt;ScreenableField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen is not found. </td><td>  -  </td></tr>
         </table>
         */
        public List<ScreenableField> execute() throws ApiException {
            ApiResponse<List<ScreenableField>> localVarResp = listAvailableFieldsWithHttpInfo(screenId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableFields request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ScreenableField&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ScreenableField>> executeWithHttpInfo() throws ApiException {
            return listAvailableFieldsWithHttpInfo(screenId);
        }

        /**
         * Execute listAvailableFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the screen is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ScreenableField>> _callback) throws ApiException {
            return listAvailableFieldsAsync(screenId, _callback);
        }
    }

    /**
     * Get available screen fields
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen. (required)
     * @return ListAvailableFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the screen is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableFieldsRequestBuilder listAvailableFields(Long screenId) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        return new ListAvailableFieldsRequestBuilder(screenId);
    }
    private okhttp3.Call listGetCall(Long startAt, Integer maxResults, Set<Long> id, String queryString, Set<String> scope, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scope", scope));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGetValidateBeforeCall(Long startAt, Integer maxResults, Set<Long> id, String queryString, Set<String> scope, String orderBy, final ApiCallback _callback) throws ApiException {
        return listGetCall(startAt, maxResults, id, queryString, scope, orderBy, _callback);

    }


    private ApiResponse<PageBeanScreen> listGetWithHttpInfo(Long startAt, Integer maxResults, Set<Long> id, String queryString, Set<String> scope, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listGetValidateBeforeCall(startAt, maxResults, id, queryString, scope, orderBy, null);
        Type localVarReturnType = new TypeToken<PageBeanScreen>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGetAsync(Long startAt, Integer maxResults, Set<Long> id, String queryString, Set<String> scope, String orderBy, final ApiCallback<PageBeanScreen> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGetValidateBeforeCall(startAt, maxResults, id, queryString, scope, orderBy, _callback);
        Type localVarReturnType = new TypeToken<PageBeanScreen>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGetRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private Set<Long> id;
        private String queryString;
        private Set<String> scope;
        private String orderBy;

        private ListGetRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set id
         * @param id The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder id(Set<Long> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set queryString
         * @param queryString String used to perform a case-insensitive partial match with screen name. (optional, default to )
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder queryString(String queryString) {
            this.queryString = queryString;
            return this;
        }
        
        /**
         * Set scope
         * @param scope The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, &#x60;scope&#x3D;GLOBAL&amp;scope&#x3D;PROJECT&#x60;. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder scope(Set<String> scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy [Order](https://dac-static.atlassian.com) the results by a field:   *  &#x60;id&#x60; Sorts by screen ID.  *  &#x60;name&#x60; Sorts by screen name. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for listGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGetCall(startAt, maxResults, id, queryString, scope, orderBy, _callback);
        }


        /**
         * Execute listGet request
         * @return PageBeanScreen
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanScreen execute() throws ApiException {
            ApiResponse<PageBeanScreen> localVarResp = listGetWithHttpInfo(startAt, maxResults, id, queryString, scope, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGet request with HTTP info returned
         * @return ApiResponse&lt;PageBeanScreen&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanScreen> executeWithHttpInfo() throws ApiException {
            return listGetWithHttpInfo(startAt, maxResults, id, queryString, scope, orderBy);
        }

        /**
         * Execute listGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanScreen> _callback) throws ApiException {
            return listGetAsync(startAt, maxResults, id, queryString, scope, orderBy, _callback);
        }
    }

    /**
     * Get screens
     * Returns a [paginated](https://dac-static.atlassian.com) list of all screens or those specified by one or more screen IDs.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return ListGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public ListGetRequestBuilder listGet() throws IllegalArgumentException {
        return new ListGetRequestBuilder();
    }
    private okhttp3.Call updateScreenCall(Long screenId, UpdateScreenDetails updateScreenDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateScreenDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/screens/{screenId}"
            .replace("{" + "screenId" + "}", localVarApiClient.escapeString(screenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScreenValidateBeforeCall(Long screenId, UpdateScreenDetails updateScreenDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenId' is set
        if (screenId == null) {
            throw new ApiException("Missing the required parameter 'screenId' when calling updateScreen(Async)");
        }

        // verify the required parameter 'updateScreenDetails' is set
        if (updateScreenDetails == null) {
            throw new ApiException("Missing the required parameter 'updateScreenDetails' when calling updateScreen(Async)");
        }

        return updateScreenCall(screenId, updateScreenDetails, _callback);

    }


    private ApiResponse<Screen> updateScreenWithHttpInfo(Long screenId, UpdateScreenDetails updateScreenDetails) throws ApiException {
        okhttp3.Call localVarCall = updateScreenValidateBeforeCall(screenId, updateScreenDetails, null);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScreenAsync(Long screenId, UpdateScreenDetails updateScreenDetails, final ApiCallback<Screen> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScreenValidateBeforeCall(screenId, updateScreenDetails, _callback);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScreenRequestBuilder {
        private final Long screenId;
        private String description;
        private String name;

        private UpdateScreenRequestBuilder(Long screenId) {
            this.screenId = screenId;
        }

        /**
         * Set description
         * @param description The description of the screen. The maximum length is 255 characters. (optional)
         * @return UpdateScreenRequestBuilder
         */
        public UpdateScreenRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the screen. The name must be unique. The maximum length is 255 characters. (optional)
         * @return UpdateScreenRequestBuilder
         */
        public UpdateScreenRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateScreen
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateScreenDetails updateScreenDetails = buildBodyParams();
            return updateScreenCall(screenId, updateScreenDetails, _callback);
        }

        private UpdateScreenDetails buildBodyParams() {
            UpdateScreenDetails updateScreenDetails = new UpdateScreenDetails();
            updateScreenDetails.description(this.description);
            updateScreenDetails.name(this.name);
            return updateScreenDetails;
        }

        /**
         * Execute updateScreen request
         * @return Screen
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Screen execute() throws ApiException {
            UpdateScreenDetails updateScreenDetails = buildBodyParams();
            ApiResponse<Screen> localVarResp = updateScreenWithHttpInfo(screenId, updateScreenDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScreen request with HTTP info returned
         * @return ApiResponse&lt;Screen&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Screen> executeWithHttpInfo() throws ApiException {
            UpdateScreenDetails updateScreenDetails = buildBodyParams();
            return updateScreenWithHttpInfo(screenId, updateScreenDetails);
        }

        /**
         * Execute updateScreen request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Screen> _callback) throws ApiException {
            UpdateScreenDetails updateScreenDetails = buildBodyParams();
            return updateScreenAsync(screenId, updateScreenDetails, _callback);
        }
    }

    /**
     * Update screen
     * Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen. (required)
     * @param updateScreenDetails  (required)
     * @return UpdateScreenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScreenRequestBuilder updateScreen(Long screenId) throws IllegalArgumentException {
        if (screenId == null) throw new IllegalArgumentException("\"screenId\" is required but got null");
        return new UpdateScreenRequestBuilder(screenId);
    }
}
