/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.JiraStatus;
import com.konfigthis.client.model.PageOfStatuses;
import com.konfigthis.client.model.StatusCreate;
import com.konfigthis.client.model.StatusCreateRequest;
import com.konfigthis.client.model.StatusScope;
import com.konfigthis.client.model.StatusUpdate;
import com.konfigthis.client.model.StatusUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatusApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatusApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkCreateStatusesCall(StatusCreateRequest statusCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statusCreateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateStatusesValidateBeforeCall(StatusCreateRequest statusCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusCreateRequest' is set
        if (statusCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'statusCreateRequest' when calling bulkCreateStatuses(Async)");
        }

        return bulkCreateStatusesCall(statusCreateRequest, _callback);

    }


    private ApiResponse<List<JiraStatus>> bulkCreateStatusesWithHttpInfo(StatusCreateRequest statusCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateStatusesValidateBeforeCall(statusCreateRequest, null);
        Type localVarReturnType = new TypeToken<List<JiraStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkCreateStatusesAsync(StatusCreateRequest statusCreateRequest, final ApiCallback<List<JiraStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateStatusesValidateBeforeCall(statusCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<List<JiraStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkCreateStatusesRequestBuilder {
        private final StatusScope scope;
        private final List<StatusCreate> statuses;

        private BulkCreateStatusesRequestBuilder(StatusScope scope, List<StatusCreate> statuses) {
            this.scope = scope;
            this.statuses = statuses;
        }

        /**
         * Build call for bulkCreateStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatusCreateRequest statusCreateRequest = buildBodyParams();
            return bulkCreateStatusesCall(statusCreateRequest, _callback);
        }

        private StatusCreateRequest buildBodyParams() {
            StatusCreateRequest statusCreateRequest = new StatusCreateRequest();
            statusCreateRequest.scope(this.scope);
            statusCreateRequest.statuses(this.statuses);
            return statusCreateRequest;
        }

        /**
         * Execute bulkCreateStatuses request
         * @return List&lt;JiraStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public List<JiraStatus> execute() throws ApiException {
            StatusCreateRequest statusCreateRequest = buildBodyParams();
            ApiResponse<List<JiraStatus>> localVarResp = bulkCreateStatusesWithHttpInfo(statusCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkCreateStatuses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JiraStatus&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JiraStatus>> executeWithHttpInfo() throws ApiException {
            StatusCreateRequest statusCreateRequest = buildBodyParams();
            return bulkCreateStatusesWithHttpInfo(statusCreateRequest);
        }

        /**
         * Execute bulkCreateStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JiraStatus>> _callback) throws ApiException {
            StatusCreateRequest statusCreateRequest = buildBodyParams();
            return bulkCreateStatusesAsync(statusCreateRequest, _callback);
        }
    }

    /**
     * Bulk create statuses
     * Creates statuses for a global or project scope.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param statusCreateRequest Details of the statuses being created and their scope. (required)
     * @return BulkCreateStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public BulkCreateStatusesRequestBuilder bulkCreateStatuses(StatusScope scope, List<StatusCreate> statuses) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
        if (statuses == null) throw new IllegalArgumentException("\"statuses\" is required but got null");
        return new BulkCreateStatusesRequestBuilder(scope, statuses);
    }
    private okhttp3.Call bulkDeleteByIdCall(List<String> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteByIdValidateBeforeCall(List<String> id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bulkDeleteById(Async)");
        }

        return bulkDeleteByIdCall(id, _callback);

    }


    private ApiResponse<Object> bulkDeleteByIdWithHttpInfo(List<String> id) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkDeleteByIdAsync(List<String> id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkDeleteByIdRequestBuilder {
        private final List<String> id;

        private BulkDeleteByIdRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Build call for bulkDeleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkDeleteByIdCall(id, _callback);
        }


        /**
         * Execute bulkDeleteById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = bulkDeleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkDeleteById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return bulkDeleteByIdWithHttpInfo(id);
        }

        /**
         * Execute bulkDeleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return bulkDeleteByIdAsync(id, _callback);
        }
    }

    /**
     * Bulk delete Statuses
     * Deletes statuses by ID.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id&#x3D;10000&amp;id&#x3D;10001.  Min items &#x60;1&#x60;, Max items &#x60;50&#x60; (required)
     * @return BulkDeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public BulkDeleteByIdRequestBuilder bulkDeleteById(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new BulkDeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call bulkGetStatusesCall(List<String> id, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkGetStatusesValidateBeforeCall(List<String> id, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bulkGetStatuses(Async)");
        }

        return bulkGetStatusesCall(id, expand, _callback);

    }


    private ApiResponse<List<JiraStatus>> bulkGetStatusesWithHttpInfo(List<String> id, String expand) throws ApiException {
        okhttp3.Call localVarCall = bulkGetStatusesValidateBeforeCall(id, expand, null);
        Type localVarReturnType = new TypeToken<List<JiraStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkGetStatusesAsync(List<String> id, String expand, final ApiCallback<List<JiraStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkGetStatusesValidateBeforeCall(id, expand, _callback);
        Type localVarReturnType = new TypeToken<List<JiraStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkGetStatusesRequestBuilder {
        private final List<String> id;
        private String expand;

        private BulkGetStatusesRequestBuilder(List<String> id) {
            this.id = id;
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;usages&#x60; Returns the project and issue types that use the status in their workflow.  *  &#x60;workflowUsages&#x60; Returns the workflows that use the status. (optional)
         * @return BulkGetStatusesRequestBuilder
         */
        public BulkGetStatusesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for bulkGetStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkGetStatusesCall(id, expand, _callback);
        }


        /**
         * Execute bulkGetStatuses request
         * @return List&lt;JiraStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public List<JiraStatus> execute() throws ApiException {
            ApiResponse<List<JiraStatus>> localVarResp = bulkGetStatusesWithHttpInfo(id, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkGetStatuses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;JiraStatus&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<JiraStatus>> executeWithHttpInfo() throws ApiException {
            return bulkGetStatusesWithHttpInfo(id, expand);
        }

        /**
         * Execute bulkGetStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<JiraStatus>> _callback) throws ApiException {
            return bulkGetStatusesAsync(id, expand, _callback);
        }
    }

    /**
     * Bulk get statuses
     * Returns a list of the statuses specified by one or more status IDs.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id&#x3D;10000&amp;id&#x3D;10001.  Min items &#x60;1&#x60;, Max items &#x60;50&#x60; (required)
     * @return BulkGetStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public BulkGetStatusesRequestBuilder bulkGetStatuses(List<String> id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new BulkGetStatusesRequestBuilder(id);
    }
    private okhttp3.Call bulkUpdateStatusesByIdCall(StatusUpdateRequest statusUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statusUpdateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateStatusesByIdValidateBeforeCall(StatusUpdateRequest statusUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusUpdateRequest' is set
        if (statusUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'statusUpdateRequest' when calling bulkUpdateStatusesById(Async)");
        }

        return bulkUpdateStatusesByIdCall(statusUpdateRequest, _callback);

    }


    private ApiResponse<Object> bulkUpdateStatusesByIdWithHttpInfo(StatusUpdateRequest statusUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateStatusesByIdValidateBeforeCall(statusUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkUpdateStatusesByIdAsync(StatusUpdateRequest statusUpdateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateStatusesByIdValidateBeforeCall(statusUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkUpdateStatusesByIdRequestBuilder {
        private final List<StatusUpdate> statuses;

        private BulkUpdateStatusesByIdRequestBuilder(List<StatusUpdate> statuses) {
            this.statuses = statuses;
        }

        /**
         * Build call for bulkUpdateStatusesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatusUpdateRequest statusUpdateRequest = buildBodyParams();
            return bulkUpdateStatusesByIdCall(statusUpdateRequest, _callback);
        }

        private StatusUpdateRequest buildBodyParams() {
            StatusUpdateRequest statusUpdateRequest = new StatusUpdateRequest();
            statusUpdateRequest.statuses(this.statuses);
            return statusUpdateRequest;
        }

        /**
         * Execute bulkUpdateStatusesById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            StatusUpdateRequest statusUpdateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = bulkUpdateStatusesByIdWithHttpInfo(statusUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkUpdateStatusesById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            StatusUpdateRequest statusUpdateRequest = buildBodyParams();
            return bulkUpdateStatusesByIdWithHttpInfo(statusUpdateRequest);
        }

        /**
         * Execute bulkUpdateStatusesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            StatusUpdateRequest statusUpdateRequest = buildBodyParams();
            return bulkUpdateStatusesByIdAsync(statusUpdateRequest, _callback);
        }
    }

    /**
     * Bulk update statuses
     * Updates statuses by ID.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @param statusUpdateRequest The list of statuses that will be updated. (required)
     * @return BulkUpdateStatusesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Returned if another workflow configuration update task is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public BulkUpdateStatusesByIdRequestBuilder bulkUpdateStatusesById(List<StatusUpdate> statuses) throws IllegalArgumentException {
        if (statuses == null) throw new IllegalArgumentException("\"statuses\" is required but got null");
        return new BulkUpdateStatusesByIdRequestBuilder(statuses);
    }
    private okhttp3.Call searchPaginatedCall(String expand, String projectId, Long startAt, Integer maxResults, String searchString, String statusCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/statuses/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (searchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchString", searchString));
        }

        if (statusCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCategory", statusCategory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPaginatedValidateBeforeCall(String expand, String projectId, Long startAt, Integer maxResults, String searchString, String statusCategory, final ApiCallback _callback) throws ApiException {
        return searchPaginatedCall(expand, projectId, startAt, maxResults, searchString, statusCategory, _callback);

    }


    private ApiResponse<PageOfStatuses> searchPaginatedWithHttpInfo(String expand, String projectId, Long startAt, Integer maxResults, String searchString, String statusCategory) throws ApiException {
        okhttp3.Call localVarCall = searchPaginatedValidateBeforeCall(expand, projectId, startAt, maxResults, searchString, statusCategory, null);
        Type localVarReturnType = new TypeToken<PageOfStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchPaginatedAsync(String expand, String projectId, Long startAt, Integer maxResults, String searchString, String statusCategory, final ApiCallback<PageOfStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPaginatedValidateBeforeCall(expand, projectId, startAt, maxResults, searchString, statusCategory, _callback);
        Type localVarReturnType = new TypeToken<PageOfStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchPaginatedRequestBuilder {
        private String expand;
        private String projectId;
        private Long startAt;
        private Integer maxResults;
        private String searchString;
        private String statusCategory;

        private SearchPaginatedRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;usages&#x60; Returns the project and issue types that use the status in their workflow.  *  &#x60;workflowUsages&#x60; Returns the workflows that use the status. (optional)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The project the status is part of or null for global statuses. (optional)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder projectId(String projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 200)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set searchString
         * @param searchString Term to match status names against or null to search for all statuses in the search scope. (optional)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder searchString(String searchString) {
            this.searchString = searchString;
            return this;
        }
        
        /**
         * Set statusCategory
         * @param statusCategory Category of the status to filter by. The supported values are: &#x60;TODO&#x60;, &#x60;IN_PROGRESS&#x60;, and &#x60;DONE&#x60;. (optional)
         * @return SearchPaginatedRequestBuilder
         */
        public SearchPaginatedRequestBuilder statusCategory(String statusCategory) {
            this.statusCategory = statusCategory;
            return this;
        }
        
        /**
         * Build call for searchPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchPaginatedCall(expand, projectId, startAt, maxResults, searchString, statusCategory, _callback);
        }


        /**
         * Execute searchPaginated request
         * @return PageOfStatuses
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public PageOfStatuses execute() throws ApiException {
            ApiResponse<PageOfStatuses> localVarResp = searchPaginatedWithHttpInfo(expand, projectId, startAt, maxResults, searchString, statusCategory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageOfStatuses&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageOfStatuses> executeWithHttpInfo() throws ApiException {
            return searchPaginatedWithHttpInfo(expand, projectId, startAt, maxResults, searchString, statusCategory);
        }

        /**
         * Execute searchPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageOfStatuses> _callback) throws ApiException {
            return searchPaginatedAsync(expand, projectId, startAt, maxResults, searchString, statusCategory, _callback);
        }
    }

    /**
     * Search statuses paginated
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     * @return SearchPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public SearchPaginatedRequestBuilder searchPaginated() throws IllegalArgumentException {
        return new SearchPaginatedRequestBuilder();
    }
}
