/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TimeTrackingConfiguration;
import com.konfigthis.client.model.TimeTrackingProvider;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllProvidersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/configuration/timetracking/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProvidersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllProvidersCall(_callback);

    }


    private ApiResponse<List<TimeTrackingProvider>> getAllProvidersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllProvidersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TimeTrackingProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProvidersAsync(final ApiCallback<List<TimeTrackingProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProvidersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TimeTrackingProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllProvidersRequestBuilder {

        private GetAllProvidersRequestBuilder() {
        }

        /**
         * Build call for getAllProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProvidersCall(_callback);
        }


        /**
         * Execute getAllProviders request
         * @return List&lt;TimeTrackingProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public List<TimeTrackingProvider> execute() throws ApiException {
            ApiResponse<List<TimeTrackingProvider>> localVarResp = getAllProvidersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllProviders request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TimeTrackingProvider&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TimeTrackingProvider>> executeWithHttpInfo() throws ApiException {
            return getAllProvidersWithHttpInfo();
        }

        /**
         * Execute getAllProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TimeTrackingProvider>> _callback) throws ApiException {
            return getAllProvidersAsync(_callback);
        }
    }

    /**
     * Get all time tracking providers
     * Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetAllProvidersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllProvidersRequestBuilder getAllProviders() throws IllegalArgumentException {
        return new GetAllProvidersRequestBuilder();
    }
    private okhttp3.Call getTimeTrackingOptionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/configuration/timetracking/options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeTrackingOptionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTimeTrackingOptionsCall(_callback);

    }


    private ApiResponse<TimeTrackingConfiguration> getTimeTrackingOptionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTimeTrackingOptionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimeTrackingConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeTrackingOptionsAsync(final ApiCallback<TimeTrackingConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeTrackingOptionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimeTrackingConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeTrackingOptionsRequestBuilder {

        private GetTimeTrackingOptionsRequestBuilder() {
        }

        /**
         * Build call for getTimeTrackingOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeTrackingOptionsCall(_callback);
        }


        /**
         * Execute getTimeTrackingOptions request
         * @return TimeTrackingConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingConfiguration execute() throws ApiException {
            ApiResponse<TimeTrackingConfiguration> localVarResp = getTimeTrackingOptionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeTrackingOptions request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingConfiguration> executeWithHttpInfo() throws ApiException {
            return getTimeTrackingOptionsWithHttpInfo();
        }

        /**
         * Execute getTimeTrackingOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingConfiguration> _callback) throws ApiException {
            return getTimeTrackingOptionsAsync(_callback);
        }
    }

    /**
     * Get time tracking settings
     * Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetTimeTrackingOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeTrackingOptionsRequestBuilder getTimeTrackingOptions() throws IllegalArgumentException {
        return new GetTimeTrackingOptionsRequestBuilder();
    }
    private okhttp3.Call selectProviderCall(TimeTrackingProvider timeTrackingProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingProvider;

        // create path and map variables
        String localVarPath = "/rest/api/3/configuration/timetracking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectProviderValidateBeforeCall(TimeTrackingProvider timeTrackingProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeTrackingProvider' is set
        if (timeTrackingProvider == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingProvider' when calling selectProvider(Async)");
        }

        return selectProviderCall(timeTrackingProvider, _callback);

    }


    private ApiResponse<Object> selectProviderWithHttpInfo(TimeTrackingProvider timeTrackingProvider) throws ApiException {
        okhttp3.Call localVarCall = selectProviderValidateBeforeCall(timeTrackingProvider, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call selectProviderAsync(TimeTrackingProvider timeTrackingProvider, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectProviderValidateBeforeCall(timeTrackingProvider, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SelectProviderRequestBuilder {
        private final String key;
        private String name;
        private String url;

        private SelectProviderRequestBuilder(String key) {
            this.key = key;
        }

        /**
         * Set name
         * @param name The name of the time tracking provider. For example, *JIRA provided time tracking*. (optional)
         * @return SelectProviderRequestBuilder
         */
        public SelectProviderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL of the configuration page for the time tracking provider app. For example, *_/example/config/url*. This property is only returned if the &#x60;adminPageKey&#x60; property is set in the module descriptor of the time tracking provider app. (optional)
         * @return SelectProviderRequestBuilder
         */
        public SelectProviderRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Build call for selectProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the time tracking provider is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingProvider timeTrackingProvider = buildBodyParams();
            return selectProviderCall(timeTrackingProvider, _callback);
        }

        private TimeTrackingProvider buildBodyParams() {
            TimeTrackingProvider timeTrackingProvider = new TimeTrackingProvider();
            timeTrackingProvider.key(this.key);
            timeTrackingProvider.name(this.name);
            timeTrackingProvider.url(this.url);
            return timeTrackingProvider;
        }

        /**
         * Execute selectProvider request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the time tracking provider is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            TimeTrackingProvider timeTrackingProvider = buildBodyParams();
            ApiResponse<Object> localVarResp = selectProviderWithHttpInfo(timeTrackingProvider);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute selectProvider request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the time tracking provider is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            TimeTrackingProvider timeTrackingProvider = buildBodyParams();
            return selectProviderWithHttpInfo(timeTrackingProvider);
        }

        /**
         * Execute selectProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the time tracking provider is not found. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            TimeTrackingProvider timeTrackingProvider = buildBodyParams();
            return selectProviderAsync(timeTrackingProvider, _callback);
        }
    }

    /**
     * Select time tracking provider
     * Selects a time tracking provider.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param timeTrackingProvider  (required)
     * @return SelectProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the time tracking provider is not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public SelectProviderRequestBuilder selectProvider(String key) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new SelectProviderRequestBuilder(key);
    }
    private okhttp3.Call selectedProviderCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/configuration/timetracking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectedProviderValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selectedProviderCall(_callback);

    }


    private ApiResponse<TimeTrackingProvider> selectedProviderWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selectedProviderValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TimeTrackingProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call selectedProviderAsync(final ApiCallback<TimeTrackingProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectedProviderValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TimeTrackingProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SelectedProviderRequestBuilder {

        private SelectedProviderRequestBuilder() {
        }

        /**
         * Build call for selectedProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and time tracking is enabled. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful but time tracking is disabled. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return selectedProviderCall(_callback);
        }


        /**
         * Execute selectedProvider request
         * @return TimeTrackingProvider
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and time tracking is enabled. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful but time tracking is disabled. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingProvider execute() throws ApiException {
            ApiResponse<TimeTrackingProvider> localVarResp = selectedProviderWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute selectedProvider request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingProvider&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and time tracking is enabled. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful but time tracking is disabled. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingProvider> executeWithHttpInfo() throws ApiException {
            return selectedProviderWithHttpInfo();
        }

        /**
         * Execute selectedProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and time tracking is enabled. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful but time tracking is disabled. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingProvider> _callback) throws ApiException {
            return selectedProviderAsync(_callback);
        }
    }

    /**
     * Get selected time tracking provider
     * Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return SelectedProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful and time tracking is enabled. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful but time tracking is disabled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public SelectedProviderRequestBuilder selectedProvider() throws IllegalArgumentException {
        return new SelectedProviderRequestBuilder();
    }
    private okhttp3.Call setOptionsCall(TimeTrackingConfiguration timeTrackingConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingConfiguration;

        // create path and map variables
        String localVarPath = "/rest/api/3/configuration/timetracking/options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOptionsValidateBeforeCall(TimeTrackingConfiguration timeTrackingConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeTrackingConfiguration' is set
        if (timeTrackingConfiguration == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingConfiguration' when calling setOptions(Async)");
        }

        return setOptionsCall(timeTrackingConfiguration, _callback);

    }


    private ApiResponse<TimeTrackingConfiguration> setOptionsWithHttpInfo(TimeTrackingConfiguration timeTrackingConfiguration) throws ApiException {
        okhttp3.Call localVarCall = setOptionsValidateBeforeCall(timeTrackingConfiguration, null);
        Type localVarReturnType = new TypeToken<TimeTrackingConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setOptionsAsync(TimeTrackingConfiguration timeTrackingConfiguration, final ApiCallback<TimeTrackingConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOptionsValidateBeforeCall(timeTrackingConfiguration, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetOptionsRequestBuilder {
        private final String defaultUnit;
        private final String timeFormat;
        private final Double workingDaysPerWeek;
        private final Double workingHoursPerDay;

        private SetOptionsRequestBuilder(String defaultUnit, String timeFormat, Double workingDaysPerWeek, Double workingHoursPerDay) {
            this.defaultUnit = defaultUnit;
            this.timeFormat = timeFormat;
            this.workingDaysPerWeek = workingDaysPerWeek;
            this.workingHoursPerDay = workingHoursPerDay;
        }

        /**
         * Build call for setOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingConfiguration timeTrackingConfiguration = buildBodyParams();
            return setOptionsCall(timeTrackingConfiguration, _callback);
        }

        private TimeTrackingConfiguration buildBodyParams() {
            TimeTrackingConfiguration timeTrackingConfiguration = new TimeTrackingConfiguration();
            if (this.defaultUnit != null)
            timeTrackingConfiguration.defaultUnit(TimeTrackingConfiguration.DefaultUnitEnum.fromValue(this.defaultUnit));
            if (this.timeFormat != null)
            timeTrackingConfiguration.timeFormat(TimeTrackingConfiguration.TimeFormatEnum.fromValue(this.timeFormat));
            timeTrackingConfiguration.workingDaysPerWeek(this.workingDaysPerWeek);
            timeTrackingConfiguration.workingHoursPerDay(this.workingHoursPerDay);
            return timeTrackingConfiguration;
        }

        /**
         * Execute setOptions request
         * @return TimeTrackingConfiguration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingConfiguration execute() throws ApiException {
            TimeTrackingConfiguration timeTrackingConfiguration = buildBodyParams();
            ApiResponse<TimeTrackingConfiguration> localVarResp = setOptionsWithHttpInfo(timeTrackingConfiguration);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setOptions request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingConfiguration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingConfiguration> executeWithHttpInfo() throws ApiException {
            TimeTrackingConfiguration timeTrackingConfiguration = buildBodyParams();
            return setOptionsWithHttpInfo(timeTrackingConfiguration);
        }

        /**
         * Execute setOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request object is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingConfiguration> _callback) throws ApiException {
            TimeTrackingConfiguration timeTrackingConfiguration = buildBodyParams();
            return setOptionsAsync(timeTrackingConfiguration, _callback);
        }
    }

    /**
     * Set time tracking settings
     * Sets the time tracking settings.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param timeTrackingConfiguration  (required)
     * @return SetOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request object is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public SetOptionsRequestBuilder setOptions(String defaultUnit, String timeFormat, Double workingDaysPerWeek, Double workingHoursPerDay) throws IllegalArgumentException {
        if (defaultUnit == null) throw new IllegalArgumentException("\"defaultUnit\" is required but got null");
            

        if (timeFormat == null) throw new IllegalArgumentException("\"timeFormat\" is required but got null");
            

        if (workingDaysPerWeek == null) throw new IllegalArgumentException("\"workingDaysPerWeek\" is required but got null");
        if (workingHoursPerDay == null) throw new IllegalArgumentException("\"workingHoursPerDay\" is required but got null");
        return new SetOptionsRequestBuilder(defaultUnit, timeFormat, workingDaysPerWeek, workingHoursPerDay);
    }
}
