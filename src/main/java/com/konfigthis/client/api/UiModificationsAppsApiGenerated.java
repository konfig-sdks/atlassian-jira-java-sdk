/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateUiModificationDetails;
import com.konfigthis.client.model.PageBeanUiModificationDetails;
import com.konfigthis.client.model.UiModificationContextDetails;
import com.konfigthis.client.model.UiModificationIdentifiers;
import com.konfigthis.client.model.UpdateUiModificationDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UiModificationsAppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UiModificationsAppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UiModificationsAppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createModificationCall(CreateUiModificationDetails createUiModificationDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUiModificationDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/uiModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createModificationValidateBeforeCall(CreateUiModificationDetails createUiModificationDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUiModificationDetails' is set
        if (createUiModificationDetails == null) {
            throw new ApiException("Missing the required parameter 'createUiModificationDetails' when calling createModification(Async)");
        }

        return createModificationCall(createUiModificationDetails, _callback);

    }


    private ApiResponse<UiModificationIdentifiers> createModificationWithHttpInfo(CreateUiModificationDetails createUiModificationDetails) throws ApiException {
        okhttp3.Call localVarCall = createModificationValidateBeforeCall(createUiModificationDetails, null);
        Type localVarReturnType = new TypeToken<UiModificationIdentifiers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createModificationAsync(CreateUiModificationDetails createUiModificationDetails, final ApiCallback<UiModificationIdentifiers> _callback) throws ApiException {

        okhttp3.Call localVarCall = createModificationValidateBeforeCall(createUiModificationDetails, _callback);
        Type localVarReturnType = new TypeToken<UiModificationIdentifiers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateModificationRequestBuilder {
        private final String name;
        private String description;
        private List<UiModificationContextDetails> contexts;
        private String data;

        private CreateModificationRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the UI modification. The maximum length is 255 characters. (optional)
         * @return CreateModificationRequestBuilder
         */
        public CreateModificationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contexts
         * @param contexts List of contexts of the UI modification. The maximum number of contexts is 1000. (optional)
         * @return CreateModificationRequestBuilder
         */
        public CreateModificationRequestBuilder contexts(List<UiModificationContextDetails> contexts) {
            this.contexts = contexts;
            return this;
        }
        
        /**
         * Set data
         * @param data The data of the UI modification. The maximum size of the data is 50000 characters. (optional)
         * @return CreateModificationRequestBuilder
         */
        public CreateModificationRequestBuilder data(String data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for createModification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the UI modification is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUiModificationDetails createUiModificationDetails = buildBodyParams();
            return createModificationCall(createUiModificationDetails, _callback);
        }

        private CreateUiModificationDetails buildBodyParams() {
            CreateUiModificationDetails createUiModificationDetails = new CreateUiModificationDetails();
            createUiModificationDetails.description(this.description);
            createUiModificationDetails.contexts(this.contexts);
            createUiModificationDetails.data(this.data);
            createUiModificationDetails.name(this.name);
            return createUiModificationDetails;
        }

        /**
         * Execute createModification request
         * @return UiModificationIdentifiers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the UI modification is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public UiModificationIdentifiers execute() throws ApiException {
            CreateUiModificationDetails createUiModificationDetails = buildBodyParams();
            ApiResponse<UiModificationIdentifiers> localVarResp = createModificationWithHttpInfo(createUiModificationDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createModification request with HTTP info returned
         * @return ApiResponse&lt;UiModificationIdentifiers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the UI modification is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UiModificationIdentifiers> executeWithHttpInfo() throws ApiException {
            CreateUiModificationDetails createUiModificationDetails = buildBodyParams();
            return createModificationWithHttpInfo(createUiModificationDetails);
        }

        /**
         * Execute createModification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the UI modification is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UiModificationIdentifiers> _callback) throws ApiException {
            CreateUiModificationDetails createUiModificationDetails = buildBodyParams();
            return createModificationAsync(createUiModificationDetails, _callback);
        }
    }

    /**
     * Create UI modification
     * Creates a UI modification. UI modification can only be created by Forge apps.  Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     * @param createUiModificationDetails Details of the UI modification. (required)
     * @return CreateModificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the UI modification is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
     </table>
     */
    public CreateModificationRequestBuilder createModification(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateModificationRequestBuilder(name);
    }
    private okhttp3.Call deleteModificationCall(String uiModificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/uiModifications/{uiModificationId}"
            .replace("{" + "uiModificationId" + "}", localVarApiClient.escapeString(uiModificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModificationValidateBeforeCall(String uiModificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uiModificationId' is set
        if (uiModificationId == null) {
            throw new ApiException("Missing the required parameter 'uiModificationId' when calling deleteModification(Async)");
        }

        return deleteModificationCall(uiModificationId, _callback);

    }


    private ApiResponse<Object> deleteModificationWithHttpInfo(String uiModificationId) throws ApiException {
        okhttp3.Call localVarCall = deleteModificationValidateBeforeCall(uiModificationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteModificationAsync(String uiModificationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModificationValidateBeforeCall(uiModificationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteModificationRequestBuilder {
        private final String uiModificationId;

        private DeleteModificationRequestBuilder(String uiModificationId) {
            this.uiModificationId = uiModificationId;
        }

        /**
         * Build call for deleteModification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the UI modification is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteModificationCall(uiModificationId, _callback);
        }


        /**
         * Execute deleteModification request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the UI modification is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteModificationWithHttpInfo(uiModificationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteModification request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the UI modification is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteModificationWithHttpInfo(uiModificationId);
        }

        /**
         * Execute deleteModification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the UI modification is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteModificationAsync(uiModificationId, _callback);
        }
    }

    /**
     * Delete UI modification
     * Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param uiModificationId The ID of the UI modification. (required)
     * @return DeleteModificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the UI modification is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the UI modification is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteModificationRequestBuilder deleteModification(String uiModificationId) throws IllegalArgumentException {
        if (uiModificationId == null) throw new IllegalArgumentException("\"uiModificationId\" is required but got null");
            

        return new DeleteModificationRequestBuilder(uiModificationId);
    }
    private okhttp3.Call getModificationsCall(Long startAt, Integer maxResults, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/uiModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModificationsValidateBeforeCall(Long startAt, Integer maxResults, String expand, final ApiCallback _callback) throws ApiException {
        return getModificationsCall(startAt, maxResults, expand, _callback);

    }


    private ApiResponse<PageBeanUiModificationDetails> getModificationsWithHttpInfo(Long startAt, Integer maxResults, String expand) throws ApiException {
        okhttp3.Call localVarCall = getModificationsValidateBeforeCall(startAt, maxResults, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanUiModificationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getModificationsAsync(Long startAt, Integer maxResults, String expand, final ApiCallback<PageBeanUiModificationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModificationsValidateBeforeCall(startAt, maxResults, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanUiModificationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetModificationsRequestBuilder {
        private Long startAt;
        private Integer maxResults;
        private String expand;

        private GetModificationsRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetModificationsRequestBuilder
         */
        public GetModificationsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetModificationsRequestBuilder
         */
        public GetModificationsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;data&#x60; Returns UI modification data.  *  &#x60;contexts&#x60; Returns UI modification contexts. (optional)
         * @return GetModificationsRequestBuilder
         */
        public GetModificationsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getModifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getModificationsCall(startAt, maxResults, expand, _callback);
        }


        /**
         * Execute getModifications request
         * @return PageBeanUiModificationDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanUiModificationDetails execute() throws ApiException {
            ApiResponse<PageBeanUiModificationDetails> localVarResp = getModificationsWithHttpInfo(startAt, maxResults, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getModifications request with HTTP info returned
         * @return ApiResponse&lt;PageBeanUiModificationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanUiModificationDetails> executeWithHttpInfo() throws ApiException {
            return getModificationsWithHttpInfo(startAt, maxResults, expand);
        }

        /**
         * Execute getModifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanUiModificationDetails> _callback) throws ApiException {
            return getModificationsAsync(startAt, maxResults, expand, _callback);
        }
    }

    /**
     * Get UI modifications
     * Gets UI modifications. UI modifications can only be retrieved by Forge apps.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @return GetModificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
     </table>
     */
    public GetModificationsRequestBuilder getModifications() throws IllegalArgumentException {
        return new GetModificationsRequestBuilder();
    }
    private okhttp3.Call updateModificationByIdCall(String uiModificationId, UpdateUiModificationDetails updateUiModificationDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUiModificationDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/uiModifications/{uiModificationId}"
            .replace("{" + "uiModificationId" + "}", localVarApiClient.escapeString(uiModificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateModificationByIdValidateBeforeCall(String uiModificationId, UpdateUiModificationDetails updateUiModificationDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uiModificationId' is set
        if (uiModificationId == null) {
            throw new ApiException("Missing the required parameter 'uiModificationId' when calling updateModificationById(Async)");
        }

        // verify the required parameter 'updateUiModificationDetails' is set
        if (updateUiModificationDetails == null) {
            throw new ApiException("Missing the required parameter 'updateUiModificationDetails' when calling updateModificationById(Async)");
        }

        return updateModificationByIdCall(uiModificationId, updateUiModificationDetails, _callback);

    }


    private ApiResponse<Object> updateModificationByIdWithHttpInfo(String uiModificationId, UpdateUiModificationDetails updateUiModificationDetails) throws ApiException {
        okhttp3.Call localVarCall = updateModificationByIdValidateBeforeCall(uiModificationId, updateUiModificationDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateModificationByIdAsync(String uiModificationId, UpdateUiModificationDetails updateUiModificationDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateModificationByIdValidateBeforeCall(uiModificationId, updateUiModificationDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateModificationByIdRequestBuilder {
        private final String uiModificationId;
        private String description;
        private List<UiModificationContextDetails> contexts;
        private String data;
        private String name;

        private UpdateModificationByIdRequestBuilder(String uiModificationId) {
            this.uiModificationId = uiModificationId;
        }

        /**
         * Set description
         * @param description The description of the UI modification. The maximum length is 255 characters. (optional)
         * @return UpdateModificationByIdRequestBuilder
         */
        public UpdateModificationByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contexts
         * @param contexts List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts. (optional)
         * @return UpdateModificationByIdRequestBuilder
         */
        public UpdateModificationByIdRequestBuilder contexts(List<UiModificationContextDetails> contexts) {
            this.contexts = contexts;
            return this;
        }
        
        /**
         * Set data
         * @param data The data of the UI modification. The maximum size of the data is 50000 characters. (optional)
         * @return UpdateModificationByIdRequestBuilder
         */
        public UpdateModificationByIdRequestBuilder data(String data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the UI modification. The maximum length is 255 characters. (optional)
         * @return UpdateModificationByIdRequestBuilder
         */
        public UpdateModificationByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateModificationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateUiModificationDetails updateUiModificationDetails = buildBodyParams();
            return updateModificationByIdCall(uiModificationId, updateUiModificationDetails, _callback);
        }

        private UpdateUiModificationDetails buildBodyParams() {
            UpdateUiModificationDetails updateUiModificationDetails = new UpdateUiModificationDetails();
            updateUiModificationDetails.description(this.description);
            updateUiModificationDetails.contexts(this.contexts);
            updateUiModificationDetails.data(this.data);
            updateUiModificationDetails.name(this.name);
            return updateUiModificationDetails;
        }

        /**
         * Execute updateModificationById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateUiModificationDetails updateUiModificationDetails = buildBodyParams();
            ApiResponse<Object> localVarResp = updateModificationByIdWithHttpInfo(uiModificationId, updateUiModificationDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateModificationById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateUiModificationDetails updateUiModificationDetails = buildBodyParams();
            return updateModificationByIdWithHttpInfo(uiModificationId, updateUiModificationDetails);
        }

        /**
         * Execute updateModificationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the UI modification is updated. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateUiModificationDetails updateUiModificationDetails = buildBodyParams();
            return updateModificationByIdAsync(uiModificationId, updateUiModificationDetails, _callback);
        }
    }

    /**
     * Update UI modification
     * Updates a UI modification. UI modification can only be updated by Forge apps.  Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     * @param uiModificationId The ID of the UI modification. (required)
     * @param updateUiModificationDetails Details of the UI modification. (required)
     * @return UpdateModificationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the UI modification is updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not from a Forge app. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateModificationByIdRequestBuilder updateModificationById(String uiModificationId) throws IllegalArgumentException {
        if (uiModificationId == null) throw new IllegalArgumentException("\"uiModificationId\" is required but got null");
            

        return new UpdateModificationByIdRequestBuilder(uiModificationId);
    }
}
