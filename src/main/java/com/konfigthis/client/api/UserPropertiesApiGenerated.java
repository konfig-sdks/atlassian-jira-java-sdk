/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EntityProperty;
import com.konfigthis.client.model.PropertyKeys;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserPropertiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserPropertiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserPropertiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deletePropertyCall(String propertyKey, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (userKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userKey", userKey));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(String propertyKey, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling deleteProperty(Async)");
        }

        return deletePropertyCall(propertyKey, accountId, userKey, username, _callback);

    }


    private ApiResponse<Void> deletePropertyWithHttpInfo(String propertyKey, String accountId, String userKey, String username) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(propertyKey, accountId, userKey, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePropertyAsync(String propertyKey, String accountId, String userKey, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(propertyKey, accountId, userKey, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePropertyRequestBuilder {
        private final String propertyKey;
        private String accountId;
        private String userKey;
        private String username;

        private DeletePropertyRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set accountId
         * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return DeletePropertyRequestBuilder
         */
        public DeletePropertyRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set userKey
         * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return DeletePropertyRequestBuilder
         */
        public DeletePropertyRequestBuilder userKey(String userKey) {
            this.userKey = userKey;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return DeletePropertyRequestBuilder
         */
        public DeletePropertyRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for deleteProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the user property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user or the property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyCall(propertyKey, accountId, userKey, username, _callback);
        }


        /**
         * Execute deleteProperty request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the user property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user or the property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePropertyWithHttpInfo(propertyKey, accountId, userKey, username);
        }

        /**
         * Execute deleteProperty request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the user property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user or the property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePropertyWithHttpInfo(propertyKey, accountId, userKey, username);
        }

        /**
         * Execute deleteProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the user property is deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user or the property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePropertyAsync(propertyKey, accountId, userKey, username, _callback);
        }
    }

    /**
     * Delete user property
     * Deletes a property from a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.  *  Access to Jira, to delete a property from the calling user&#39;s record.
     * @param propertyKey The key of the user&#39;s property. (required)
     * @return DeletePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the user property is deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the user or the property is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePropertyRequestBuilder deleteProperty(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new DeletePropertyRequestBuilder(propertyKey);
    }
    private okhttp3.Call getPropertyCall(String propertyKey, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (userKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userKey", userKey));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValidateBeforeCall(String propertyKey, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling getProperty(Async)");
        }

        return getPropertyCall(propertyKey, accountId, userKey, username, _callback);

    }


    private ApiResponse<EntityProperty> getPropertyWithHttpInfo(String propertyKey, String accountId, String userKey, String username) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(propertyKey, accountId, userKey, username, null);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyAsync(String propertyKey, String accountId, String userKey, String username, final ApiCallback<EntityProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(propertyKey, accountId, userKey, username, _callback);
        Type localVarReturnType = new TypeToken<EntityProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyRequestBuilder {
        private final String propertyKey;
        private String accountId;
        private String userKey;
        private String username;

        private GetPropertyRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set accountId
         * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return GetPropertyRequestBuilder
         */
        public GetPropertyRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set userKey
         * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return GetPropertyRequestBuilder
         */
        public GetPropertyRequestBuilder userKey(String userKey) {
            this.userKey = userKey;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return GetPropertyRequestBuilder
         */
        public GetPropertyRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for getProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyCall(propertyKey, accountId, userKey, username, _callback);
        }


        /**
         * Execute getProperty request
         * @return EntityProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public EntityProperty execute() throws ApiException {
            ApiResponse<EntityProperty> localVarResp = getPropertyWithHttpInfo(propertyKey, accountId, userKey, username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProperty request with HTTP info returned
         * @return ApiResponse&lt;EntityProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityProperty> executeWithHttpInfo() throws ApiException {
            return getPropertyWithHttpInfo(propertyKey, accountId, userKey, username);
        }

        /**
         * Execute getProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityProperty> _callback) throws ApiException {
            return getPropertyAsync(propertyKey, accountId, userKey, username, _callback);
        }
    }

    /**
     * Get user property
     * Returns the value of a user&#39;s property. If no property key is provided [Get user property keys](https://dac-static.atlassian.com) is called.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.  *  Access to Jira, to get a property from the calling user&#39;s record.
     * @param propertyKey The key of the user&#39;s property. (required)
     * @return GetPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyRequestBuilder getProperty(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new GetPropertyRequestBuilder(propertyKey);
    }
    private okhttp3.Call getPropertyKeysCall(String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (userKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userKey", userKey));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyKeysValidateBeforeCall(String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        return getPropertyKeysCall(accountId, userKey, username, _callback);

    }


    private ApiResponse<PropertyKeys> getPropertyKeysWithHttpInfo(String accountId, String userKey, String username) throws ApiException {
        okhttp3.Call localVarCall = getPropertyKeysValidateBeforeCall(accountId, userKey, username, null);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyKeysAsync(String accountId, String userKey, String username, final ApiCallback<PropertyKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyKeysValidateBeforeCall(accountId, userKey, username, _callback);
        Type localVarReturnType = new TypeToken<PropertyKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyKeysRequestBuilder {
        private String accountId;
        private String userKey;
        private String username;

        private GetPropertyKeysRequestBuilder() {
        }

        /**
         * Set accountId
         * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return GetPropertyKeysRequestBuilder
         */
        public GetPropertyKeysRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set userKey
         * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return GetPropertyKeysRequestBuilder
         */
        public GetPropertyKeysRequestBuilder userKey(String userKey) {
            this.userKey = userKey;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return GetPropertyKeysRequestBuilder
         */
        public GetPropertyKeysRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for getPropertyKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyKeysCall(accountId, userKey, username, _callback);
        }


        /**
         * Execute getPropertyKeys request
         * @return PropertyKeys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public PropertyKeys execute() throws ApiException {
            ApiResponse<PropertyKeys> localVarResp = getPropertyKeysWithHttpInfo(accountId, userKey, username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPropertyKeys request with HTTP info returned
         * @return ApiResponse&lt;PropertyKeys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PropertyKeys> executeWithHttpInfo() throws ApiException {
            return getPropertyKeysWithHttpInfo(accountId, userKey, username);
        }

        /**
         * Execute getPropertyKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PropertyKeys> _callback) throws ApiException {
            return getPropertyKeysAsync(accountId, userKey, username, _callback);
        }
    }

    /**
     * Get user property keys
     * Returns the keys of all properties for a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.  *  Access to Jira, to access the calling user&#39;s property keys.
     * @return GetPropertyKeysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyKeysRequestBuilder getPropertyKeys() throws IllegalArgumentException {
        return new GetPropertyKeysRequestBuilder();
    }
    private okhttp3.Call setUserPropertyCall(String propertyKey, Object body, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/properties/{propertyKey}"
            .replace("{" + "propertyKey" + "}", localVarApiClient.escapeString(propertyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (userKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userKey", userKey));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserPropertyValidateBeforeCall(String propertyKey, Object body, String accountId, String userKey, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyKey' is set
        if (propertyKey == null) {
            throw new ApiException("Missing the required parameter 'propertyKey' when calling setUserProperty(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setUserProperty(Async)");
        }

        return setUserPropertyCall(propertyKey, body, accountId, userKey, username, _callback);

    }


    private ApiResponse<Object> setUserPropertyWithHttpInfo(String propertyKey, Object body, String accountId, String userKey, String username) throws ApiException {
        okhttp3.Call localVarCall = setUserPropertyValidateBeforeCall(propertyKey, body, accountId, userKey, username, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setUserPropertyAsync(String propertyKey, Object body, String accountId, String userKey, String username, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserPropertyValidateBeforeCall(propertyKey, body, accountId, userKey, username, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetUserPropertyRequestBuilder {
        private final String propertyKey;
        private String accountId;
        private String userKey;
        private String username;
        private Object body;

        private SetUserPropertyRequestBuilder(String propertyKey) {
            this.propertyKey = propertyKey;
        }

        /**
         * Set body
         * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (optional)
         * @return SetUserPropertyRequestBuilder
         */
        public SetUserPropertyRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set accountId
         * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
         * @return SetUserPropertyRequestBuilder
         */
        public SetUserPropertyRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set userKey
         * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return SetUserPropertyRequestBuilder
         */
        public SetUserPropertyRequestBuilder userKey(String userKey) {
            this.userKey = userKey;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return SetUserPropertyRequestBuilder
         */
        public SetUserPropertyRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for setUserProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the user property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the user property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if the property key is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return setUserPropertyCall(propertyKey, body, accountId, userKey, username, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute setUserProperty request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the user property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the user property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if the property key is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = setUserPropertyWithHttpInfo(propertyKey, body, accountId, userKey, username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setUserProperty request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the user property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the user property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if the property key is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return setUserPropertyWithHttpInfo(propertyKey, body, accountId, userKey, username);
        }

        /**
         * Execute setUserProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the user property is updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returned if the user property is created. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Returned if the property key is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return setUserPropertyAsync(propertyKey, body, accountId, userKey, username, _callback);
        }
    }

    /**
     * Set user property
     * Sets the value of a user&#39;s property. Use this resource to store custom data against a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.  *  Access to Jira, to set a property on the calling user&#39;s record.
     * @param propertyKey The key of the user&#39;s property. The maximum length is 255 characters. (required)
     * @param body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
     * @return SetUserPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the user property is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returned if the user property is created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;accountId&#x60; is missing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission or is not accessing their user record. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the user is not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Returned if the property key is not specified. </td><td>  -  </td></tr>
     </table>
     */
    public SetUserPropertyRequestBuilder setUserProperty(String propertyKey) throws IllegalArgumentException {
        if (propertyKey == null) throw new IllegalArgumentException("\"propertyKey\" is required but got null");
            

        return new SetUserPropertyRequestBuilder(propertyKey);
    }
}
