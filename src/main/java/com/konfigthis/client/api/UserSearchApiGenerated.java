/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FoundUsers;
import com.konfigthis.client.model.PageBeanUser;
import com.konfigthis.client.model.PageBeanUserKey;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserSearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserSearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserSearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call findAssignableUsersCall(String projectKeys, String query, String username, String accountId, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/assignable/multiProjectSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (projectKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKeys", projectKeys));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAssignableUsersValidateBeforeCall(String projectKeys, String query, String username, String accountId, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectKeys' is set
        if (projectKeys == null) {
            throw new ApiException("Missing the required parameter 'projectKeys' when calling findAssignableUsers(Async)");
        }

        return findAssignableUsersCall(projectKeys, query, username, accountId, startAt, maxResults, _callback);

    }


    private ApiResponse<List<User>> findAssignableUsersWithHttpInfo(String projectKeys, String query, String username, String accountId, Integer startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = findAssignableUsersValidateBeforeCall(projectKeys, query, username, accountId, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findAssignableUsersAsync(String projectKeys, String query, String username, String accountId, Integer startAt, Integer maxResults, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAssignableUsersValidateBeforeCall(projectKeys, query, username, accountId, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindAssignableUsersRequestBuilder {
        private final String projectKeys;
        private String query;
        private String username;
        private String accountId;
        private Integer startAt;
        private Integer maxResults;

        private FindAssignableUsersRequestBuilder(String projectKeys) {
            this.projectKeys = projectKeys;
        }

        /**
         * Set query
         * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
         * @return FindAssignableUsersRequestBuilder
         */
        public FindAssignableUsersRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindAssignableUsersRequestBuilder
         */
        public FindAssignableUsersRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
         * @return FindAssignableUsersRequestBuilder
         */
        public FindAssignableUsersRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindAssignableUsersRequestBuilder
         */
        public FindAssignableUsersRequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return FindAssignableUsersRequestBuilder
         */
        public FindAssignableUsersRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for findAssignableUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if one or more of the projects is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findAssignableUsersCall(projectKeys, query, username, accountId, startAt, maxResults, _callback);
        }


        /**
         * Execute findAssignableUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if one or more of the projects is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = findAssignableUsersWithHttpInfo(projectKeys, query, username, accountId, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findAssignableUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if one or more of the projects is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return findAssignableUsersWithHttpInfo(projectKeys, query, username, accountId, startAt, maxResults);
        }

        /**
         * Execute findAssignableUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if one or more of the projects is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return findAssignableUsersAsync(projectKeys, query, username, accountId, startAt, maxResults, _callback);
        }
    }

    /**
     * Find users assignable to projects
     * Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who can be assigned issues in the projects, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     * @param projectKeys A list of project keys (case sensitive). This parameter accepts a comma-separated list. (required)
     * @return FindAssignableUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if one or more of the projects is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindAssignableUsersRequestBuilder findAssignableUsers(String projectKeys) throws IllegalArgumentException {
        if (projectKeys == null) throw new IllegalArgumentException("\"projectKeys\" is required but got null");
            

        return new FindAssignableUsersRequestBuilder(projectKeys);
    }
    private okhttp3.Call findAssignableUsers_0Call(String query, String sessionId, String username, String accountId, String project, String issueKey, Integer startAt, Integer maxResults, Integer actionDescriptorId, Boolean recommend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/assignable/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (issueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueKey", issueKey));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (actionDescriptorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionDescriptorId", actionDescriptorId));
        }

        if (recommend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recommend", recommend));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAssignableUsers_0ValidateBeforeCall(String query, String sessionId, String username, String accountId, String project, String issueKey, Integer startAt, Integer maxResults, Integer actionDescriptorId, Boolean recommend, final ApiCallback _callback) throws ApiException {
        return findAssignableUsers_0Call(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend, _callback);

    }


    private ApiResponse<List<User>> findAssignableUsers_0WithHttpInfo(String query, String sessionId, String username, String accountId, String project, String issueKey, Integer startAt, Integer maxResults, Integer actionDescriptorId, Boolean recommend) throws ApiException {
        okhttp3.Call localVarCall = findAssignableUsers_0ValidateBeforeCall(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findAssignableUsers_0Async(String query, String sessionId, String username, String accountId, String project, String issueKey, Integer startAt, Integer maxResults, Integer actionDescriptorId, Boolean recommend, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAssignableUsers_0ValidateBeforeCall(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindAssignableUsers0RequestBuilder {
        private String query;
        private String sessionId;
        private String username;
        private String accountId;
        private String project;
        private String issueKey;
        private Integer startAt;
        private Integer maxResults;
        private Integer actionDescriptorId;
        private Boolean recommend;

        private FindAssignableUsers0RequestBuilder() {
        }

        /**
         * Set query
         * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;username&#x60; or &#x60;accountId&#x60; is specified. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sessionId
         * @param sessionId The sessionId of this request. SessionId is the same until the assignee is set. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder sessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set project
         * @param project The project ID or project key (case sensitive). Required, unless &#x60;issueKey&#x60; is specified. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set issueKey
         * @param issueKey The key of the issue. Required, unless &#x60;project&#x60; is specified. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder issueKey(String issueKey) {
            this.issueKey = issueKey;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue. (optional, default to 50)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set actionDescriptorId
         * @param actionDescriptorId The ID of the transition. (optional)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder actionDescriptorId(Integer actionDescriptorId) {
            this.actionDescriptorId = actionDescriptorId;
            return this;
        }
        
        /**
         * Set recommend
         * @param recommend  (optional, default to false)
         * @return FindAssignableUsers0RequestBuilder
         */
        public FindAssignableUsers0RequestBuilder recommend(Boolean recommend) {
            this.recommend = recommend;
            return this;
        }
        
        /**
         * Build call for findAssignableUsers_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project, issue, or transition is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findAssignableUsers_0Call(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend, _callback);
        }


        /**
         * Execute findAssignableUsers_0 request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project, issue, or transition is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = findAssignableUsers_0WithHttpInfo(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findAssignableUsers_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project, issue, or transition is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return findAssignableUsers_0WithHttpInfo(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend);
        }

        /**
         * Execute findAssignableUsers_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the project, issue, or transition is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return findAssignableUsers_0Async(query, sessionId, username, accountId, project, issueKey, startAt, maxResults, actionDescriptorId, recommend, _callback);
        }
    }

    /**
     * Find users assignable to issues
     * Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:   *  a new issue, by providing the &#x60;projectKeyOrId&#x60;.  *  an updated issue, by providing the &#x60;issueKey&#x60;.  *  to an issue during a transition (workflow action), by providing the &#x60;issueKey&#x60; and the transition id in &#x60;actionDescriptorId&#x60;. You can obtain the IDs of an issue&#39;s valid transitions using the &#x60;transitions&#x60; option in the &#x60;expand&#x60; parameter of [Get issue](https://dac-static.atlassian.com).  In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who can be assigned the issue, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @return FindAssignableUsers0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project, issue, or transition is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindAssignableUsers0RequestBuilder findAssignableUsers_0() throws IllegalArgumentException {
        return new FindAssignableUsers0RequestBuilder();
    }
    private okhttp3.Call findUsersByPropertyAndStringCall(String query, String username, String accountId, Integer startAt, Integer maxResults, String property, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersByPropertyAndStringValidateBeforeCall(String query, String username, String accountId, Integer startAt, Integer maxResults, String property, final ApiCallback _callback) throws ApiException {
        return findUsersByPropertyAndStringCall(query, username, accountId, startAt, maxResults, property, _callback);

    }


    private ApiResponse<List<User>> findUsersByPropertyAndStringWithHttpInfo(String query, String username, String accountId, Integer startAt, Integer maxResults, String property) throws ApiException {
        okhttp3.Call localVarCall = findUsersByPropertyAndStringValidateBeforeCall(query, username, accountId, startAt, maxResults, property, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersByPropertyAndStringAsync(String query, String username, String accountId, Integer startAt, Integer maxResults, String property, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersByPropertyAndStringValidateBeforeCall(query, username, accountId, startAt, maxResults, property, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersByPropertyAndStringRequestBuilder {
        private String query;
        private String username;
        private String accountId;
        private Integer startAt;
        private Integer maxResults;
        private String property;

        private FindUsersByPropertyAndStringRequestBuilder() {
        }

        /**
         * Set query
         * @param query A query string that is matched against user attributes ( &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;) to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; or &#x60;property&#x60; is specified. (optional)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set username
         * @param username  (optional)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId A query string that is matched exactly against a user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; or &#x60;property&#x60; is specified. (optional)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of filtered results (page offset). (optional, default to 0)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set property
         * @param property A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (&#x3D;) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of &#x60;nested&#x60; from &#x60;{\&quot;something\&quot;:{\&quot;nested\&quot;:1,\&quot;other\&quot;:2}}&#x60; use &#x60;thepropertykey.something.nested&#x3D;1&#x60;. Required, unless &#x60;accountId&#x60; or &#x60;query&#x60; is specified. (optional)
         * @return FindUsersByPropertyAndStringRequestBuilder
         */
        public FindUsersByPropertyAndStringRequestBuilder property(String property) {
            this.property = property;
            return this;
        }
        
        /**
         * Build call for findUsersByPropertyAndString
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersByPropertyAndStringCall(query, username, accountId, startAt, maxResults, property, _callback);
        }


        /**
         * Execute findUsersByPropertyAndString request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = findUsersByPropertyAndStringWithHttpInfo(query, username, accountId, startAt, maxResults, property);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersByPropertyAndString request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return findUsersByPropertyAndStringWithHttpInfo(query, username, accountId, startAt, maxResults, property);
        }

        /**
         * Execute findUsersByPropertyAndString request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return findUsersByPropertyAndStringAsync(query, username, accountId, startAt, maxResults, property, _callback);
        }
    }

    /**
     * Find users
     * Returns a list of active users that match the search string and property.  This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  This operation can be accessed anonymously.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
     * @return FindUsersByPropertyAndStringRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersByPropertyAndStringRequestBuilder findUsersByPropertyAndString() throws IllegalArgumentException {
        return new FindUsersByPropertyAndStringRequestBuilder();
    }
    private okhttp3.Call findUsersByQueryCall(String query, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/search/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersByQueryValidateBeforeCall(String query, Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling findUsersByQuery(Async)");
        }

        return findUsersByQueryCall(query, startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanUser> findUsersByQueryWithHttpInfo(String query, Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = findUsersByQueryValidateBeforeCall(query, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersByQueryAsync(String query, Long startAt, Integer maxResults, final ApiCallback<PageBeanUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersByQueryValidateBeforeCall(query, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersByQueryRequestBuilder {
        private final String query;
        private Long startAt;
        private Integer maxResults;

        private FindUsersByQueryRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindUsersByQueryRequestBuilder
         */
        public FindUsersByQueryRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return FindUsersByQueryRequestBuilder
         */
        public FindUsersByQueryRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for findUsersByQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersByQueryCall(query, startAt, maxResults, _callback);
        }


        /**
         * Execute findUsersByQuery request
         * @return PageBeanUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanUser execute() throws ApiException {
            ApiResponse<PageBeanUser> localVarResp = findUsersByQueryWithHttpInfo(query, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersByQuery request with HTTP info returned
         * @return ApiResponse&lt;PageBeanUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanUser> executeWithHttpInfo() throws ApiException {
            return findUsersByQueryWithHttpInfo(query, startAt, maxResults);
        }

        /**
         * Execute findUsersByQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanUser> _callback) throws ApiException {
            return findUsersByQueryAsync(query, startAt, maxResults, _callback);
        }
    }

    /**
     * Find users by query
     * Finds users with a structured query and returns a [paginated](https://dac-static.atlassian.com) list of user details.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the structured query, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  &#x60;is assignee of PROJ&#x60; Returns the users that are assignees of at least one issue in project *PROJ*.  *  &#x60;is assignee of (PROJ-1, PROJ-2)&#x60; Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is reporter of (PROJ-1, PROJ-2)&#x60; Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is watcher of (PROJ-1, PROJ-2)&#x60; Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is voter of (PROJ-1, PROJ-2)&#x60; Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is commenter of (PROJ-1, PROJ-2)&#x60; Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is transitioner of (PROJ-1, PROJ-2)&#x60; Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  &#x60;[propertyKey].entity.property.path is \&quot;property value\&quot;&#x60; Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the &#x60;AND&#x60; and &#x60;OR&#x60; operators to form more complex queries. For example:  &#x60;is assignee of PROJ AND [propertyKey].entity.property.path is \&quot;property value\&quot;&#x60;
     * @param query The search query. (required)
     * @return FindUsersByQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersByQueryRequestBuilder findUsersByQuery(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new FindUsersByQueryRequestBuilder(query);
    }
    private okhttp3.Call findUsersByQuery_0Call(String query, Long startAt, Integer maxResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/search/query/key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResult", maxResult));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersByQuery_0ValidateBeforeCall(String query, Long startAt, Integer maxResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling findUsersByQuery_0(Async)");
        }

        return findUsersByQuery_0Call(query, startAt, maxResult, _callback);

    }


    private ApiResponse<PageBeanUserKey> findUsersByQuery_0WithHttpInfo(String query, Long startAt, Integer maxResult) throws ApiException {
        okhttp3.Call localVarCall = findUsersByQuery_0ValidateBeforeCall(query, startAt, maxResult, null);
        Type localVarReturnType = new TypeToken<PageBeanUserKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersByQuery_0Async(String query, Long startAt, Integer maxResult, final ApiCallback<PageBeanUserKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersByQuery_0ValidateBeforeCall(query, startAt, maxResult, _callback);
        Type localVarReturnType = new TypeToken<PageBeanUserKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersByQuery0RequestBuilder {
        private final String query;
        private Long startAt;
        private Integer maxResult;

        private FindUsersByQuery0RequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindUsersByQuery0RequestBuilder
         */
        public FindUsersByQuery0RequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResult
         * @param maxResult The maximum number of items to return per page. (optional, default to 100)
         * @return FindUsersByQuery0RequestBuilder
         */
        public FindUsersByQuery0RequestBuilder maxResult(Integer maxResult) {
            this.maxResult = maxResult;
            return this;
        }
        
        /**
         * Build call for findUsersByQuery_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersByQuery_0Call(query, startAt, maxResult, _callback);
        }


        /**
         * Execute findUsersByQuery_0 request
         * @return PageBeanUserKey
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanUserKey execute() throws ApiException {
            ApiResponse<PageBeanUserKey> localVarResp = findUsersByQuery_0WithHttpInfo(query, startAt, maxResult);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersByQuery_0 request with HTTP info returned
         * @return ApiResponse&lt;PageBeanUserKey&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanUserKey> executeWithHttpInfo() throws ApiException {
            return findUsersByQuery_0WithHttpInfo(query, startAt, maxResult);
        }

        /**
         * Execute findUsersByQuery_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanUserKey> _callback) throws ApiException {
            return findUsersByQuery_0Async(query, startAt, maxResult, _callback);
        }
    }

    /**
     * Find user keys by query
     * Finds users with a structured query and returns a [paginated](https://dac-static.atlassian.com) list of user keys.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the structured query, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  &#x60;is assignee of PROJ&#x60; Returns the users that are assignees of at least one issue in project *PROJ*.  *  &#x60;is assignee of (PROJ-1, PROJ-2)&#x60; Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is reporter of (PROJ-1, PROJ-2)&#x60; Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is watcher of (PROJ-1, PROJ-2)&#x60; Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is voter of (PROJ-1, PROJ-2)&#x60; Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is commenter of (PROJ-1, PROJ-2)&#x60; Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is transitioner of (PROJ-1, PROJ-2)&#x60; Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  &#x60;[propertyKey].entity.property.path is \&quot;property value\&quot;&#x60; Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the &#x60;AND&#x60; and &#x60;OR&#x60; operators to form more complex queries. For example:  &#x60;is assignee of PROJ AND [propertyKey].entity.property.path is \&quot;property value\&quot;&#x60;
     * @param query The search query. (required)
     * @return FindUsersByQuery0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersByQuery0RequestBuilder findUsersByQuery_0(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new FindUsersByQuery0RequestBuilder(query);
    }
    private okhttp3.Call findUsersForPickerCall(String query, Integer maxResults, Boolean showAvatar, List<String> exclude, List<String> excludeAccountIds, String avatarSize, Boolean excludeConnectUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/picker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (showAvatar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showAvatar", showAvatar));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (excludeAccountIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeAccountIds", excludeAccountIds));
        }

        if (avatarSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avatarSize", avatarSize));
        }

        if (excludeConnectUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeConnectUsers", excludeConnectUsers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersForPickerValidateBeforeCall(String query, Integer maxResults, Boolean showAvatar, List<String> exclude, List<String> excludeAccountIds, String avatarSize, Boolean excludeConnectUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling findUsersForPicker(Async)");
        }

        return findUsersForPickerCall(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers, _callback);

    }


    private ApiResponse<FoundUsers> findUsersForPickerWithHttpInfo(String query, Integer maxResults, Boolean showAvatar, List<String> exclude, List<String> excludeAccountIds, String avatarSize, Boolean excludeConnectUsers) throws ApiException {
        okhttp3.Call localVarCall = findUsersForPickerValidateBeforeCall(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers, null);
        Type localVarReturnType = new TypeToken<FoundUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersForPickerAsync(String query, Integer maxResults, Boolean showAvatar, List<String> exclude, List<String> excludeAccountIds, String avatarSize, Boolean excludeConnectUsers, final ApiCallback<FoundUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersForPickerValidateBeforeCall(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers, _callback);
        Type localVarReturnType = new TypeToken<FoundUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersForPickerRequestBuilder {
        private final String query;
        private Integer maxResults;
        private Boolean showAvatar;
        private List<String> exclude;
        private List<String> excludeAccountIds;
        private String avatarSize;
        private Boolean excludeConnectUsers;

        private FindUsersForPickerRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return. The total number of matched users is returned in &#x60;total&#x60;. (optional, default to 50)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set showAvatar
         * @param showAvatar Include the URI to the user&#39;s avatar. (optional, default to false)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder showAvatar(Boolean showAvatar) {
            this.showAvatar = showAvatar;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder exclude(List<String> exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set excludeAccountIds
         * @param excludeAccountIds A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, &#x60;excludeAccountIds&#x3D;5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&amp;excludeAccountIds&#x3D;5b10ac8d82e05b22cc7d4ef5&#x60;. Cannot be provided with &#x60;exclude&#x60;. (optional)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder excludeAccountIds(List<String> excludeAccountIds) {
            this.excludeAccountIds = excludeAccountIds;
            return this;
        }
        
        /**
         * Set avatarSize
         * @param avatarSize  (optional)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder avatarSize(String avatarSize) {
            this.avatarSize = avatarSize;
            return this;
        }
        
        /**
         * Set excludeConnectUsers
         * @param excludeConnectUsers  (optional, default to false)
         * @return FindUsersForPickerRequestBuilder
         */
        public FindUsersForPickerRequestBuilder excludeConnectUsers(Boolean excludeConnectUsers) {
            this.excludeConnectUsers = excludeConnectUsers;
            return this;
        }
        
        /**
         * Build call for findUsersForPicker
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersForPickerCall(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers, _callback);
        }


        /**
         * Execute findUsersForPicker request
         * @return FoundUsers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public FoundUsers execute() throws ApiException {
            ApiResponse<FoundUsers> localVarResp = findUsersForPickerWithHttpInfo(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersForPicker request with HTTP info returned
         * @return ApiResponse&lt;FoundUsers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FoundUsers> executeWithHttpInfo() throws ApiException {
            return findUsersForPickerWithHttpInfo(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers);
        }

        /**
         * Execute findUsersForPicker request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FoundUsers> _callback) throws ApiException {
            return findUsersForPickerAsync(query, maxResults, showAvatar, exclude, excludeAccountIds, avatarSize, excludeConnectUsers, _callback);
        }
    }

    /**
     * Find users for picker
     * Returns a list of users whose attributes match the query term. The returned object includes the &#x60;html&#x60; field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.  This operation takes the users in the range defined by &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the query term, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. (required)
     * @return FindUsersForPickerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersForPickerRequestBuilder findUsersForPicker(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new FindUsersForPickerRequestBuilder(query);
    }
    private okhttp3.Call findUsersWithBrowsePermissionCall(String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/viewissue/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (issueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueKey", issueKey));
        }

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersWithBrowsePermissionValidateBeforeCall(String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return findUsersWithBrowsePermissionCall(query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);

    }


    private ApiResponse<List<User>> findUsersWithBrowsePermissionWithHttpInfo(String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = findUsersWithBrowsePermissionValidateBeforeCall(query, username, accountId, issueKey, projectKey, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersWithBrowsePermissionAsync(String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersWithBrowsePermissionValidateBeforeCall(query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersWithBrowsePermissionRequestBuilder {
        private String query;
        private String username;
        private String accountId;
        private String issueKey;
        private String projectKey;
        private Integer startAt;
        private Integer maxResults;

        private FindUsersWithBrowsePermissionRequestBuilder() {
        }

        /**
         * Set query
         * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set issueKey
         * @param issueKey The issue key for the issue. Required, unless &#x60;projectKey&#x60; is specified. (optional)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder issueKey(String issueKey) {
            this.issueKey = issueKey;
            return this;
        }
        
        /**
         * Set projectKey
         * @param projectKey The project key for the project (case sensitive). Required, unless &#x60;issueKey&#x60; is specified. (optional)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder projectKey(String projectKey) {
            this.projectKey = projectKey;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return FindUsersWithBrowsePermissionRequestBuilder
         */
        public FindUsersWithBrowsePermissionRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for findUsersWithBrowsePermission
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersWithBrowsePermissionCall(query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        }


        /**
         * Execute findUsersWithBrowsePermission request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = findUsersWithBrowsePermissionWithHttpInfo(query, username, accountId, issueKey, projectKey, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersWithBrowsePermission request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return findUsersWithBrowsePermissionWithHttpInfo(query, username, accountId, issueKey, projectKey, startAt, maxResults);
        }

        /**
         * Execute findUsersWithBrowsePermission request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return findUsersWithBrowsePermissionAsync(query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        }
    }

    /**
     * Find users with browse permission
     * Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have permission to browse issues.  Use this resource to find users who can browse:   *  an issue, by providing the &#x60;issueKey&#x60;.  *  any issue in a project, by providing the &#x60;projectKey&#x60;.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the search string and have permission to browse issues, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
     * @return FindUsersWithBrowsePermissionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersWithBrowsePermissionRequestBuilder findUsersWithBrowsePermission() throws IllegalArgumentException {
        return new FindUsersWithBrowsePermissionRequestBuilder();
    }
    private okhttp3.Call findUsersWithPermissionsCall(String permissions, String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/user/permission/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (permissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permissions", permissions));
        }

        if (issueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issueKey", issueKey));
        }

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUsersWithPermissionsValidateBeforeCall(String permissions, String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling findUsersWithPermissions(Async)");
        }

        return findUsersWithPermissionsCall(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);

    }


    private ApiResponse<List<User>> findUsersWithPermissionsWithHttpInfo(String permissions, String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = findUsersWithPermissionsValidateBeforeCall(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findUsersWithPermissionsAsync(String permissions, String query, String username, String accountId, String issueKey, String projectKey, Integer startAt, Integer maxResults, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUsersWithPermissionsValidateBeforeCall(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindUsersWithPermissionsRequestBuilder {
        private final String permissions;
        private String query;
        private String username;
        private String accountId;
        private String issueKey;
        private String projectKey;
        private Integer startAt;
        private Integer maxResults;

        private FindUsersWithPermissionsRequestBuilder(String permissions) {
            this.permissions = permissions;
        }

        /**
         * Set query
         * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set username
         * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set accountId
         * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set issueKey
         * @param issueKey The issue key for the issue. (optional)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder issueKey(String issueKey) {
            this.issueKey = issueKey;
            return this;
        }
        
        /**
         * Set projectKey
         * @param projectKey The project key for the project (case sensitive). (optional)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder projectKey(String projectKey) {
            this.projectKey = projectKey;
            return this;
        }
        
        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder startAt(Integer startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return FindUsersWithPermissionsRequestBuilder
         */
        public FindUsersWithPermissionsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for findUsersWithPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findUsersWithPermissionsCall(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        }


        /**
         * Execute findUsersWithPermissions request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = findUsersWithPermissionsWithHttpInfo(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findUsersWithPermissions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return findUsersWithPermissionsWithHttpInfo(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults);
        }

        /**
         * Execute findUsersWithPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return findUsersWithPermissionsAsync(permissions, query, username, accountId, issueKey, projectKey, startAt, maxResults, _callback);
        }
    }

    /**
     * Find users with permissions
     * Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have a set of permissions for a project or issue.  If no search string is provided, a list of all users with the permissions is returned.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the search string and have permission for the project or issue, use [Get all users](https://dac-static.atlassian.com) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
     * @param permissions A comma separated list of permissions. Permissions can be specified as any:   *  permission returned by [Get all permissions](https://dac-static.atlassian.com).  *  custom project permission added by Connect apps.  *  (deprecated) one of the following:           *  ASSIGNABLE\\_USER      *  ASSIGN\\_ISSUE      *  ATTACHMENT\\_DELETE\\_ALL      *  ATTACHMENT\\_DELETE\\_OWN      *  BROWSE      *  CLOSE\\_ISSUE      *  COMMENT\\_DELETE\\_ALL      *  COMMENT\\_DELETE\\_OWN      *  COMMENT\\_EDIT\\_ALL      *  COMMENT\\_EDIT\\_OWN      *  COMMENT\\_ISSUE      *  CREATE\\_ATTACHMENT      *  CREATE\\_ISSUE      *  DELETE\\_ISSUE      *  EDIT\\_ISSUE      *  LINK\\_ISSUE      *  MANAGE\\_WATCHER\\_LIST      *  MODIFY\\_REPORTER      *  MOVE\\_ISSUE      *  PROJECT\\_ADMIN      *  RESOLVE\\_ISSUE      *  SCHEDULE\\_ISSUE      *  SET\\_ISSUE\\_SECURITY      *  TRANSITION\\_ISSUE      *  VIEW\\_VERSION\\_CONTROL      *  VIEW\\_VOTERS\\_AND\\_WATCHERS      *  VIEW\\_WORKFLOW\\_READONLY      *  WORKLOG\\_DELETE\\_ALL      *  WORKLOG\\_DELETE\\_OWN      *  WORKLOG\\_EDIT\\_ALL      *  WORKLOG\\_EDIT\\_OWN      *  WORK\\_ISSUE (required)
     * @return FindUsersWithPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the issue or project is not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. </td><td>  -  </td></tr>
     </table>
     */
    public FindUsersWithPermissionsRequestBuilder findUsersWithPermissions(String permissions) throws IllegalArgumentException {
        if (permissions == null) throw new IllegalArgumentException("\"permissions\" is required but got null");
            

        return new FindUsersWithPermissionsRequestBuilder(permissions);
    }
}
