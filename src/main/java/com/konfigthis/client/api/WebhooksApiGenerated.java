/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContainerForRegisteredWebhooks;
import com.konfigthis.client.model.ContainerForWebhookIDs;
import com.konfigthis.client.model.FailedWebhooks;
import com.konfigthis.client.model.PageBeanWebhook;
import com.konfigthis.client.model.WebhookDetails;
import com.konfigthis.client.model.WebhookRegistrationDetails;
import com.konfigthis.client.model.WebhooksExpirationDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteByIdCall(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerForWebhookIDs;

        // create path and map variables
        String localVarPath = "/rest/api/3/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerForWebhookIDs' is set
        if (containerForWebhookIDs == null) {
            throw new ApiException("Missing the required parameter 'containerForWebhookIDs' when calling deleteById(Async)");
        }

        return deleteByIdCall(containerForWebhookIDs, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(ContainerForWebhookIDs containerForWebhookIDs) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(containerForWebhookIDs, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(containerForWebhookIDs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final List<Long> webhookIds;

        private DeleteByIdRequestBuilder(List<Long> webhookIds) {
            this.webhookIds = webhookIds;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return deleteByIdCall(containerForWebhookIDs, _callback);
        }

        private ContainerForWebhookIDs buildBodyParams() {
            ContainerForWebhookIDs containerForWebhookIDs = new ContainerForWebhookIDs();
            containerForWebhookIDs.webhookIds(this.webhookIds);
            return containerForWebhookIDs;
        }

        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            deleteByIdWithHttpInfo(containerForWebhookIDs);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return deleteByIdWithHttpInfo(containerForWebhookIDs);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return deleteByIdAsync(containerForWebhookIDs, _callback);
        }
    }

    /**
     * Delete webhooks by ID
     * Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param containerForWebhookIDs  (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(List<Long> webhookIds) throws IllegalArgumentException {
        if (webhookIds == null) throw new IllegalArgumentException("\"webhookIds\" is required but got null");
        return new DeleteByIdRequestBuilder(webhookIds);
    }
    private okhttp3.Call extendWebhookLifeCall(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerForWebhookIDs;

        // create path and map variables
        String localVarPath = "/rest/api/3/webhook/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendWebhookLifeValidateBeforeCall(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'containerForWebhookIDs' is set
        if (containerForWebhookIDs == null) {
            throw new ApiException("Missing the required parameter 'containerForWebhookIDs' when calling extendWebhookLife(Async)");
        }

        return extendWebhookLifeCall(containerForWebhookIDs, _callback);

    }


    private ApiResponse<WebhooksExpirationDate> extendWebhookLifeWithHttpInfo(ContainerForWebhookIDs containerForWebhookIDs) throws ApiException {
        okhttp3.Call localVarCall = extendWebhookLifeValidateBeforeCall(containerForWebhookIDs, null);
        Type localVarReturnType = new TypeToken<WebhooksExpirationDate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extendWebhookLifeAsync(ContainerForWebhookIDs containerForWebhookIDs, final ApiCallback<WebhooksExpirationDate> _callback) throws ApiException {

        okhttp3.Call localVarCall = extendWebhookLifeValidateBeforeCall(containerForWebhookIDs, _callback);
        Type localVarReturnType = new TypeToken<WebhooksExpirationDate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtendWebhookLifeRequestBuilder {
        private final List<Long> webhookIds;

        private ExtendWebhookLifeRequestBuilder(List<Long> webhookIds) {
            this.webhookIds = webhookIds;
        }

        /**
         * Build call for extendWebhookLife
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return extendWebhookLifeCall(containerForWebhookIDs, _callback);
        }

        private ContainerForWebhookIDs buildBodyParams() {
            ContainerForWebhookIDs containerForWebhookIDs = new ContainerForWebhookIDs();
            containerForWebhookIDs.webhookIds(this.webhookIds);
            return containerForWebhookIDs;
        }

        /**
         * Execute extendWebhookLife request
         * @return WebhooksExpirationDate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksExpirationDate execute() throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            ApiResponse<WebhooksExpirationDate> localVarResp = extendWebhookLifeWithHttpInfo(containerForWebhookIDs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extendWebhookLife request with HTTP info returned
         * @return ApiResponse&lt;WebhooksExpirationDate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksExpirationDate> executeWithHttpInfo() throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return extendWebhookLifeWithHttpInfo(containerForWebhookIDs);
        }

        /**
         * Execute extendWebhookLife request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksExpirationDate> _callback) throws ApiException {
            ContainerForWebhookIDs containerForWebhookIDs = buildBodyParams();
            return extendWebhookLifeAsync(containerForWebhookIDs, _callback);
        }
    }

    /**
     * Extend webhook life
     * Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.  Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param containerForWebhookIDs  (required)
     * @return ExtendWebhookLifeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendWebhookLifeRequestBuilder extendWebhookLife(List<Long> webhookIds) throws IllegalArgumentException {
        if (webhookIds == null) throw new IllegalArgumentException("\"webhookIds\" is required but got null");
        return new ExtendWebhookLifeRequestBuilder(webhookIds);
    }
    private okhttp3.Call listDynamicWebhooksForAppCall(Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDynamicWebhooksForAppValidateBeforeCall(Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return listDynamicWebhooksForAppCall(startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanWebhook> listDynamicWebhooksForAppWithHttpInfo(Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = listDynamicWebhooksForAppValidateBeforeCall(startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDynamicWebhooksForAppAsync(Long startAt, Integer maxResults, final ApiCallback<PageBeanWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDynamicWebhooksForAppValidateBeforeCall(startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDynamicWebhooksForAppRequestBuilder {
        private Long startAt;
        private Integer maxResults;

        private ListDynamicWebhooksForAppRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return ListDynamicWebhooksForAppRequestBuilder
         */
        public ListDynamicWebhooksForAppRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 100)
         * @return ListDynamicWebhooksForAppRequestBuilder
         */
        public ListDynamicWebhooksForAppRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for listDynamicWebhooksForApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDynamicWebhooksForAppCall(startAt, maxResults, _callback);
        }


        /**
         * Execute listDynamicWebhooksForApp request
         * @return PageBeanWebhook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanWebhook execute() throws ApiException {
            ApiResponse<PageBeanWebhook> localVarResp = listDynamicWebhooksForAppWithHttpInfo(startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDynamicWebhooksForApp request with HTTP info returned
         * @return ApiResponse&lt;PageBeanWebhook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanWebhook> executeWithHttpInfo() throws ApiException {
            return listDynamicWebhooksForAppWithHttpInfo(startAt, maxResults);
        }

        /**
         * Execute listDynamicWebhooksForApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanWebhook> _callback) throws ApiException {
            return listDynamicWebhooksForAppAsync(startAt, maxResults, _callback);
        }
    }

    /**
     * Get dynamic webhooks for app
     * Returns a [paginated](https://dac-static.atlassian.com) list of the webhooks registered by the calling app.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @return ListDynamicWebhooksForAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ListDynamicWebhooksForAppRequestBuilder listDynamicWebhooksForApp() throws IllegalArgumentException {
        return new ListDynamicWebhooksForAppRequestBuilder();
    }
    private okhttp3.Call listFailedWebhooksCall(Integer maxResults, Long after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/webhook/failed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFailedWebhooksValidateBeforeCall(Integer maxResults, Long after, final ApiCallback _callback) throws ApiException {
        return listFailedWebhooksCall(maxResults, after, _callback);

    }


    private ApiResponse<FailedWebhooks> listFailedWebhooksWithHttpInfo(Integer maxResults, Long after) throws ApiException {
        okhttp3.Call localVarCall = listFailedWebhooksValidateBeforeCall(maxResults, after, null);
        Type localVarReturnType = new TypeToken<FailedWebhooks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFailedWebhooksAsync(Integer maxResults, Long after, final ApiCallback<FailedWebhooks> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFailedWebhooksValidateBeforeCall(maxResults, after, _callback);
        Type localVarReturnType = new TypeToken<FailedWebhooks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFailedWebhooksRequestBuilder {
        private Integer maxResults;
        private Long after;

        private ListFailedWebhooksRequestBuilder() {
        }

        /**
         * Set maxResults
         * @param maxResults The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page. (optional)
         * @return ListFailedWebhooksRequestBuilder
         */
        public ListFailedWebhooksRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set after
         * @param after The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch. (optional)
         * @return ListFailedWebhooksRequestBuilder
         */
        public ListFailedWebhooksRequestBuilder after(Long after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for listFailedWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFailedWebhooksCall(maxResults, after, _callback);
        }


        /**
         * Execute listFailedWebhooks request
         * @return FailedWebhooks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public FailedWebhooks execute() throws ApiException {
            ApiResponse<FailedWebhooks> localVarResp = listFailedWebhooksWithHttpInfo(maxResults, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFailedWebhooks request with HTTP info returned
         * @return ApiResponse&lt;FailedWebhooks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FailedWebhooks> executeWithHttpInfo() throws ApiException {
            return listFailedWebhooksWithHttpInfo(maxResults, after);
        }

        /**
         * Execute listFailedWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FailedWebhooks> _callback) throws ApiException {
            return listFailedWebhooksAsync(maxResults, after, _callback);
        }
    }

    /**
     * Get failed webhooks
     * Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.  After 72 hours the failure may no longer be returned by this operation.  The oldest failure is returned first.  This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the &#x60;failedAfter&#x60; value or use the URL provided in &#x60;next&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     * @return ListFailedWebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public ListFailedWebhooksRequestBuilder listFailedWebhooks() throws IllegalArgumentException {
        return new ListFailedWebhooksRequestBuilder();
    }
    private okhttp3.Call registerDynamicWebhooksCall(WebhookRegistrationDetails webhookRegistrationDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookRegistrationDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDynamicWebhooksValidateBeforeCall(WebhookRegistrationDetails webhookRegistrationDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookRegistrationDetails' is set
        if (webhookRegistrationDetails == null) {
            throw new ApiException("Missing the required parameter 'webhookRegistrationDetails' when calling registerDynamicWebhooks(Async)");
        }

        return registerDynamicWebhooksCall(webhookRegistrationDetails, _callback);

    }


    private ApiResponse<ContainerForRegisteredWebhooks> registerDynamicWebhooksWithHttpInfo(WebhookRegistrationDetails webhookRegistrationDetails) throws ApiException {
        okhttp3.Call localVarCall = registerDynamicWebhooksValidateBeforeCall(webhookRegistrationDetails, null);
        Type localVarReturnType = new TypeToken<ContainerForRegisteredWebhooks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerDynamicWebhooksAsync(WebhookRegistrationDetails webhookRegistrationDetails, final ApiCallback<ContainerForRegisteredWebhooks> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDynamicWebhooksValidateBeforeCall(webhookRegistrationDetails, _callback);
        Type localVarReturnType = new TypeToken<ContainerForRegisteredWebhooks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterDynamicWebhooksRequestBuilder {
        private final String url;
        private final List<WebhookDetails> webhooks;

        private RegisterDynamicWebhooksRequestBuilder(String url, List<WebhookDetails> webhooks) {
            this.url = url;
            this.webhooks = webhooks;
        }

        /**
         * Build call for registerDynamicWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhookRegistrationDetails webhookRegistrationDetails = buildBodyParams();
            return registerDynamicWebhooksCall(webhookRegistrationDetails, _callback);
        }

        private WebhookRegistrationDetails buildBodyParams() {
            WebhookRegistrationDetails webhookRegistrationDetails = new WebhookRegistrationDetails();
            webhookRegistrationDetails.url(this.url);
            webhookRegistrationDetails.webhooks(this.webhooks);
            return webhookRegistrationDetails;
        }

        /**
         * Execute registerDynamicWebhooks request
         * @return ContainerForRegisteredWebhooks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ContainerForRegisteredWebhooks execute() throws ApiException {
            WebhookRegistrationDetails webhookRegistrationDetails = buildBodyParams();
            ApiResponse<ContainerForRegisteredWebhooks> localVarResp = registerDynamicWebhooksWithHttpInfo(webhookRegistrationDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerDynamicWebhooks request with HTTP info returned
         * @return ApiResponse&lt;ContainerForRegisteredWebhooks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContainerForRegisteredWebhooks> executeWithHttpInfo() throws ApiException {
            WebhookRegistrationDetails webhookRegistrationDetails = buildBodyParams();
            return registerDynamicWebhooksWithHttpInfo(webhookRegistrationDetails);
        }

        /**
         * Execute registerDynamicWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContainerForRegisteredWebhooks> _callback) throws ApiException {
            WebhookRegistrationDetails webhookRegistrationDetails = buildBodyParams();
            return registerDynamicWebhooksAsync(webhookRegistrationDetails, _callback);
        }
    }

    /**
     * Register dynamic webhooks
     * Registers webhooks.  **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * @param webhookRegistrationDetails  (required)
     * @return RegisterDynamicWebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public RegisterDynamicWebhooksRequestBuilder registerDynamicWebhooks(String url, List<WebhookDetails> webhooks) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (webhooks == null) throw new IllegalArgumentException("\"webhooks\" is required but got null");
        return new RegisterDynamicWebhooksRequestBuilder(url, webhooks);
    }
}
