/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DefaultWorkflow;
import com.konfigthis.client.model.IssueTypeDetails;
import com.konfigthis.client.model.IssueTypeWorkflowMapping;
import com.konfigthis.client.model.IssueTypesWorkflowMapping;
import com.konfigthis.client.model.PublishDraftWorkflowScheme;
import com.konfigthis.client.model.StatusMapping;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.WorkflowScheme;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowSchemeDraftsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowSchemeDraftsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowSchemeDraftsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDraftWorkflowSchemeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/createdraft"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDraftWorkflowSchemeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDraftWorkflowScheme(Async)");
        }

        return createDraftWorkflowSchemeCall(id, _callback);

    }


    private ApiResponse<WorkflowScheme> createDraftWorkflowSchemeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = createDraftWorkflowSchemeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDraftWorkflowSchemeAsync(Long id, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDraftWorkflowSchemeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDraftWorkflowSchemeRequestBuilder {
        private final Long id;

        private CreateDraftWorkflowSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for createDraftWorkflowScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDraftWorkflowSchemeCall(id, _callback);
        }


        /**
         * Execute createDraftWorkflowScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = createDraftWorkflowSchemeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDraftWorkflowScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return createDraftWorkflowSchemeWithHttpInfo(id);
        }

        /**
         * Execute createDraftWorkflowScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return createDraftWorkflowSchemeAsync(id, _callback);
        }
    }

    /**
     * Create draft workflow scheme
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft is created from. (required)
     * @return CreateDraftWorkflowSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDraftWorkflowSchemeRequestBuilder createDraftWorkflowScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new CreateDraftWorkflowSchemeRequestBuilder(id);
    }
    private okhttp3.Call deleteIssueTypeWorkflowMappingCall(Long id, String issueType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssueTypeWorkflowMappingValidateBeforeCall(Long id, String issueType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIssueTypeWorkflowMapping(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling deleteIssueTypeWorkflowMapping(Async)");
        }

        return deleteIssueTypeWorkflowMappingCall(id, issueType, _callback);

    }


    private ApiResponse<WorkflowScheme> deleteIssueTypeWorkflowMappingWithHttpInfo(Long id, String issueType) throws ApiException {
        okhttp3.Call localVarCall = deleteIssueTypeWorkflowMappingValidateBeforeCall(id, issueType, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteIssueTypeWorkflowMappingAsync(Long id, String issueType, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssueTypeWorkflowMappingValidateBeforeCall(id, issueType, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteIssueTypeWorkflowMappingRequestBuilder {
        private final Long id;
        private final String issueType;

        private DeleteIssueTypeWorkflowMappingRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Build call for deleteIssueTypeWorkflowMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIssueTypeWorkflowMappingCall(id, issueType, _callback);
        }


        /**
         * Execute deleteIssueTypeWorkflowMapping request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = deleteIssueTypeWorkflowMappingWithHttpInfo(id, issueType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteIssueTypeWorkflowMapping request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return deleteIssueTypeWorkflowMappingWithHttpInfo(id, issueType);
        }

        /**
         * Execute deleteIssueTypeWorkflowMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return deleteIssueTypeWorkflowMappingAsync(id, issueType, _callback);
        }
    }

    /**
     * Delete workflow for issue type in draft workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @return DeleteIssueTypeWorkflowMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIssueTypeWorkflowMappingRequestBuilder deleteIssueTypeWorkflowMapping(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new DeleteIssueTypeWorkflowMappingRequestBuilder(id, issueType);
    }
    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeCall(Long id, String workflowName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(Long id, String workflowName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIssueTypesForWorkflowInScheme(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling deleteIssueTypesForWorkflowInScheme(Async)");
        }

        return deleteIssueTypesForWorkflowInSchemeCall(id, workflowName, _callback);

    }


    private ApiResponse<Void> deleteIssueTypesForWorkflowInSchemeWithHttpInfo(Long id, String workflowName) throws ApiException {
        okhttp3.Call localVarCall = deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeAsync(Long id, String workflowName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteIssueTypesForWorkflowInSchemeRequestBuilder {
        private final Long id;
        private final String workflowName;

        private DeleteIssueTypesForWorkflowInSchemeRequestBuilder(Long id, String workflowName) {
            this.id = id;
            this.workflowName = workflowName;
        }

        /**
         * Build call for deleteIssueTypesForWorkflowInScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeCall(id, workflowName, _callback);
        }


        /**
         * Execute deleteIssueTypesForWorkflowInScheme request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName);
        }

        /**
         * Execute deleteIssueTypesForWorkflowInScheme request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName);
        }

        /**
         * Execute deleteIssueTypesForWorkflowInScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeAsync(id, workflowName, _callback);
        }
    }

    /**
     * Delete issue types for workflow in draft workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param workflowName The name of the workflow. (required)
     * @return DeleteIssueTypesForWorkflowInSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIssueTypesForWorkflowInSchemeRequestBuilder deleteIssueTypesForWorkflowInScheme(Long id, String workflowName) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new DeleteIssueTypesForWorkflowInSchemeRequestBuilder(id, workflowName);
    }
    private okhttp3.Call deleteSchemeDraftCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeDraftValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSchemeDraft(Async)");
        }

        return deleteSchemeDraftCall(id, _callback);

    }


    private ApiResponse<Void> deleteSchemeDraftWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeDraftValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSchemeDraftAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeDraftValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSchemeDraftRequestBuilder {
        private final Long id;

        private DeleteSchemeDraftRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteSchemeDraft
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeDraftCall(id, _callback);
        }


        /**
         * Execute deleteSchemeDraft request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSchemeDraftWithHttpInfo(id);
        }

        /**
         * Execute deleteSchemeDraft request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSchemeDraftWithHttpInfo(id);
        }

        /**
         * Execute deleteSchemeDraft request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSchemeDraftAsync(id, _callback);
        }
    }

    /**
     * Delete draft workflow scheme
     * Deletes a draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @return DeleteSchemeDraftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeDraftRequestBuilder deleteSchemeDraft(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteSchemeDraftRequestBuilder(id);
    }
    private okhttp3.Call getDefaultWorkflowCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultWorkflowValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDefaultWorkflow(Async)");
        }

        return getDefaultWorkflowCall(id, _callback);

    }


    private ApiResponse<DefaultWorkflow> getDefaultWorkflowWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getDefaultWorkflowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DefaultWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultWorkflowAsync(Long id, final ApiCallback<DefaultWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultWorkflowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DefaultWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultWorkflowRequestBuilder {
        private final Long id;

        private GetDefaultWorkflowRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getDefaultWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultWorkflowCall(id, _callback);
        }


        /**
         * Execute getDefaultWorkflow request
         * @return DefaultWorkflow
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public DefaultWorkflow execute() throws ApiException {
            ApiResponse<DefaultWorkflow> localVarResp = getDefaultWorkflowWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultWorkflow request with HTTP info returned
         * @return ApiResponse&lt;DefaultWorkflow&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DefaultWorkflow> executeWithHttpInfo() throws ApiException {
            return getDefaultWorkflowWithHttpInfo(id);
        }

        /**
         * Execute getDefaultWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DefaultWorkflow> _callback) throws ApiException {
            return getDefaultWorkflowAsync(id, _callback);
        }
    }

    /**
     * Get draft default workflow
     * Returns the default workflow for a workflow scheme&#39;s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @return GetDefaultWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission.. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultWorkflowRequestBuilder getDefaultWorkflow(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDefaultWorkflowRequestBuilder(id);
    }
    private okhttp3.Call getDraftWorkflowSchemeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftWorkflowSchemeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDraftWorkflowScheme(Async)");
        }

        return getDraftWorkflowSchemeCall(id, _callback);

    }


    private ApiResponse<WorkflowScheme> getDraftWorkflowSchemeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getDraftWorkflowSchemeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDraftWorkflowSchemeAsync(Long id, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftWorkflowSchemeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDraftWorkflowSchemeRequestBuilder {
        private final Long id;

        private GetDraftWorkflowSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for getDraftWorkflowScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDraftWorkflowSchemeCall(id, _callback);
        }


        /**
         * Execute getDraftWorkflowScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = getDraftWorkflowSchemeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDraftWorkflowScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return getDraftWorkflowSchemeWithHttpInfo(id);
        }

        /**
         * Execute getDraftWorkflowScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return getDraftWorkflowSchemeAsync(id, _callback);
        }
    }

    /**
     * Get draft workflow scheme
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @return GetDraftWorkflowSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public GetDraftWorkflowSchemeRequestBuilder getDraftWorkflowScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDraftWorkflowSchemeRequestBuilder(id);
    }
    private okhttp3.Call getIssueTypeMappingsForWorkflowInSchemeDraftCall(Long id, String workflowName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeMappingsForWorkflowInSchemeDraftValidateBeforeCall(Long id, String workflowName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIssueTypeMappingsForWorkflowInSchemeDraft(Async)");
        }

        return getIssueTypeMappingsForWorkflowInSchemeDraftCall(id, workflowName, _callback);

    }


    private ApiResponse<IssueTypesWorkflowMapping> getIssueTypeMappingsForWorkflowInSchemeDraftWithHttpInfo(Long id, String workflowName) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeMappingsForWorkflowInSchemeDraftValidateBeforeCall(id, workflowName, null);
        Type localVarReturnType = new TypeToken<IssueTypesWorkflowMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeMappingsForWorkflowInSchemeDraftAsync(Long id, String workflowName, final ApiCallback<IssueTypesWorkflowMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeMappingsForWorkflowInSchemeDraftValidateBeforeCall(id, workflowName, _callback);
        Type localVarReturnType = new TypeToken<IssueTypesWorkflowMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder {
        private final Long id;
        private String workflowName;

        private GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set workflowName
         * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional)
         * @return GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder
         */
        public GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder workflowName(String workflowName) {
            this.workflowName = workflowName;
            return this;
        }
        
        /**
         * Build call for getIssueTypeMappingsForWorkflowInSchemeDraft
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow (if specified) is not found. session. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeMappingsForWorkflowInSchemeDraftCall(id, workflowName, _callback);
        }


        /**
         * Execute getIssueTypeMappingsForWorkflowInSchemeDraft request
         * @return IssueTypesWorkflowMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow (if specified) is not found. session. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypesWorkflowMapping execute() throws ApiException {
            ApiResponse<IssueTypesWorkflowMapping> localVarResp = getIssueTypeMappingsForWorkflowInSchemeDraftWithHttpInfo(id, workflowName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeMappingsForWorkflowInSchemeDraft request with HTTP info returned
         * @return ApiResponse&lt;IssueTypesWorkflowMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow (if specified) is not found. session. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypesWorkflowMapping> executeWithHttpInfo() throws ApiException {
            return getIssueTypeMappingsForWorkflowInSchemeDraftWithHttpInfo(id, workflowName);
        }

        /**
         * Execute getIssueTypeMappingsForWorkflowInSchemeDraft request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow (if specified) is not found. session. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypesWorkflowMapping> _callback) throws ApiException {
            return getIssueTypeMappingsForWorkflowInSchemeDraftAsync(id, workflowName, _callback);
        }
    }

    /**
     * Get issue types for workflows in draft workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @return GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow (if specified) is not found. session. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder getIssueTypeMappingsForWorkflowInSchemeDraft(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetIssueTypeMappingsForWorkflowInSchemeDraftRequestBuilder(id);
    }
    private okhttp3.Call getIssueTypeWorkflowCall(Long id, String issueType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeWorkflowValidateBeforeCall(Long id, String issueType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling getIssueTypeWorkflow(Async)");
        }

        return getIssueTypeWorkflowCall(id, issueType, _callback);

    }


    private ApiResponse<IssueTypeWorkflowMapping> getIssueTypeWorkflowWithHttpInfo(Long id, String issueType) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeWorkflowValidateBeforeCall(id, issueType, null);
        Type localVarReturnType = new TypeToken<IssueTypeWorkflowMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeWorkflowAsync(Long id, String issueType, final ApiCallback<IssueTypeWorkflowMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeWorkflowValidateBeforeCall(id, issueType, _callback);
        Type localVarReturnType = new TypeToken<IssueTypeWorkflowMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeWorkflowRequestBuilder {
        private final Long id;
        private final String issueType;

        private GetIssueTypeWorkflowRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Build call for getIssueTypeWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeWorkflowCall(id, issueType, _callback);
        }


        /**
         * Execute getIssueTypeWorkflow request
         * @return IssueTypeWorkflowMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypeWorkflowMapping execute() throws ApiException {
            ApiResponse<IssueTypeWorkflowMapping> localVarResp = getIssueTypeWorkflowWithHttpInfo(id, issueType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeWorkflow request with HTTP info returned
         * @return ApiResponse&lt;IssueTypeWorkflowMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypeWorkflowMapping> executeWithHttpInfo() throws ApiException {
            return getIssueTypeWorkflowWithHttpInfo(id, issueType);
        }

        /**
         * Execute getIssueTypeWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypeWorkflowMapping> _callback) throws ApiException {
            return getIssueTypeWorkflowAsync(id, issueType, _callback);
        }
    }

    /**
     * Get workflow for issue type in draft workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @return GetIssueTypeWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeWorkflowRequestBuilder getIssueTypeWorkflow(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new GetIssueTypeWorkflowRequestBuilder(id, issueType);
    }
    private okhttp3.Call publishDraftWorkflowSchemeCall(Long id, PublishDraftWorkflowScheme publishDraftWorkflowScheme, Boolean validateOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishDraftWorkflowScheme;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/publish"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validateOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateOnly", validateOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishDraftWorkflowSchemeValidateBeforeCall(Long id, PublishDraftWorkflowScheme publishDraftWorkflowScheme, Boolean validateOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling publishDraftWorkflowScheme(Async)");
        }

        // verify the required parameter 'publishDraftWorkflowScheme' is set
        if (publishDraftWorkflowScheme == null) {
            throw new ApiException("Missing the required parameter 'publishDraftWorkflowScheme' when calling publishDraftWorkflowScheme(Async)");
        }

        return publishDraftWorkflowSchemeCall(id, publishDraftWorkflowScheme, validateOnly, _callback);

    }


    private ApiResponse<Void> publishDraftWorkflowSchemeWithHttpInfo(Long id, PublishDraftWorkflowScheme publishDraftWorkflowScheme, Boolean validateOnly) throws ApiException {
        okhttp3.Call localVarCall = publishDraftWorkflowSchemeValidateBeforeCall(id, publishDraftWorkflowScheme, validateOnly, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call publishDraftWorkflowSchemeAsync(Long id, PublishDraftWorkflowScheme publishDraftWorkflowScheme, Boolean validateOnly, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishDraftWorkflowSchemeValidateBeforeCall(id, publishDraftWorkflowScheme, validateOnly, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PublishDraftWorkflowSchemeRequestBuilder {
        private final Long id;
        private Set<StatusMapping> statusMappings;
        private Boolean validateOnly;

        private PublishDraftWorkflowSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set statusMappings
         * @param statusMappings Mappings of statuses to new statuses for issue types. (optional)
         * @return PublishDraftWorkflowSchemeRequestBuilder
         */
        public PublishDraftWorkflowSchemeRequestBuilder statusMappings(Set<StatusMapping> statusMappings) {
            this.statusMappings = statusMappings;
            return this;
        }
        
        /**
         * Set validateOnly
         * @param validateOnly Whether the request only performs a validation. (optional, default to false)
         * @return PublishDraftWorkflowSchemeRequestBuilder
         */
        public PublishDraftWorkflowSchemeRequestBuilder validateOnly(Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
        }
        
        /**
         * Build call for publishDraftWorkflowScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is only for validation and is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PublishDraftWorkflowScheme publishDraftWorkflowScheme = buildBodyParams();
            return publishDraftWorkflowSchemeCall(id, publishDraftWorkflowScheme, validateOnly, _callback);
        }

        private PublishDraftWorkflowScheme buildBodyParams() {
            PublishDraftWorkflowScheme publishDraftWorkflowScheme = new PublishDraftWorkflowScheme();
            publishDraftWorkflowScheme.statusMappings(this.statusMappings);
            return publishDraftWorkflowScheme;
        }

        /**
         * Execute publishDraftWorkflowScheme request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is only for validation and is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PublishDraftWorkflowScheme publishDraftWorkflowScheme = buildBodyParams();
            publishDraftWorkflowSchemeWithHttpInfo(id, publishDraftWorkflowScheme, validateOnly);
        }

        /**
         * Execute publishDraftWorkflowScheme request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is only for validation and is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PublishDraftWorkflowScheme publishDraftWorkflowScheme = buildBodyParams();
            return publishDraftWorkflowSchemeWithHttpInfo(id, publishDraftWorkflowScheme, validateOnly);
        }

        /**
         * Execute publishDraftWorkflowScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is only for validation and is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PublishDraftWorkflowScheme publishDraftWorkflowScheme = buildBodyParams();
            return publishDraftWorkflowSchemeAsync(id, publishDraftWorkflowScheme, validateOnly, _callback);
        }
    }

    /**
     * Publish draft workflow scheme
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param publishDraftWorkflowScheme Details of the status mappings. (required)
     * @return PublishDraftWorkflowSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is only for validation and is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public PublishDraftWorkflowSchemeRequestBuilder publishDraftWorkflowScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new PublishDraftWorkflowSchemeRequestBuilder(id);
    }
    private okhttp3.Call resetDefaultWorkflowCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDefaultWorkflowValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetDefaultWorkflow(Async)");
        }

        return resetDefaultWorkflowCall(id, _callback);

    }


    private ApiResponse<WorkflowScheme> resetDefaultWorkflowWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resetDefaultWorkflowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetDefaultWorkflowAsync(Long id, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDefaultWorkflowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetDefaultWorkflowRequestBuilder {
        private final Long id;

        private ResetDefaultWorkflowRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for resetDefaultWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetDefaultWorkflowCall(id, _callback);
        }


        /**
         * Execute resetDefaultWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = resetDefaultWorkflowWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetDefaultWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return resetDefaultWorkflowWithHttpInfo(id);
        }

        /**
         * Execute resetDefaultWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return resetDefaultWorkflowAsync(id, _callback);
        }
    }

    /**
     * Delete draft default workflow
     * Resets the default workflow for a workflow scheme&#39;s draft. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @return ResetDefaultWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public ResetDefaultWorkflowRequestBuilder resetDefaultWorkflow(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ResetDefaultWorkflowRequestBuilder(id);
    }
    private okhttp3.Call setIssueTypeWorkflowCall(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeWorkflowMapping;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIssueTypeWorkflowValidateBeforeCall(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling setIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueTypeWorkflowMapping' is set
        if (issueTypeWorkflowMapping == null) {
            throw new ApiException("Missing the required parameter 'issueTypeWorkflowMapping' when calling setIssueTypeWorkflow(Async)");
        }

        return setIssueTypeWorkflowCall(id, issueType, issueTypeWorkflowMapping, _callback);

    }


    private ApiResponse<WorkflowScheme> setIssueTypeWorkflowWithHttpInfo(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping) throws ApiException {
        okhttp3.Call localVarCall = setIssueTypeWorkflowValidateBeforeCall(id, issueType, issueTypeWorkflowMapping, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIssueTypeWorkflowAsync(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIssueTypeWorkflowValidateBeforeCall(id, issueType, issueTypeWorkflowMapping, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIssueTypeWorkflowRequestBuilder {
        private final Long id;
        private final String issueType;
        private String issueType;
        private Boolean updateDraftIfNeeded;
        private String workflow;

        private SetIssueTypeWorkflowRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Set issueType
         * @param issueType The ID of the issue type. Not required if updating the issue type-workflow mapping. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder issueType(String issueType) {
            this.issueType = issueType;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. Only applicable when updating the workflow-issue types mapping. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Set workflow
         * @param workflow The name of the workflow. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder workflow(String workflow) {
            this.workflow = workflow;
            return this;
        }
        
        /**
         * Build call for setIssueTypeWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowCall(id, issueType, issueTypeWorkflowMapping, _callback);
        }

        private IssueTypeWorkflowMapping buildBodyParams() {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = new IssueTypeWorkflowMapping();
            issueTypeWorkflowMapping.issueType(this.issueType);
            issueTypeWorkflowMapping.updateDraftIfNeeded(this.updateDraftIfNeeded);
            issueTypeWorkflowMapping.workflow(this.workflow);
            return issueTypeWorkflowMapping;
        }

        /**
         * Execute setIssueTypeWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = setIssueTypeWorkflowWithHttpInfo(id, issueType, issueTypeWorkflowMapping);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIssueTypeWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowWithHttpInfo(id, issueType, issueTypeWorkflowMapping);
        }

        /**
         * Execute setIssueTypeWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowAsync(id, issueType, issueTypeWorkflowMapping, _callback);
        }
    }

    /**
     * Set workflow for issue type in draft workflow scheme
     * Sets the workflow for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @param issueTypeWorkflowMapping The issue type-project mapping. (required)
     * @return SetIssueTypeWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SetIssueTypeWorkflowRequestBuilder setIssueTypeWorkflow(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new SetIssueTypeWorkflowRequestBuilder(id, issueType);
    }
    private okhttp3.Call setIssueTypesForWorkflowCall(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypesWorkflowMapping;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIssueTypesForWorkflowValidateBeforeCall(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setIssueTypesForWorkflow(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling setIssueTypesForWorkflow(Async)");
        }

        // verify the required parameter 'issueTypesWorkflowMapping' is set
        if (issueTypesWorkflowMapping == null) {
            throw new ApiException("Missing the required parameter 'issueTypesWorkflowMapping' when calling setIssueTypesForWorkflow(Async)");
        }

        return setIssueTypesForWorkflowCall(id, workflowName, issueTypesWorkflowMapping, _callback);

    }


    private ApiResponse<WorkflowScheme> setIssueTypesForWorkflowWithHttpInfo(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping) throws ApiException {
        okhttp3.Call localVarCall = setIssueTypesForWorkflowValidateBeforeCall(id, workflowName, issueTypesWorkflowMapping, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIssueTypesForWorkflowAsync(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIssueTypesForWorkflowValidateBeforeCall(id, workflowName, issueTypesWorkflowMapping, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIssueTypesForWorkflowRequestBuilder {
        private final Long id;
        private final String workflowName;
        private Boolean defaultMapping;
        private List<String> issueTypes;
        private Boolean updateDraftIfNeeded;
        private String workflow;

        private SetIssueTypesForWorkflowRequestBuilder(Long id, String workflowName) {
            this.id = id;
            this.workflowName = workflowName;
        }

        /**
         * Set defaultMapping
         * @param defaultMapping Whether the workflow is the default workflow for the workflow scheme. (optional)
         * @return SetIssueTypesForWorkflowRequestBuilder
         */
        public SetIssueTypesForWorkflowRequestBuilder defaultMapping(Boolean defaultMapping) {
            this.defaultMapping = defaultMapping;
            return this;
        }
        
        /**
         * Set issueTypes
         * @param issueTypes The list of issue type IDs. (optional)
         * @return SetIssueTypesForWorkflowRequestBuilder
         */
        public SetIssueTypesForWorkflowRequestBuilder issueTypes(List<String> issueTypes) {
            this.issueTypes = issueTypes;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to &#x60;false&#x60;. (optional)
         * @return SetIssueTypesForWorkflowRequestBuilder
         */
        public SetIssueTypesForWorkflowRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Set workflow
         * @param workflow The name of the workflow. Optional if updating the workflow-issue types mapping. (optional)
         * @return SetIssueTypesForWorkflowRequestBuilder
         */
        public SetIssueTypesForWorkflowRequestBuilder workflow(String workflow) {
            this.workflow = workflow;
            return this;
        }
        
        /**
         * Build call for setIssueTypesForWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowCall(id, workflowName, issueTypesWorkflowMapping, _callback);
        }

        private IssueTypesWorkflowMapping buildBodyParams() {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = new IssueTypesWorkflowMapping();
            issueTypesWorkflowMapping.defaultMapping(this.defaultMapping);
            issueTypesWorkflowMapping.issueTypes(this.issueTypes);
            issueTypesWorkflowMapping.updateDraftIfNeeded(this.updateDraftIfNeeded);
            issueTypesWorkflowMapping.workflow(this.workflow);
            return issueTypesWorkflowMapping;
        }

        /**
         * Execute setIssueTypesForWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = setIssueTypesForWorkflowWithHttpInfo(id, workflowName, issueTypesWorkflowMapping);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIssueTypesForWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowWithHttpInfo(id, workflowName, issueTypesWorkflowMapping);
        }

        /**
         * Execute setIssueTypesForWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowAsync(id, workflowName, issueTypesWorkflowMapping, _callback);
        }
    }

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme&#39;s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param workflowName The name of the workflow. (required)
     * @param issueTypesWorkflowMapping  (required)
     * @return SetIssueTypesForWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
     </table>
     */
    public SetIssueTypesForWorkflowRequestBuilder setIssueTypesForWorkflow(Long id, String workflowName) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new SetIssueTypesForWorkflowRequestBuilder(id, workflowName);
    }
    private okhttp3.Call updateDefaultWorkflowSchemeCall(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultWorkflow;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultWorkflowSchemeValidateBeforeCall(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDefaultWorkflowScheme(Async)");
        }

        // verify the required parameter 'defaultWorkflow' is set
        if (defaultWorkflow == null) {
            throw new ApiException("Missing the required parameter 'defaultWorkflow' when calling updateDefaultWorkflowScheme(Async)");
        }

        return updateDefaultWorkflowSchemeCall(id, defaultWorkflow, _callback);

    }


    private ApiResponse<WorkflowScheme> updateDefaultWorkflowSchemeWithHttpInfo(Long id, DefaultWorkflow defaultWorkflow) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultWorkflowSchemeValidateBeforeCall(id, defaultWorkflow, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefaultWorkflowSchemeAsync(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultWorkflowSchemeValidateBeforeCall(id, defaultWorkflow, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefaultWorkflowSchemeRequestBuilder {
        private final String workflow;
        private final Long id;
        private Boolean updateDraftIfNeeded;

        private UpdateDefaultWorkflowSchemeRequestBuilder(String workflow, Long id) {
            this.workflow = workflow;
            this.id = id;
        }

        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to &#x60;false&#x60;. (optional)
         * @return UpdateDefaultWorkflowSchemeRequestBuilder
         */
        public UpdateDefaultWorkflowSchemeRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for updateDefaultWorkflowScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowSchemeCall(id, defaultWorkflow, _callback);
        }

        private DefaultWorkflow buildBodyParams() {
            DefaultWorkflow defaultWorkflow = new DefaultWorkflow();
            defaultWorkflow.updateDraftIfNeeded(this.updateDraftIfNeeded);
            defaultWorkflow.workflow(this.workflow);
            return defaultWorkflow;
        }

        /**
         * Execute updateDefaultWorkflowScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = updateDefaultWorkflowSchemeWithHttpInfo(id, defaultWorkflow);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefaultWorkflowScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowSchemeWithHttpInfo(id, defaultWorkflow);
        }

        /**
         * Execute updateDefaultWorkflowScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowSchemeAsync(id, defaultWorkflow, _callback);
        }
    }

    /**
     * Update draft default workflow
     * Sets the default workflow for a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param defaultWorkflow The object for the new default workflow. (required)
     * @return UpdateDefaultWorkflowSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefaultWorkflowSchemeRequestBuilder updateDefaultWorkflowScheme(String workflow, Long id) throws IllegalArgumentException {
        if (workflow == null) throw new IllegalArgumentException("\"workflow\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateDefaultWorkflowSchemeRequestBuilder(workflow, id);
    }
    private okhttp3.Call updateDraftWorkflowSchemeCall(Long id, WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowScheme;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/draft"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDraftWorkflowSchemeValidateBeforeCall(Long id, WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDraftWorkflowScheme(Async)");
        }

        // verify the required parameter 'workflowScheme' is set
        if (workflowScheme == null) {
            throw new ApiException("Missing the required parameter 'workflowScheme' when calling updateDraftWorkflowScheme(Async)");
        }

        return updateDraftWorkflowSchemeCall(id, workflowScheme, _callback);

    }


    private ApiResponse<WorkflowScheme> updateDraftWorkflowSchemeWithHttpInfo(Long id, WorkflowScheme workflowScheme) throws ApiException {
        okhttp3.Call localVarCall = updateDraftWorkflowSchemeValidateBeforeCall(id, workflowScheme, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDraftWorkflowSchemeAsync(Long id, WorkflowScheme workflowScheme, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDraftWorkflowSchemeValidateBeforeCall(id, workflowScheme, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDraftWorkflowSchemeRequestBuilder {
        private final Long id;
        private String description;
        private String defaultWorkflow;
        private Boolean draft;
        private Long id;
        private Map<String, String> issueTypeMappings;
        private Map<String, IssueTypeDetails> issueTypes;
        private String lastModified;
        private User lastModifiedUser;
        private String name;
        private String originalDefaultWorkflow;
        private Map<String, String> originalIssueTypeMappings;
        private URI self;
        private Boolean updateDraftIfNeeded;

        private UpdateDraftWorkflowSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the workflow scheme. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultWorkflow
         * @param defaultWorkflow The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder defaultWorkflow(String defaultWorkflow) {
            this.defaultWorkflow = defaultWorkflow;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether the workflow scheme is a draft or not. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the workflow scheme. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issueTypeMappings
         * @param issueTypeMappings The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder issueTypeMappings(Map<String, String> issueTypeMappings) {
            this.issueTypeMappings = issueTypeMappings;
            return this;
        }
        
        /**
         * Set issueTypes
         * @param issueTypes The issue types available in Jira. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder issueTypes(Map<String, IssueTypeDetails> issueTypes) {
            this.issueTypes = issueTypes;
            return this;
        }
        
        /**
         * Set lastModified
         * @param lastModified The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder lastModified(String lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set lastModifiedUser
         * @param lastModifiedUser The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder lastModifiedUser(User lastModifiedUser) {
            this.lastModifiedUser = lastModifiedUser;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set originalDefaultWorkflow
         * @param originalDefaultWorkflow For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder originalDefaultWorkflow(String originalDefaultWorkflow) {
            this.originalDefaultWorkflow = originalDefaultWorkflow;
            return this;
        }
        
        /**
         * Set originalIssueTypeMappings
         * @param originalIssueTypeMappings For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder originalIssueTypeMappings(Map<String, String> originalIssueTypeMappings) {
            this.originalIssueTypeMappings = originalIssueTypeMappings;
            return this;
        }
        
        /**
         * Set self
         * @param self  (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;. (optional)
         * @return UpdateDraftWorkflowSchemeRequestBuilder
         */
        public UpdateDraftWorkflowSchemeRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for updateDraftWorkflowScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateDraftWorkflowSchemeCall(id, workflowScheme, _callback);
        }

        private WorkflowScheme buildBodyParams() {
            WorkflowScheme workflowScheme = new WorkflowScheme();
            workflowScheme.description(this.description);
            workflowScheme.defaultWorkflow(this.defaultWorkflow);
            workflowScheme.draft(this.draft);
            workflowScheme.id(this.id);
            workflowScheme.issueTypeMappings(this.issueTypeMappings);
            workflowScheme.issueTypes(this.issueTypes);
            workflowScheme.lastModified(this.lastModified);
            workflowScheme.lastModifiedUser(this.lastModifiedUser);
            workflowScheme.name(this.name);
            workflowScheme.originalDefaultWorkflow(this.originalDefaultWorkflow);
            workflowScheme.originalIssueTypeMappings(this.originalIssueTypeMappings);
            workflowScheme.self(this.self);
            workflowScheme.updateDraftIfNeeded(this.updateDraftIfNeeded);
            return workflowScheme;
        }

        /**
         * Execute updateDraftWorkflowScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = updateDraftWorkflowSchemeWithHttpInfo(id, workflowScheme);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDraftWorkflowScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateDraftWorkflowSchemeWithHttpInfo(id, workflowScheme);
        }

        /**
         * Execute updateDraftWorkflowScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateDraftWorkflowSchemeAsync(id, workflowScheme, _callback);
        }
    }

    /**
     * Update draft workflow scheme
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @param workflowScheme  (required)
     * @return UpdateDraftWorkflowSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDraftWorkflowSchemeRequestBuilder updateDraftWorkflowScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateDraftWorkflowSchemeRequestBuilder(id);
    }
}
