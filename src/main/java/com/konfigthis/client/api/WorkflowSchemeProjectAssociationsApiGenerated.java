/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContainerOfWorkflowSchemeAssociations;
import java.util.Set;
import com.konfigthis.client.model.WorkflowSchemeProjectAssociation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowSchemeProjectAssociationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowSchemeProjectAssociationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowSchemeProjectAssociationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignToProjectCall(WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowSchemeProjectAssociation;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignToProjectValidateBeforeCall(WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowSchemeProjectAssociation' is set
        if (workflowSchemeProjectAssociation == null) {
            throw new ApiException("Missing the required parameter 'workflowSchemeProjectAssociation' when calling assignToProject(Async)");
        }

        return assignToProjectCall(workflowSchemeProjectAssociation, _callback);

    }


    private ApiResponse<Object> assignToProjectWithHttpInfo(WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation) throws ApiException {
        okhttp3.Call localVarCall = assignToProjectValidateBeforeCall(workflowSchemeProjectAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignToProjectAsync(WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignToProjectValidateBeforeCall(workflowSchemeProjectAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignToProjectRequestBuilder {
        private final String projectId;
        private String workflowSchemeId;

        private AssignToProjectRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set workflowSchemeId
         * @param workflowSchemeId The ID of the workflow scheme. If the workflow scheme ID is &#x60;null&#x60;, the operation assigns the default workflow scheme. (optional)
         * @return AssignToProjectRequestBuilder
         */
        public AssignToProjectRequestBuilder workflowSchemeId(String workflowSchemeId) {
            this.workflowSchemeId = workflowSchemeId;
            return this;
        }
        
        /**
         * Build call for assignToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation = buildBodyParams();
            return assignToProjectCall(workflowSchemeProjectAssociation, _callback);
        }

        private WorkflowSchemeProjectAssociation buildBodyParams() {
            WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation = new WorkflowSchemeProjectAssociation();
            workflowSchemeProjectAssociation.projectId(this.projectId);
            workflowSchemeProjectAssociation.workflowSchemeId(this.workflowSchemeId);
            return workflowSchemeProjectAssociation;
        }

        /**
         * Execute assignToProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation = buildBodyParams();
            ApiResponse<Object> localVarResp = assignToProjectWithHttpInfo(workflowSchemeProjectAssociation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignToProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation = buildBodyParams();
            return assignToProjectWithHttpInfo(workflowSchemeProjectAssociation);
        }

        /**
         * Execute assignToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation = buildBodyParams();
            return assignToProjectAsync(workflowSchemeProjectAssociation, _callback);
        }
    }

    /**
     * Assign workflow scheme to project
     * Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.  Workflow schemes can only be assigned to classic projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param workflowSchemeProjectAssociation  (required)
     * @return AssignToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public AssignToProjectRequestBuilder assignToProject(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new AssignToProjectRequestBuilder(projectId);
    }
    private okhttp3.Call listProjectAssociationsCall(Set<Long> projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectAssociationsValidateBeforeCall(Set<Long> projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listProjectAssociations(Async)");
        }

        return listProjectAssociationsCall(projectId, _callback);

    }


    private ApiResponse<ContainerOfWorkflowSchemeAssociations> listProjectAssociationsWithHttpInfo(Set<Long> projectId) throws ApiException {
        okhttp3.Call localVarCall = listProjectAssociationsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ContainerOfWorkflowSchemeAssociations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProjectAssociationsAsync(Set<Long> projectId, final ApiCallback<ContainerOfWorkflowSchemeAssociations> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectAssociationsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ContainerOfWorkflowSchemeAssociations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProjectAssociationsRequestBuilder {
        private final Set<Long> projectId;

        private ListProjectAssociationsRequestBuilder(Set<Long> projectId) {
            this.projectId = projectId;
        }

        /**
         * Build call for listProjectAssociations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProjectAssociationsCall(projectId, _callback);
        }


        /**
         * Execute listProjectAssociations request
         * @return ContainerOfWorkflowSchemeAssociations
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ContainerOfWorkflowSchemeAssociations execute() throws ApiException {
            ApiResponse<ContainerOfWorkflowSchemeAssociations> localVarResp = listProjectAssociationsWithHttpInfo(projectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProjectAssociations request with HTTP info returned
         * @return ApiResponse&lt;ContainerOfWorkflowSchemeAssociations&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContainerOfWorkflowSchemeAssociations> executeWithHttpInfo() throws ApiException {
            return listProjectAssociationsWithHttpInfo(projectId);
        }

        /**
         * Execute listProjectAssociations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContainerOfWorkflowSchemeAssociations> _callback) throws ApiException {
            return listProjectAssociationsAsync(projectId, _callback);
        }
    }

    /**
     * Get workflow scheme project associations
     * Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.  If the project is associated with the &#x60;Default Workflow Scheme&#x60; no ID is returned. This is because the way the &#x60;Default Workflow Scheme&#x60; is stored means it has no ID.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectId The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @return ListProjectAssociationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectAssociationsRequestBuilder listProjectAssociations(Set<Long> projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
        return new ListProjectAssociationsRequestBuilder(projectId);
    }
}
