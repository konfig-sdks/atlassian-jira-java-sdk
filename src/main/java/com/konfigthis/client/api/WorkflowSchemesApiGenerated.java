/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DefaultWorkflow;
import com.konfigthis.client.model.DocumentVersion;
import com.konfigthis.client.model.IssueTypeDetails;
import com.konfigthis.client.model.IssueTypeWorkflowMapping;
import com.konfigthis.client.model.IssueTypesWorkflowMapping;
import com.konfigthis.client.model.MappingsByIssueTypeOverride;
import com.konfigthis.client.model.MappingsByWorkflow;
import com.konfigthis.client.model.PageBeanWorkflowScheme;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.WorkflowScheme;
import com.konfigthis.client.model.WorkflowSchemeAssociation;
import com.konfigthis.client.model.WorkflowSchemeReadRequest;
import com.konfigthis.client.model.WorkflowSchemeReadResponse;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequest;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequiredMappingsRequest;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequiredMappingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowSchemesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowSchemesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowSchemesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkGetWorkflowSchemesCall(WorkflowSchemeReadRequest workflowSchemeReadRequest, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowSchemeReadRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkGetWorkflowSchemesValidateBeforeCall(WorkflowSchemeReadRequest workflowSchemeReadRequest, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowSchemeReadRequest' is set
        if (workflowSchemeReadRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowSchemeReadRequest' when calling bulkGetWorkflowSchemes(Async)");
        }

        return bulkGetWorkflowSchemesCall(workflowSchemeReadRequest, expand, _callback);

    }


    private ApiResponse<List<WorkflowSchemeReadResponse>> bulkGetWorkflowSchemesWithHttpInfo(WorkflowSchemeReadRequest workflowSchemeReadRequest, String expand) throws ApiException {
        okhttp3.Call localVarCall = bulkGetWorkflowSchemesValidateBeforeCall(workflowSchemeReadRequest, expand, null);
        Type localVarReturnType = new TypeToken<List<WorkflowSchemeReadResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkGetWorkflowSchemesAsync(WorkflowSchemeReadRequest workflowSchemeReadRequest, String expand, final ApiCallback<List<WorkflowSchemeReadResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkGetWorkflowSchemesValidateBeforeCall(workflowSchemeReadRequest, expand, _callback);
        Type localVarReturnType = new TypeToken<List<WorkflowSchemeReadResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkGetWorkflowSchemesRequestBuilder {
        private List<String> projectIds;
        private List<String> workflowSchemeIds;
        private String expand;

        private BulkGetWorkflowSchemesRequestBuilder() {
        }

        /**
         * Set projectIds
         * @param projectIds The list of project IDs to query. (optional)
         * @return BulkGetWorkflowSchemesRequestBuilder
         */
        public BulkGetWorkflowSchemesRequestBuilder projectIds(List<String> projectIds) {
            this.projectIds = projectIds;
            return this;
        }
        
        /**
         * Set workflowSchemeIds
         * @param workflowSchemeIds The list of workflow scheme IDs to query. (optional)
         * @return BulkGetWorkflowSchemesRequestBuilder
         */
        public BulkGetWorkflowSchemesRequestBuilder workflowSchemeIds(List<String> workflowSchemeIds) {
            this.workflowSchemeIds = workflowSchemeIds;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;workflows.usages&#x60; Returns the project and issue types that each workflow in the workflow scheme is associated with. (optional)
         * @return BulkGetWorkflowSchemesRequestBuilder
         */
        public BulkGetWorkflowSchemesRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for bulkGetWorkflowSchemes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowSchemeReadRequest workflowSchemeReadRequest = buildBodyParams();
            return bulkGetWorkflowSchemesCall(workflowSchemeReadRequest, expand, _callback);
        }

        private WorkflowSchemeReadRequest buildBodyParams() {
            WorkflowSchemeReadRequest workflowSchemeReadRequest = new WorkflowSchemeReadRequest();
            workflowSchemeReadRequest.projectIds(this.projectIds);
            workflowSchemeReadRequest.workflowSchemeIds(this.workflowSchemeIds);
            return workflowSchemeReadRequest;
        }

        /**
         * Execute bulkGetWorkflowSchemes request
         * @return List&lt;WorkflowSchemeReadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public List<WorkflowSchemeReadResponse> execute() throws ApiException {
            WorkflowSchemeReadRequest workflowSchemeReadRequest = buildBodyParams();
            ApiResponse<List<WorkflowSchemeReadResponse>> localVarResp = bulkGetWorkflowSchemesWithHttpInfo(workflowSchemeReadRequest, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkGetWorkflowSchemes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WorkflowSchemeReadResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WorkflowSchemeReadResponse>> executeWithHttpInfo() throws ApiException {
            WorkflowSchemeReadRequest workflowSchemeReadRequest = buildBodyParams();
            return bulkGetWorkflowSchemesWithHttpInfo(workflowSchemeReadRequest, expand);
        }

        /**
         * Execute bulkGetWorkflowSchemes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WorkflowSchemeReadResponse>> _callback) throws ApiException {
            WorkflowSchemeReadRequest workflowSchemeReadRequest = buildBodyParams();
            return bulkGetWorkflowSchemesAsync(workflowSchemeReadRequest, expand, _callback);
        }
    }

    /**
     * Bulk get workflow schemes
     * Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes  *  *Administer projects* project permissions to access project-scoped workflow schemes
     * @param workflowSchemeReadRequest  (required)
     * @return BulkGetWorkflowSchemesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public BulkGetWorkflowSchemesRequestBuilder bulkGetWorkflowSchemes() throws IllegalArgumentException {
        return new BulkGetWorkflowSchemesRequestBuilder();
    }
    private okhttp3.Call createSchemeCall(WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowScheme;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemeValidateBeforeCall(WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowScheme' is set
        if (workflowScheme == null) {
            throw new ApiException("Missing the required parameter 'workflowScheme' when calling createScheme(Async)");
        }

        return createSchemeCall(workflowScheme, _callback);

    }


    private ApiResponse<WorkflowScheme> createSchemeWithHttpInfo(WorkflowScheme workflowScheme) throws ApiException {
        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(workflowScheme, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSchemeAsync(WorkflowScheme workflowScheme, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemeValidateBeforeCall(workflowScheme, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSchemeRequestBuilder {
        private String description;
        private String defaultWorkflow;
        private Boolean draft;
        private Long id;
        private Map<String, String> issueTypeMappings;
        private Map<String, IssueTypeDetails> issueTypes;
        private String lastModified;
        private User lastModifiedUser;
        private String name;
        private String originalDefaultWorkflow;
        private Map<String, String> originalIssueTypeMappings;
        private URI self;
        private Boolean updateDraftIfNeeded;

        private CreateSchemeRequestBuilder() {
        }

        /**
         * Set description
         * @param description The description of the workflow scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultWorkflow
         * @param defaultWorkflow The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder defaultWorkflow(String defaultWorkflow) {
            this.defaultWorkflow = defaultWorkflow;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether the workflow scheme is a draft or not. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the workflow scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issueTypeMappings
         * @param issueTypeMappings The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder issueTypeMappings(Map<String, String> issueTypeMappings) {
            this.issueTypeMappings = issueTypeMappings;
            return this;
        }
        
        /**
         * Set issueTypes
         * @param issueTypes The issue types available in Jira. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder issueTypes(Map<String, IssueTypeDetails> issueTypes) {
            this.issueTypes = issueTypes;
            return this;
        }
        
        /**
         * Set lastModified
         * @param lastModified The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder lastModified(String lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set lastModifiedUser
         * @param lastModifiedUser The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder lastModifiedUser(User lastModifiedUser) {
            this.lastModifiedUser = lastModifiedUser;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set originalDefaultWorkflow
         * @param originalDefaultWorkflow For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder originalDefaultWorkflow(String originalDefaultWorkflow) {
            this.originalDefaultWorkflow = originalDefaultWorkflow;
            return this;
        }
        
        /**
         * Set originalIssueTypeMappings
         * @param originalIssueTypeMappings For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder originalIssueTypeMappings(Map<String, String> originalIssueTypeMappings) {
            this.originalIssueTypeMappings = originalIssueTypeMappings;
            return this;
        }
        
        /**
         * Set self
         * @param self  (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;. (optional)
         * @return CreateSchemeRequestBuilder
         */
        public CreateSchemeRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for createScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return createSchemeCall(workflowScheme, _callback);
        }

        private WorkflowScheme buildBodyParams() {
            WorkflowScheme workflowScheme = new WorkflowScheme();
            workflowScheme.description(this.description);
            workflowScheme.defaultWorkflow(this.defaultWorkflow);
            workflowScheme.draft(this.draft);
            workflowScheme.id(this.id);
            workflowScheme.issueTypeMappings(this.issueTypeMappings);
            workflowScheme.issueTypes(this.issueTypes);
            workflowScheme.lastModified(this.lastModified);
            workflowScheme.lastModifiedUser(this.lastModifiedUser);
            workflowScheme.name(this.name);
            workflowScheme.originalDefaultWorkflow(this.originalDefaultWorkflow);
            workflowScheme.originalIssueTypeMappings(this.originalIssueTypeMappings);
            workflowScheme.self(this.self);
            workflowScheme.updateDraftIfNeeded(this.updateDraftIfNeeded);
            return workflowScheme;
        }

        /**
         * Execute createScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = createSchemeWithHttpInfo(workflowScheme);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return createSchemeWithHttpInfo(workflowScheme);
        }

        /**
         * Execute createScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return createSchemeAsync(workflowScheme, _callback);
        }
    }

    /**
     * Create workflow scheme
     * Creates a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param workflowScheme  (required)
     * @return CreateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSchemeRequestBuilder createScheme() throws IllegalArgumentException {
        return new CreateSchemeRequestBuilder();
    }
    private okhttp3.Call deleteIssueTypeWorkflowMappingCall(Long id, String issueType, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateDraftIfNeeded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateDraftIfNeeded", updateDraftIfNeeded));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssueTypeWorkflowMappingValidateBeforeCall(Long id, String issueType, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIssueTypeWorkflowMapping(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling deleteIssueTypeWorkflowMapping(Async)");
        }

        return deleteIssueTypeWorkflowMappingCall(id, issueType, updateDraftIfNeeded, _callback);

    }


    private ApiResponse<WorkflowScheme> deleteIssueTypeWorkflowMappingWithHttpInfo(Long id, String issueType, Boolean updateDraftIfNeeded) throws ApiException {
        okhttp3.Call localVarCall = deleteIssueTypeWorkflowMappingValidateBeforeCall(id, issueType, updateDraftIfNeeded, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteIssueTypeWorkflowMappingAsync(Long id, String issueType, Boolean updateDraftIfNeeded, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssueTypeWorkflowMappingValidateBeforeCall(id, issueType, updateDraftIfNeeded, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteIssueTypeWorkflowMappingRequestBuilder {
        private final Long id;
        private final String issueType;
        private Boolean updateDraftIfNeeded;

        private DeleteIssueTypeWorkflowMappingRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return DeleteIssueTypeWorkflowMappingRequestBuilder
         */
        public DeleteIssueTypeWorkflowMappingRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for deleteIssueTypeWorkflowMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIssueTypeWorkflowMappingCall(id, issueType, updateDraftIfNeeded, _callback);
        }


        /**
         * Execute deleteIssueTypeWorkflowMapping request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = deleteIssueTypeWorkflowMappingWithHttpInfo(id, issueType, updateDraftIfNeeded);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteIssueTypeWorkflowMapping request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return deleteIssueTypeWorkflowMappingWithHttpInfo(id, issueType, updateDraftIfNeeded);
        }

        /**
         * Execute deleteIssueTypeWorkflowMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return deleteIssueTypeWorkflowMappingAsync(id, issueType, updateDraftIfNeeded, _callback);
        }
    }

    /**
     * Delete workflow for issue type in workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @return DeleteIssueTypeWorkflowMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIssueTypeWorkflowMappingRequestBuilder deleteIssueTypeWorkflowMapping(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new DeleteIssueTypeWorkflowMappingRequestBuilder(id, issueType);
    }
    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeCall(Long id, String workflowName, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (updateDraftIfNeeded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateDraftIfNeeded", updateDraftIfNeeded));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(Long id, String workflowName, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIssueTypesForWorkflowInScheme(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling deleteIssueTypesForWorkflowInScheme(Async)");
        }

        return deleteIssueTypesForWorkflowInSchemeCall(id, workflowName, updateDraftIfNeeded, _callback);

    }


    private ApiResponse<Void> deleteIssueTypesForWorkflowInSchemeWithHttpInfo(Long id, String workflowName, Boolean updateDraftIfNeeded) throws ApiException {
        okhttp3.Call localVarCall = deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, updateDraftIfNeeded, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteIssueTypesForWorkflowInSchemeAsync(Long id, String workflowName, Boolean updateDraftIfNeeded, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, updateDraftIfNeeded, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteIssueTypesForWorkflowInSchemeRequestBuilder {
        private final Long id;
        private final String workflowName;
        private Boolean updateDraftIfNeeded;

        private DeleteIssueTypesForWorkflowInSchemeRequestBuilder(Long id, String workflowName) {
            this.id = id;
            this.workflowName = workflowName;
        }

        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return DeleteIssueTypesForWorkflowInSchemeRequestBuilder
         */
        public DeleteIssueTypesForWorkflowInSchemeRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for deleteIssueTypesForWorkflowInScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeCall(id, workflowName, updateDraftIfNeeded, _callback);
        }


        /**
         * Execute deleteIssueTypesForWorkflowInScheme request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName, updateDraftIfNeeded);
        }

        /**
         * Execute deleteIssueTypesForWorkflowInScheme request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName, updateDraftIfNeeded);
        }

        /**
         * Execute deleteIssueTypesForWorkflowInScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteIssueTypesForWorkflowInSchemeAsync(id, workflowName, updateDraftIfNeeded, _callback);
        }
    }

    /**
     * Delete issue types for workflow in workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param workflowName The name of the workflow. (required)
     * @return DeleteIssueTypesForWorkflowInSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIssueTypesForWorkflowInSchemeRequestBuilder deleteIssueTypesForWorkflowInScheme(Long id, String workflowName) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new DeleteIssueTypesForWorkflowInSchemeRequestBuilder(id, workflowName);
    }
    private okhttp3.Call deleteSchemeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScheme(Async)");
        }

        return deleteSchemeCall(id, _callback);

    }


    private ApiResponse<Object> deleteSchemeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSchemeAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSchemeRequestBuilder {
        private final Long id;

        private DeleteSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Build call for deleteScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the scheme is active. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemeCall(id, _callback);
        }


        /**
         * Execute deleteScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the scheme is active. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteSchemeWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the scheme is active. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteSchemeWithHttpInfo(id);
        }

        /**
         * Execute deleteScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the scheme is active. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteSchemeAsync(id, _callback);
        }
    }

    /**
     * Delete workflow scheme
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @return DeleteSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the scheme is active. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemeRequestBuilder deleteScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteSchemeRequestBuilder(id);
    }
    private okhttp3.Call getAllCall(Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Long startAt, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return getAllCall(startAt, maxResults, _callback);

    }


    private ApiResponse<PageBeanWorkflowScheme> getAllWithHttpInfo(Long startAt, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(startAt, maxResults, null);
        Type localVarReturnType = new TypeToken<PageBeanWorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Long startAt, Integer maxResults, final ApiCallback<PageBeanWorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(startAt, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PageBeanWorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private Long startAt;
        private Integer maxResults;

        private GetAllRequestBuilder() {
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 50)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(startAt, maxResults, _callback);
        }


        /**
         * Execute getAll request
         * @return PageBeanWorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanWorkflowScheme execute() throws ApiException {
            ApiResponse<PageBeanWorkflowScheme> localVarResp = getAllWithHttpInfo(startAt, maxResults);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;PageBeanWorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanWorkflowScheme> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(startAt, maxResults);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanWorkflowScheme> _callback) throws ApiException {
            return getAllAsync(startAt, maxResults, _callback);
        }
    }

    /**
     * Get all workflow schemes
     * Returns a [paginated](https://dac-static.atlassian.com) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getDefaultWorkflowCall(Long id, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnDraftIfExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnDraftIfExists", returnDraftIfExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultWorkflowValidateBeforeCall(Long id, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDefaultWorkflow(Async)");
        }

        return getDefaultWorkflowCall(id, returnDraftIfExists, _callback);

    }


    private ApiResponse<DefaultWorkflow> getDefaultWorkflowWithHttpInfo(Long id, Boolean returnDraftIfExists) throws ApiException {
        okhttp3.Call localVarCall = getDefaultWorkflowValidateBeforeCall(id, returnDraftIfExists, null);
        Type localVarReturnType = new TypeToken<DefaultWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultWorkflowAsync(Long id, Boolean returnDraftIfExists, final ApiCallback<DefaultWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultWorkflowValidateBeforeCall(id, returnDraftIfExists, _callback);
        Type localVarReturnType = new TypeToken<DefaultWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultWorkflowRequestBuilder {
        private final Long id;
        private Boolean returnDraftIfExists;

        private GetDefaultWorkflowRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set returnDraftIfExists
         * @param returnDraftIfExists Set to &#x60;true&#x60; to return the default workflow for the workflow scheme&#39;s draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. (optional, default to false)
         * @return GetDefaultWorkflowRequestBuilder
         */
        public GetDefaultWorkflowRequestBuilder returnDraftIfExists(Boolean returnDraftIfExists) {
            this.returnDraftIfExists = returnDraftIfExists;
            return this;
        }
        
        /**
         * Build call for getDefaultWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultWorkflowCall(id, returnDraftIfExists, _callback);
        }


        /**
         * Execute getDefaultWorkflow request
         * @return DefaultWorkflow
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public DefaultWorkflow execute() throws ApiException {
            ApiResponse<DefaultWorkflow> localVarResp = getDefaultWorkflowWithHttpInfo(id, returnDraftIfExists);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultWorkflow request with HTTP info returned
         * @return ApiResponse&lt;DefaultWorkflow&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DefaultWorkflow> executeWithHttpInfo() throws ApiException {
            return getDefaultWorkflowWithHttpInfo(id, returnDraftIfExists);
        }

        /**
         * Execute getDefaultWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DefaultWorkflow> _callback) throws ApiException {
            return getDefaultWorkflowAsync(id, returnDraftIfExists, _callback);
        }
    }

    /**
     * Get default workflow
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @return GetDefaultWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultWorkflowRequestBuilder getDefaultWorkflow(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDefaultWorkflowRequestBuilder(id);
    }
    private okhttp3.Call getIssueTypeWorkflowCall(Long id, String issueType, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnDraftIfExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnDraftIfExists", returnDraftIfExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypeWorkflowValidateBeforeCall(Long id, String issueType, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling getIssueTypeWorkflow(Async)");
        }

        return getIssueTypeWorkflowCall(id, issueType, returnDraftIfExists, _callback);

    }


    private ApiResponse<IssueTypeWorkflowMapping> getIssueTypeWorkflowWithHttpInfo(Long id, String issueType, Boolean returnDraftIfExists) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypeWorkflowValidateBeforeCall(id, issueType, returnDraftIfExists, null);
        Type localVarReturnType = new TypeToken<IssueTypeWorkflowMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypeWorkflowAsync(Long id, String issueType, Boolean returnDraftIfExists, final ApiCallback<IssueTypeWorkflowMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypeWorkflowValidateBeforeCall(id, issueType, returnDraftIfExists, _callback);
        Type localVarReturnType = new TypeToken<IssueTypeWorkflowMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypeWorkflowRequestBuilder {
        private final Long id;
        private final String issueType;
        private Boolean returnDraftIfExists;

        private GetIssueTypeWorkflowRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Set returnDraftIfExists
         * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional, default to false)
         * @return GetIssueTypeWorkflowRequestBuilder
         */
        public GetIssueTypeWorkflowRequestBuilder returnDraftIfExists(Boolean returnDraftIfExists) {
            this.returnDraftIfExists = returnDraftIfExists;
            return this;
        }
        
        /**
         * Build call for getIssueTypeWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypeWorkflowCall(id, issueType, returnDraftIfExists, _callback);
        }


        /**
         * Execute getIssueTypeWorkflow request
         * @return IssueTypeWorkflowMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypeWorkflowMapping execute() throws ApiException {
            ApiResponse<IssueTypeWorkflowMapping> localVarResp = getIssueTypeWorkflowWithHttpInfo(id, issueType, returnDraftIfExists);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypeWorkflow request with HTTP info returned
         * @return ApiResponse&lt;IssueTypeWorkflowMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypeWorkflowMapping> executeWithHttpInfo() throws ApiException {
            return getIssueTypeWorkflowWithHttpInfo(id, issueType, returnDraftIfExists);
        }

        /**
         * Execute getIssueTypeWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypeWorkflowMapping> _callback) throws ApiException {
            return getIssueTypeWorkflowAsync(id, issueType, returnDraftIfExists, _callback);
        }
    }

    /**
     * Get workflow for issue type in workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @return GetIssueTypeWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypeWorkflowRequestBuilder getIssueTypeWorkflow(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new GetIssueTypeWorkflowRequestBuilder(id, issueType);
    }
    private okhttp3.Call getIssueTypesForWorkflowsInSchemeCall(Long id, String workflowName, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (returnDraftIfExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnDraftIfExists", returnDraftIfExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueTypesForWorkflowsInSchemeValidateBeforeCall(Long id, String workflowName, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIssueTypesForWorkflowsInScheme(Async)");
        }

        return getIssueTypesForWorkflowsInSchemeCall(id, workflowName, returnDraftIfExists, _callback);

    }


    private ApiResponse<IssueTypesWorkflowMapping> getIssueTypesForWorkflowsInSchemeWithHttpInfo(Long id, String workflowName, Boolean returnDraftIfExists) throws ApiException {
        okhttp3.Call localVarCall = getIssueTypesForWorkflowsInSchemeValidateBeforeCall(id, workflowName, returnDraftIfExists, null);
        Type localVarReturnType = new TypeToken<IssueTypesWorkflowMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIssueTypesForWorkflowsInSchemeAsync(Long id, String workflowName, Boolean returnDraftIfExists, final ApiCallback<IssueTypesWorkflowMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueTypesForWorkflowsInSchemeValidateBeforeCall(id, workflowName, returnDraftIfExists, _callback);
        Type localVarReturnType = new TypeToken<IssueTypesWorkflowMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIssueTypesForWorkflowsInSchemeRequestBuilder {
        private final Long id;
        private String workflowName;
        private Boolean returnDraftIfExists;

        private GetIssueTypesForWorkflowsInSchemeRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set workflowName
         * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional)
         * @return GetIssueTypesForWorkflowsInSchemeRequestBuilder
         */
        public GetIssueTypesForWorkflowsInSchemeRequestBuilder workflowName(String workflowName) {
            this.workflowName = workflowName;
            return this;
        }
        
        /**
         * Set returnDraftIfExists
         * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional, default to false)
         * @return GetIssueTypesForWorkflowsInSchemeRequestBuilder
         */
        public GetIssueTypesForWorkflowsInSchemeRequestBuilder returnDraftIfExists(Boolean returnDraftIfExists) {
            this.returnDraftIfExists = returnDraftIfExists;
            return this;
        }
        
        /**
         * Build call for getIssueTypesForWorkflowsInScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIssueTypesForWorkflowsInSchemeCall(id, workflowName, returnDraftIfExists, _callback);
        }


        /**
         * Execute getIssueTypesForWorkflowsInScheme request
         * @return IssueTypesWorkflowMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow is not found. </td><td>  -  </td></tr>
         </table>
         */
        public IssueTypesWorkflowMapping execute() throws ApiException {
            ApiResponse<IssueTypesWorkflowMapping> localVarResp = getIssueTypesForWorkflowsInSchemeWithHttpInfo(id, workflowName, returnDraftIfExists);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIssueTypesForWorkflowsInScheme request with HTTP info returned
         * @return ApiResponse&lt;IssueTypesWorkflowMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IssueTypesWorkflowMapping> executeWithHttpInfo() throws ApiException {
            return getIssueTypesForWorkflowsInSchemeWithHttpInfo(id, workflowName, returnDraftIfExists);
        }

        /**
         * Execute getIssueTypesForWorkflowsInScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssueTypesWorkflowMapping> _callback) throws ApiException {
            return getIssueTypesForWorkflowsInSchemeAsync(id, workflowName, returnDraftIfExists, _callback);
        }
    }

    /**
     * Get issue types for workflows in workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @return GetIssueTypesForWorkflowsInSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if either the workflow scheme or workflow is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetIssueTypesForWorkflowsInSchemeRequestBuilder getIssueTypesForWorkflowsInScheme(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetIssueTypesForWorkflowsInSchemeRequestBuilder(id);
    }
    private okhttp3.Call getRequiredStatusMappingsCall(WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowSchemeUpdateRequiredMappingsRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/update/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequiredStatusMappingsValidateBeforeCall(WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowSchemeUpdateRequiredMappingsRequest' is set
        if (workflowSchemeUpdateRequiredMappingsRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowSchemeUpdateRequiredMappingsRequest' when calling getRequiredStatusMappings(Async)");
        }

        return getRequiredStatusMappingsCall(workflowSchemeUpdateRequiredMappingsRequest, _callback);

    }


    private ApiResponse<WorkflowSchemeUpdateRequiredMappingsResponse> getRequiredStatusMappingsWithHttpInfo(WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest) throws ApiException {
        okhttp3.Call localVarCall = getRequiredStatusMappingsValidateBeforeCall(workflowSchemeUpdateRequiredMappingsRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowSchemeUpdateRequiredMappingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequiredStatusMappingsAsync(WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest, final ApiCallback<WorkflowSchemeUpdateRequiredMappingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequiredStatusMappingsValidateBeforeCall(workflowSchemeUpdateRequiredMappingsRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowSchemeUpdateRequiredMappingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequiredStatusMappingsRequestBuilder {
        private final String id;
        private final List<WorkflowSchemeAssociation> workflowsForIssueTypes;
        private String defaultWorkflowId;

        private GetRequiredStatusMappingsRequestBuilder(String id, List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
            this.id = id;
            this.workflowsForIssueTypes = workflowsForIssueTypes;
        }

        /**
         * Set defaultWorkflowId
         * @param defaultWorkflowId The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn&#39;t specified, is set to *Jira Workflow (jira)*. (optional)
         * @return GetRequiredStatusMappingsRequestBuilder
         */
        public GetRequiredStatusMappingsRequestBuilder defaultWorkflowId(String defaultWorkflowId) {
            this.defaultWorkflowId = defaultWorkflowId;
            return this;
        }
        
        /**
         * Build call for getRequiredStatusMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest = buildBodyParams();
            return getRequiredStatusMappingsCall(workflowSchemeUpdateRequiredMappingsRequest, _callback);
        }

        private WorkflowSchemeUpdateRequiredMappingsRequest buildBodyParams() {
            WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest = new WorkflowSchemeUpdateRequiredMappingsRequest();
            workflowSchemeUpdateRequiredMappingsRequest.defaultWorkflowId(this.defaultWorkflowId);
            workflowSchemeUpdateRequiredMappingsRequest.id(this.id);
            workflowSchemeUpdateRequiredMappingsRequest.workflowsForIssueTypes(this.workflowsForIssueTypes);
            return workflowSchemeUpdateRequiredMappingsRequest;
        }

        /**
         * Execute getRequiredStatusMappings request
         * @return WorkflowSchemeUpdateRequiredMappingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowSchemeUpdateRequiredMappingsResponse execute() throws ApiException {
            WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest = buildBodyParams();
            ApiResponse<WorkflowSchemeUpdateRequiredMappingsResponse> localVarResp = getRequiredStatusMappingsWithHttpInfo(workflowSchemeUpdateRequiredMappingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequiredStatusMappings request with HTTP info returned
         * @return ApiResponse&lt;WorkflowSchemeUpdateRequiredMappingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowSchemeUpdateRequiredMappingsResponse> executeWithHttpInfo() throws ApiException {
            WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest = buildBodyParams();
            return getRequiredStatusMappingsWithHttpInfo(workflowSchemeUpdateRequiredMappingsRequest);
        }

        /**
         * Execute getRequiredStatusMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowSchemeUpdateRequiredMappingsResponse> _callback) throws ApiException {
            WorkflowSchemeUpdateRequiredMappingsRequest workflowSchemeUpdateRequiredMappingsRequest = buildBodyParams();
            return getRequiredStatusMappingsAsync(workflowSchemeUpdateRequiredMappingsRequest, _callback);
        }
    }

    /**
     * Get required status mappings for workflow scheme update
     * Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param workflowSchemeUpdateRequiredMappingsRequest  (required)
     * @return GetRequiredStatusMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public GetRequiredStatusMappingsRequestBuilder getRequiredStatusMappings(String id, List<WorkflowSchemeAssociation> workflowsForIssueTypes) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (workflowsForIssueTypes == null) throw new IllegalArgumentException("\"workflowsForIssueTypes\" is required but got null");
        return new GetRequiredStatusMappingsRequestBuilder(id, workflowsForIssueTypes);
    }
    private okhttp3.Call getSchemeByIdCall(Long id, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnDraftIfExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnDraftIfExists", returnDraftIfExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemeByIdValidateBeforeCall(Long id, Boolean returnDraftIfExists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchemeById(Async)");
        }

        return getSchemeByIdCall(id, returnDraftIfExists, _callback);

    }


    private ApiResponse<WorkflowScheme> getSchemeByIdWithHttpInfo(Long id, Boolean returnDraftIfExists) throws ApiException {
        okhttp3.Call localVarCall = getSchemeByIdValidateBeforeCall(id, returnDraftIfExists, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemeByIdAsync(Long id, Boolean returnDraftIfExists, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemeByIdValidateBeforeCall(id, returnDraftIfExists, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchemeByIdRequestBuilder {
        private final Long id;
        private Boolean returnDraftIfExists;

        private GetSchemeByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set returnDraftIfExists
         * @param returnDraftIfExists Returns the workflow scheme&#39;s draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. (optional, default to false)
         * @return GetSchemeByIdRequestBuilder
         */
        public GetSchemeByIdRequestBuilder returnDraftIfExists(Boolean returnDraftIfExists) {
            this.returnDraftIfExists = returnDraftIfExists;
            return this;
        }
        
        /**
         * Build call for getSchemeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemeByIdCall(id, returnDraftIfExists, _callback);
        }


        /**
         * Execute getSchemeById request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = getSchemeByIdWithHttpInfo(id, returnDraftIfExists);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchemeById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return getSchemeByIdWithHttpInfo(id, returnDraftIfExists);
        }

        /**
         * Execute getSchemeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return getSchemeByIdAsync(id, returnDraftIfExists, _callback);
        }
    }

    /**
     * Get workflow scheme
     * Returns a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @return GetSchemeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemeByIdRequestBuilder getSchemeById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetSchemeByIdRequestBuilder(id);
    }
    private okhttp3.Call resetDefaultWorkflowCall(Long id, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateDraftIfNeeded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateDraftIfNeeded", updateDraftIfNeeded));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDefaultWorkflowValidateBeforeCall(Long id, Boolean updateDraftIfNeeded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetDefaultWorkflow(Async)");
        }

        return resetDefaultWorkflowCall(id, updateDraftIfNeeded, _callback);

    }


    private ApiResponse<WorkflowScheme> resetDefaultWorkflowWithHttpInfo(Long id, Boolean updateDraftIfNeeded) throws ApiException {
        okhttp3.Call localVarCall = resetDefaultWorkflowValidateBeforeCall(id, updateDraftIfNeeded, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetDefaultWorkflowAsync(Long id, Boolean updateDraftIfNeeded, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDefaultWorkflowValidateBeforeCall(id, updateDraftIfNeeded, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetDefaultWorkflowRequestBuilder {
        private final Long id;
        private Boolean updateDraftIfNeeded;

        private ResetDefaultWorkflowRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional)
         * @return ResetDefaultWorkflowRequestBuilder
         */
        public ResetDefaultWorkflowRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for resetDefaultWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetDefaultWorkflowCall(id, updateDraftIfNeeded, _callback);
        }


        /**
         * Execute resetDefaultWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            ApiResponse<WorkflowScheme> localVarResp = resetDefaultWorkflowWithHttpInfo(id, updateDraftIfNeeded);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetDefaultWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            return resetDefaultWorkflowWithHttpInfo(id, updateDraftIfNeeded);
        }

        /**
         * Execute resetDefaultWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            return resetDefaultWorkflowAsync(id, updateDraftIfNeeded, _callback);
        }
    }

    /**
     * Delete default workflow
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @return ResetDefaultWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ResetDefaultWorkflowRequestBuilder resetDefaultWorkflow(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ResetDefaultWorkflowRequestBuilder(id);
    }
    private okhttp3.Call setIssueTypeWorkflowCall(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypeWorkflowMapping;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issueType" + "}", localVarApiClient.escapeString(issueType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIssueTypeWorkflowValidateBeforeCall(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueType' is set
        if (issueType == null) {
            throw new ApiException("Missing the required parameter 'issueType' when calling setIssueTypeWorkflow(Async)");
        }

        // verify the required parameter 'issueTypeWorkflowMapping' is set
        if (issueTypeWorkflowMapping == null) {
            throw new ApiException("Missing the required parameter 'issueTypeWorkflowMapping' when calling setIssueTypeWorkflow(Async)");
        }

        return setIssueTypeWorkflowCall(id, issueType, issueTypeWorkflowMapping, _callback);

    }


    private ApiResponse<WorkflowScheme> setIssueTypeWorkflowWithHttpInfo(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping) throws ApiException {
        okhttp3.Call localVarCall = setIssueTypeWorkflowValidateBeforeCall(id, issueType, issueTypeWorkflowMapping, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIssueTypeWorkflowAsync(Long id, String issueType, IssueTypeWorkflowMapping issueTypeWorkflowMapping, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIssueTypeWorkflowValidateBeforeCall(id, issueType, issueTypeWorkflowMapping, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIssueTypeWorkflowRequestBuilder {
        private final Long id;
        private final String issueType;
        private String issueType;
        private Boolean updateDraftIfNeeded;
        private String workflow;

        private SetIssueTypeWorkflowRequestBuilder(Long id, String issueType) {
            this.id = id;
            this.issueType = issueType;
        }

        /**
         * Set issueType
         * @param issueType The ID of the issue type. Not required if updating the issue type-workflow mapping. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder issueType(String issueType) {
            this.issueType = issueType;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. Only applicable when updating the workflow-issue types mapping. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Set workflow
         * @param workflow The name of the workflow. (optional)
         * @return SetIssueTypeWorkflowRequestBuilder
         */
        public SetIssueTypeWorkflowRequestBuilder workflow(String workflow) {
            this.workflow = workflow;
            return this;
        }
        
        /**
         * Build call for setIssueTypeWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowCall(id, issueType, issueTypeWorkflowMapping, _callback);
        }

        private IssueTypeWorkflowMapping buildBodyParams() {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = new IssueTypeWorkflowMapping();
            issueTypeWorkflowMapping.issueType(this.issueType);
            issueTypeWorkflowMapping.updateDraftIfNeeded(this.updateDraftIfNeeded);
            issueTypeWorkflowMapping.workflow(this.workflow);
            return issueTypeWorkflowMapping;
        }

        /**
         * Execute setIssueTypeWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = setIssueTypeWorkflowWithHttpInfo(id, issueType, issueTypeWorkflowMapping);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIssueTypeWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowWithHttpInfo(id, issueType, issueTypeWorkflowMapping);
        }

        /**
         * Execute setIssueTypeWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            IssueTypeWorkflowMapping issueTypeWorkflowMapping = buildBodyParams();
            return setIssueTypeWorkflowAsync(id, issueType, issueTypeWorkflowMapping, _callback);
        }
    }

    /**
     * Set workflow for issue type in workflow scheme
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @param issueTypeWorkflowMapping The issue type-project mapping. (required)
     * @return SetIssueTypeWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme or issue type is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SetIssueTypeWorkflowRequestBuilder setIssueTypeWorkflow(Long id, String issueType) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (issueType == null) throw new IllegalArgumentException("\"issueType\" is required but got null");
            

        return new SetIssueTypeWorkflowRequestBuilder(id, issueType);
    }
    private okhttp3.Call setIssueTypesForWorkflowInSchemeCall(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueTypesWorkflowMapping;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/workflow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIssueTypesForWorkflowInSchemeValidateBeforeCall(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setIssueTypesForWorkflowInScheme(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling setIssueTypesForWorkflowInScheme(Async)");
        }

        // verify the required parameter 'issueTypesWorkflowMapping' is set
        if (issueTypesWorkflowMapping == null) {
            throw new ApiException("Missing the required parameter 'issueTypesWorkflowMapping' when calling setIssueTypesForWorkflowInScheme(Async)");
        }

        return setIssueTypesForWorkflowInSchemeCall(id, workflowName, issueTypesWorkflowMapping, _callback);

    }


    private ApiResponse<WorkflowScheme> setIssueTypesForWorkflowInSchemeWithHttpInfo(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping) throws ApiException {
        okhttp3.Call localVarCall = setIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, issueTypesWorkflowMapping, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIssueTypesForWorkflowInSchemeAsync(Long id, String workflowName, IssueTypesWorkflowMapping issueTypesWorkflowMapping, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIssueTypesForWorkflowInSchemeValidateBeforeCall(id, workflowName, issueTypesWorkflowMapping, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIssueTypesForWorkflowInSchemeRequestBuilder {
        private final Long id;
        private final String workflowName;
        private Boolean defaultMapping;
        private List<String> issueTypes;
        private Boolean updateDraftIfNeeded;
        private String workflow;

        private SetIssueTypesForWorkflowInSchemeRequestBuilder(Long id, String workflowName) {
            this.id = id;
            this.workflowName = workflowName;
        }

        /**
         * Set defaultMapping
         * @param defaultMapping Whether the workflow is the default workflow for the workflow scheme. (optional)
         * @return SetIssueTypesForWorkflowInSchemeRequestBuilder
         */
        public SetIssueTypesForWorkflowInSchemeRequestBuilder defaultMapping(Boolean defaultMapping) {
            this.defaultMapping = defaultMapping;
            return this;
        }
        
        /**
         * Set issueTypes
         * @param issueTypes The list of issue type IDs. (optional)
         * @return SetIssueTypesForWorkflowInSchemeRequestBuilder
         */
        public SetIssueTypesForWorkflowInSchemeRequestBuilder issueTypes(List<String> issueTypes) {
            this.issueTypes = issueTypes;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to &#x60;false&#x60;. (optional)
         * @return SetIssueTypesForWorkflowInSchemeRequestBuilder
         */
        public SetIssueTypesForWorkflowInSchemeRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Set workflow
         * @param workflow The name of the workflow. Optional if updating the workflow-issue types mapping. (optional)
         * @return SetIssueTypesForWorkflowInSchemeRequestBuilder
         */
        public SetIssueTypesForWorkflowInSchemeRequestBuilder workflow(String workflow) {
            this.workflow = workflow;
            return this;
        }
        
        /**
         * Build call for setIssueTypesForWorkflowInScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowInSchemeCall(id, workflowName, issueTypesWorkflowMapping, _callback);
        }

        private IssueTypesWorkflowMapping buildBodyParams() {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = new IssueTypesWorkflowMapping();
            issueTypesWorkflowMapping.defaultMapping(this.defaultMapping);
            issueTypesWorkflowMapping.issueTypes(this.issueTypes);
            issueTypesWorkflowMapping.updateDraftIfNeeded(this.updateDraftIfNeeded);
            issueTypesWorkflowMapping.workflow(this.workflow);
            return issueTypesWorkflowMapping;
        }

        /**
         * Execute setIssueTypesForWorkflowInScheme request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = setIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName, issueTypesWorkflowMapping);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIssueTypesForWorkflowInScheme request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowInSchemeWithHttpInfo(id, workflowName, issueTypesWorkflowMapping);
        }

        /**
         * Execute setIssueTypesForWorkflowInScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            IssueTypesWorkflowMapping issueTypesWorkflowMapping = buildBodyParams();
            return setIssueTypesForWorkflowInSchemeAsync(id, workflowName, issueTypesWorkflowMapping, _callback);
        }
    }

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param workflowName The name of the workflow. (required)
     * @param issueTypesWorkflowMapping  (required)
     * @return SetIssueTypesForWorkflowInSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. </td><td>  -  </td></tr>
     </table>
     */
    public SetIssueTypesForWorkflowInSchemeRequestBuilder setIssueTypesForWorkflowInScheme(Long id, String workflowName) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new SetIssueTypesForWorkflowInSchemeRequestBuilder(id, workflowName);
    }
    private okhttp3.Call updateDefaultWorkflowCall(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultWorkflow;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultWorkflowValidateBeforeCall(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDefaultWorkflow(Async)");
        }

        // verify the required parameter 'defaultWorkflow' is set
        if (defaultWorkflow == null) {
            throw new ApiException("Missing the required parameter 'defaultWorkflow' when calling updateDefaultWorkflow(Async)");
        }

        return updateDefaultWorkflowCall(id, defaultWorkflow, _callback);

    }


    private ApiResponse<WorkflowScheme> updateDefaultWorkflowWithHttpInfo(Long id, DefaultWorkflow defaultWorkflow) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultWorkflowValidateBeforeCall(id, defaultWorkflow, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefaultWorkflowAsync(Long id, DefaultWorkflow defaultWorkflow, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultWorkflowValidateBeforeCall(id, defaultWorkflow, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefaultWorkflowRequestBuilder {
        private final String workflow;
        private final Long id;
        private Boolean updateDraftIfNeeded;

        private UpdateDefaultWorkflowRequestBuilder(String workflow, Long id) {
            this.workflow = workflow;
            this.id = id;
        }

        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to &#x60;false&#x60;. (optional)
         * @return UpdateDefaultWorkflowRequestBuilder
         */
        public UpdateDefaultWorkflowRequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for updateDefaultWorkflow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowCall(id, defaultWorkflow, _callback);
        }

        private DefaultWorkflow buildBodyParams() {
            DefaultWorkflow defaultWorkflow = new DefaultWorkflow();
            defaultWorkflow.updateDraftIfNeeded(this.updateDraftIfNeeded);
            defaultWorkflow.workflow(this.workflow);
            return defaultWorkflow;
        }

        /**
         * Execute updateDefaultWorkflow request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = updateDefaultWorkflowWithHttpInfo(id, defaultWorkflow);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefaultWorkflow request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowWithHttpInfo(id, defaultWorkflow);
        }

        /**
         * Execute updateDefaultWorkflow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            DefaultWorkflow defaultWorkflow = buildBodyParams();
            return updateDefaultWorkflowAsync(id, defaultWorkflow, _callback);
        }
    }

    /**
     * Update default workflow
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. (required)
     * @param defaultWorkflow The new default workflow. (required)
     * @return UpdateDefaultWorkflowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefaultWorkflowRequestBuilder updateDefaultWorkflow(String workflow, Long id) throws IllegalArgumentException {
        if (workflow == null) throw new IllegalArgumentException("\"workflow\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateDefaultWorkflowRequestBuilder(workflow, id);
    }
    private okhttp3.Call updateSchemeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemeValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateScheme(Async)");
        }

        return updateSchemeCall(requestBody, _callback);

    }


    private ApiResponse<Object> updateSchemeWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemeAsync(Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemeValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemeRequestBuilder {
        private final String description;
        private final DocumentVersion version;
        private final String id;
        private final String name;
        private String defaultWorkflowId;
        private List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride;
        private List<MappingsByWorkflow> statusMappingsByWorkflows;
        private List<WorkflowSchemeAssociation> workflowsForIssueTypes;

        private UpdateSchemeRequestBuilder(String description, DocumentVersion version, String id, String name) {
            this.description = description;
            this.version = version;
            this.id = id;
            this.name = name;
        }

        /**
         * Set defaultWorkflowId
         * @param defaultWorkflowId The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#39;t specified, this is set to *Jira Workflow (jira)*. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder defaultWorkflowId(String defaultWorkflowId) {
            this.defaultWorkflowId = defaultWorkflowId;
            return this;
        }
        
        /**
         * Set statusMappingsByIssueTypeOverride
         * @param statusMappingsByIssueTypeOverride Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder statusMappingsByIssueTypeOverride(List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride) {
            this.statusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
            return this;
        }
        
        /**
         * Set statusMappingsByWorkflows
         * @param statusMappingsByWorkflows The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder statusMappingsByWorkflows(List<MappingsByWorkflow> statusMappingsByWorkflows) {
            this.statusMappingsByWorkflows = statusMappingsByWorkflows;
            return this;
        }
        
        /**
         * Set workflowsForIssueTypes
         * @param workflowsForIssueTypes Mappings from workflows to issue types. (optional)
         * @return UpdateSchemeRequestBuilder
         */
        public UpdateSchemeRequestBuilder workflowsForIssueTypes(List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
            this.workflowsForIssueTypes = workflowsForIssueTypes;
            return this;
        }
        
        /**
         * Build call for updateScheme
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and there is no asynchronous task. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeCall(requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("description", this.description);
            requestBody.put("version", this.version);
            requestBody.put("defaultWorkflowId", this.defaultWorkflowId);
            requestBody.put("id", this.id);
            requestBody.put("name", this.name);
            requestBody.put("statusMappingsByIssueTypeOverride", this.statusMappingsByIssueTypeOverride);
            requestBody.put("statusMappingsByWorkflows", this.statusMappingsByWorkflows);
            requestBody.put("workflowsForIssueTypes", this.workflowsForIssueTypes);
            return requestBody;
        }

        /**
         * Execute updateScheme request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and there is no asynchronous task. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSchemeWithHttpInfo(requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and there is no asynchronous task. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeWithHttpInfo(requestBody);
        }

        /**
         * Execute updateScheme request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful and there is no asynchronous task. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateSchemeAsync(requestBody, _callback);
        }
    }

    /**
     * Update workflow scheme
     * Updates company-managed and team-managed project workflow schemes. This API doesn&#39;t have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](https://dac-static.atlassian.com) migrates the issues as defined in the provided mappings.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
     * @param requestBody  (required)
     * @return UpdateSchemeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful and there is no asynchronous task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemeRequestBuilder updateScheme(String description, DocumentVersion version, String id, String name) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UpdateSchemeRequestBuilder(description, version, id, name);
    }
    private okhttp3.Call updateScheme_0Call(Long id, WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowScheme;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflowscheme/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheme_0ValidateBeforeCall(Long id, WorkflowScheme workflowScheme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateScheme_0(Async)");
        }

        // verify the required parameter 'workflowScheme' is set
        if (workflowScheme == null) {
            throw new ApiException("Missing the required parameter 'workflowScheme' when calling updateScheme_0(Async)");
        }

        return updateScheme_0Call(id, workflowScheme, _callback);

    }


    private ApiResponse<WorkflowScheme> updateScheme_0WithHttpInfo(Long id, WorkflowScheme workflowScheme) throws ApiException {
        okhttp3.Call localVarCall = updateScheme_0ValidateBeforeCall(id, workflowScheme, null);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateScheme_0Async(Long id, WorkflowScheme workflowScheme, final ApiCallback<WorkflowScheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScheme_0ValidateBeforeCall(id, workflowScheme, _callback);
        Type localVarReturnType = new TypeToken<WorkflowScheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateScheme0RequestBuilder {
        private final Long id;
        private String description;
        private String defaultWorkflow;
        private Boolean draft;
        private Long id;
        private Map<String, String> issueTypeMappings;
        private Map<String, IssueTypeDetails> issueTypes;
        private String lastModified;
        private User lastModifiedUser;
        private String name;
        private String originalDefaultWorkflow;
        private Map<String, String> originalIssueTypeMappings;
        private URI self;
        private Boolean updateDraftIfNeeded;

        private UpdateScheme0RequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the workflow scheme. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set defaultWorkflow
         * @param defaultWorkflow The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder defaultWorkflow(String defaultWorkflow) {
            this.defaultWorkflow = defaultWorkflow;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether the workflow scheme is a draft or not. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of the workflow scheme. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder id(Long id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set issueTypeMappings
         * @param issueTypeMappings The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder issueTypeMappings(Map<String, String> issueTypeMappings) {
            this.issueTypeMappings = issueTypeMappings;
            return this;
        }
        
        /**
         * Set issueTypes
         * @param issueTypes The issue types available in Jira. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder issueTypes(Map<String, IssueTypeDetails> issueTypes) {
            this.issueTypes = issueTypes;
            return this;
        }
        
        /**
         * Set lastModified
         * @param lastModified The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder lastModified(String lastModified) {
            this.lastModified = lastModified;
            return this;
        }
        
        /**
         * Set lastModifiedUser
         * @param lastModifiedUser The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder lastModifiedUser(User lastModifiedUser) {
            this.lastModifiedUser = lastModifiedUser;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set originalDefaultWorkflow
         * @param originalDefaultWorkflow For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder originalDefaultWorkflow(String originalDefaultWorkflow) {
            this.originalDefaultWorkflow = originalDefaultWorkflow;
            return this;
        }
        
        /**
         * Set originalIssueTypeMappings
         * @param originalIssueTypeMappings For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder originalIssueTypeMappings(Map<String, String> originalIssueTypeMappings) {
            this.originalIssueTypeMappings = originalIssueTypeMappings;
            return this;
        }
        
        /**
         * Set self
         * @param self  (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder self(URI self) {
            this.self = self;
            return this;
        }
        
        /**
         * Set updateDraftIfNeeded
         * @param updateDraftIfNeeded Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;. (optional)
         * @return UpdateScheme0RequestBuilder
         */
        public UpdateScheme0RequestBuilder updateDraftIfNeeded(Boolean updateDraftIfNeeded) {
            this.updateDraftIfNeeded = updateDraftIfNeeded;
            return this;
        }
        
        /**
         * Build call for updateScheme_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateScheme_0Call(id, workflowScheme, _callback);
        }

        private WorkflowScheme buildBodyParams() {
            WorkflowScheme workflowScheme = new WorkflowScheme();
            workflowScheme.description(this.description);
            workflowScheme.defaultWorkflow(this.defaultWorkflow);
            workflowScheme.draft(this.draft);
            workflowScheme.id(this.id);
            workflowScheme.issueTypeMappings(this.issueTypeMappings);
            workflowScheme.issueTypes(this.issueTypes);
            workflowScheme.lastModified(this.lastModified);
            workflowScheme.lastModifiedUser(this.lastModifiedUser);
            workflowScheme.name(this.name);
            workflowScheme.originalDefaultWorkflow(this.originalDefaultWorkflow);
            workflowScheme.originalIssueTypeMappings(this.originalIssueTypeMappings);
            workflowScheme.self(this.self);
            workflowScheme.updateDraftIfNeeded(this.updateDraftIfNeeded);
            return workflowScheme;
        }

        /**
         * Execute updateScheme_0 request
         * @return WorkflowScheme
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowScheme execute() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            ApiResponse<WorkflowScheme> localVarResp = updateScheme_0WithHttpInfo(id, workflowScheme);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateScheme_0 request with HTTP info returned
         * @return ApiResponse&lt;WorkflowScheme&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowScheme> executeWithHttpInfo() throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateScheme_0WithHttpInfo(id, workflowScheme);
        }

        /**
         * Execute updateScheme_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowScheme> _callback) throws ApiException {
            WorkflowScheme workflowScheme = buildBodyParams();
            return updateScheme_0Async(id, workflowScheme, _callback);
        }
    }

    /**
     * Classic update workflow scheme
     * Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @param workflowScheme  (required)
     * @return UpdateScheme0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow scheme is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScheme0RequestBuilder updateScheme_0(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateScheme0RequestBuilder(id);
    }
}
