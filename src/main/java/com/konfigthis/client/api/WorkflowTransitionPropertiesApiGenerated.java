/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkflowTransitionProperty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowTransitionPropertiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowTransitionPropertiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowTransitionPropertiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTransitionPropertyCall(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/transitions/{transitionId}/properties"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (workflowMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowMode", workflowMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransitionPropertyValidateBeforeCall(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling createTransitionProperty(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createTransitionProperty(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling createTransitionProperty(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createTransitionProperty(Async)");
        }

        return createTransitionPropertyCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);

    }


    private ApiResponse<WorkflowTransitionProperty> createTransitionPropertyWithHttpInfo(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode) throws ApiException {
        okhttp3.Call localVarCall = createTransitionPropertyValidateBeforeCall(transitionId, key, workflowName, requestBody, workflowMode, null);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransitionPropertyAsync(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransitionPropertyValidateBeforeCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTransitionPropertyRequestBuilder {
        private final String value;
        private final Long transitionId;
        private final String key;
        private final String workflowName;
        private String id;
        private String key;
        private String workflowMode;

        private CreateTransitionPropertyRequestBuilder(String value, Long transitionId, String key, String workflowName) {
            this.value = value;
            this.transitionId = transitionId;
            this.key = key;
            this.workflowName = workflowName;
        }

        /**
         * Set id
         * @param id The ID of the transition property. (optional)
         * @return CreateTransitionPropertyRequestBuilder
         */
        public CreateTransitionPropertyRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set key
         * @param key The key of the transition property. Also known as the name of the transition property. (optional)
         * @return CreateTransitionPropertyRequestBuilder
         */
        public CreateTransitionPropertyRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set workflowMode
         * @param workflowMode The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited. (optional, default to live)
         * @return CreateTransitionPropertyRequestBuilder
         */
        public CreateTransitionPropertyRequestBuilder workflowMode(String workflowMode) {
            this.workflowMode = workflowMode;
            return this;
        }
        
        /**
         * Build call for createTransitionProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a workflow property with the same key is present on the transition. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createTransitionPropertyCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("id", this.id);
            requestBody.put("key", this.key);
            requestBody.put("value", this.value);
            return requestBody;
        }

        /**
         * Execute createTransitionProperty request
         * @return WorkflowTransitionProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a workflow property with the same key is present on the transition. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowTransitionProperty execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<WorkflowTransitionProperty> localVarResp = createTransitionPropertyWithHttpInfo(transitionId, key, workflowName, requestBody, workflowMode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTransitionProperty request with HTTP info returned
         * @return ApiResponse&lt;WorkflowTransitionProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a workflow property with the same key is present on the transition. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowTransitionProperty> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createTransitionPropertyWithHttpInfo(transitionId, key, workflowName, requestBody, workflowMode);
        }

        /**
         * Execute createTransitionProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if a workflow property with the same key is present on the transition. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createTransitionPropertyAsync(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        }
    }

    /**
     * Create workflow transition property
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The key of the property being added, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param requestBody  (required)
     * @return CreateTransitionPropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if a workflow property with the same key is present on the transition. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTransitionPropertyRequestBuilder createTransitionProperty(String value, Long transitionId, String key, String workflowName) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (transitionId == null) throw new IllegalArgumentException("\"transitionId\" is required but got null");
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new CreateTransitionPropertyRequestBuilder(value, transitionId, key, workflowName);
    }
    private okhttp3.Call deletePropertyCall(Long transitionId, String key, String workflowName, String workflowMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/transitions/{transitionId}/properties"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (workflowMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowMode", workflowMode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(Long transitionId, String key, String workflowName, String workflowMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling deleteProperty(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteProperty(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling deleteProperty(Async)");
        }

        return deletePropertyCall(transitionId, key, workflowName, workflowMode, _callback);

    }


    private ApiResponse<Void> deletePropertyWithHttpInfo(Long transitionId, String key, String workflowName, String workflowMode) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(transitionId, key, workflowName, workflowMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePropertyAsync(Long transitionId, String key, String workflowName, String workflowMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(transitionId, key, workflowName, workflowMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePropertyRequestBuilder {
        private final Long transitionId;
        private final String key;
        private final String workflowName;
        private String workflowMode;

        private DeletePropertyRequestBuilder(Long transitionId, String key, String workflowName) {
            this.transitionId = transitionId;
            this.key = key;
            this.workflowName = workflowName;
        }

        /**
         * Set workflowMode
         * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited. (optional)
         * @return DeletePropertyRequestBuilder
         */
        public DeletePropertyRequestBuilder workflowMode(String workflowMode) {
            this.workflowMode = workflowMode;
            return this;
        }
        
        /**
         * Build call for deleteProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePropertyCall(transitionId, key, workflowName, workflowMode, _callback);
        }


        /**
         * Execute deleteProperty request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePropertyWithHttpInfo(transitionId, key, workflowName, workflowMode);
        }

        /**
         * Execute deleteProperty request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePropertyWithHttpInfo(transitionId, key, workflowName, workflowMode);
        }

        /**
         * Execute deleteProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePropertyAsync(transitionId, key, workflowName, workflowMode, _callback);
        }
    }

    /**
     * Delete workflow transition property
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The name of the transition property to delete, also known as the name of the property. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @return DeletePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePropertyRequestBuilder deleteProperty(Long transitionId, String key, String workflowName) throws IllegalArgumentException {
        if (transitionId == null) throw new IllegalArgumentException("\"transitionId\" is required but got null");
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new DeletePropertyRequestBuilder(transitionId, key, workflowName);
    }
    private okhttp3.Call getPropertyByIdCall(Long transitionId, String workflowName, Boolean includeReservedKeys, String key, String workflowMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/transitions/{transitionId}/properties"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeReservedKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeReservedKeys", includeReservedKeys));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (workflowMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowMode", workflowMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyByIdValidateBeforeCall(Long transitionId, String workflowName, Boolean includeReservedKeys, String key, String workflowMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling getPropertyById(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling getPropertyById(Async)");
        }

        return getPropertyByIdCall(transitionId, workflowName, includeReservedKeys, key, workflowMode, _callback);

    }


    private ApiResponse<WorkflowTransitionProperty> getPropertyByIdWithHttpInfo(Long transitionId, String workflowName, Boolean includeReservedKeys, String key, String workflowMode) throws ApiException {
        okhttp3.Call localVarCall = getPropertyByIdValidateBeforeCall(transitionId, workflowName, includeReservedKeys, key, workflowMode, null);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyByIdAsync(Long transitionId, String workflowName, Boolean includeReservedKeys, String key, String workflowMode, final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyByIdValidateBeforeCall(transitionId, workflowName, includeReservedKeys, key, workflowMode, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPropertyByIdRequestBuilder {
        private final Long transitionId;
        private final String workflowName;
        private Boolean includeReservedKeys;
        private String key;
        private String workflowMode;

        private GetPropertyByIdRequestBuilder(Long transitionId, String workflowName) {
            this.transitionId = transitionId;
            this.workflowName = workflowName;
        }

        /**
         * Set includeReservedKeys
         * @param includeReservedKeys Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*. (optional, default to false)
         * @return GetPropertyByIdRequestBuilder
         */
        public GetPropertyByIdRequestBuilder includeReservedKeys(Boolean includeReservedKeys) {
            this.includeReservedKeys = includeReservedKeys;
            return this;
        }
        
        /**
         * Set key
         * @param key The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned. (optional)
         * @return GetPropertyByIdRequestBuilder
         */
        public GetPropertyByIdRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set workflowMode
         * @param workflowMode The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows. (optional, default to live)
         * @return GetPropertyByIdRequestBuilder
         */
        public GetPropertyByIdRequestBuilder workflowMode(String workflowMode) {
            this.workflowMode = workflowMode;
            return this;
        }
        
        /**
         * Build call for getPropertyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have admin permission </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyByIdCall(transitionId, workflowName, includeReservedKeys, key, workflowMode, _callback);
        }


        /**
         * Execute getPropertyById request
         * @return WorkflowTransitionProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have admin permission </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowTransitionProperty execute() throws ApiException {
            ApiResponse<WorkflowTransitionProperty> localVarResp = getPropertyByIdWithHttpInfo(transitionId, workflowName, includeReservedKeys, key, workflowMode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPropertyById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowTransitionProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have admin permission </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowTransitionProperty> executeWithHttpInfo() throws ApiException {
            return getPropertyByIdWithHttpInfo(transitionId, workflowName, includeReservedKeys, key, workflowMode);
        }

        /**
         * Execute getPropertyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have admin permission </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition or property is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {
            return getPropertyByIdAsync(transitionId, workflowName, includeReservedKeys, key, workflowMode, _callback);
        }
    }

    /**
     * Get workflow transition properties
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @return GetPropertyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have admin permission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow transition or property is not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPropertyByIdRequestBuilder getPropertyById(Long transitionId, String workflowName) throws IllegalArgumentException {
        if (transitionId == null) throw new IllegalArgumentException("\"transitionId\" is required but got null");
        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new GetPropertyByIdRequestBuilder(transitionId, workflowName);
    }
    private okhttp3.Call updatePropertyCall(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/transitions/{transitionId}/properties"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowName", workflowName));
        }

        if (workflowMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowMode", workflowMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyValidateBeforeCall(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling updateProperty(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateProperty(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling updateProperty(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateProperty(Async)");
        }

        return updatePropertyCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);

    }


    private ApiResponse<WorkflowTransitionProperty> updatePropertyWithHttpInfo(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(transitionId, key, workflowName, requestBody, workflowMode, null);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertyAsync(Long transitionId, String key, String workflowName, Map<String, Object> requestBody, String workflowMode, final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTransitionProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePropertyRequestBuilder {
        private final String value;
        private final Long transitionId;
        private final String key;
        private final String workflowName;
        private String id;
        private String key;
        private String workflowMode;

        private UpdatePropertyRequestBuilder(String value, Long transitionId, String key, String workflowName) {
            this.value = value;
            this.transitionId = transitionId;
            this.key = key;
            this.workflowName = workflowName;
        }

        /**
         * Set id
         * @param id The ID of the transition property. (optional)
         * @return UpdatePropertyRequestBuilder
         */
        public UpdatePropertyRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set key
         * @param key The key of the transition property. Also known as the name of the transition property. (optional)
         * @return UpdatePropertyRequestBuilder
         */
        public UpdatePropertyRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set workflowMode
         * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited. (optional)
         * @return UpdatePropertyRequestBuilder
         */
        public UpdatePropertyRequestBuilder workflowMode(String workflowMode) {
            this.workflowMode = workflowMode;
            return this;
        }
        
        /**
         * Build call for updateProperty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, attempting to update a property with its current value. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePropertyCall(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            requestBody.put("id", this.id);
            requestBody.put("key", this.key);
            requestBody.put("value", this.value);
            return requestBody;
        }

        /**
         * Execute updateProperty request
         * @return WorkflowTransitionProperty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, attempting to update a property with its current value. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowTransitionProperty execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<WorkflowTransitionProperty> localVarResp = updatePropertyWithHttpInfo(transitionId, key, workflowName, requestBody, workflowMode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProperty request with HTTP info returned
         * @return ApiResponse&lt;WorkflowTransitionProperty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, attempting to update a property with its current value. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowTransitionProperty> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePropertyWithHttpInfo(transitionId, key, workflowName, requestBody, workflowMode);
        }

        /**
         * Execute updateProperty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, attempting to update a property with its current value. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowTransitionProperty> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updatePropertyAsync(transitionId, key, workflowName, requestBody, workflowMode, _callback);
        }
    }

    /**
     * Update workflow transition property
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The key of the property being updated, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param requestBody  (required)
     * @return UpdatePropertyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returned if no changes were made by the request. For example, attempting to update a property with its current value. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have the necessary permission. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the workflow transition is not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertyRequestBuilder updateProperty(String value, Long transitionId, String key, String workflowName) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (transitionId == null) throw new IllegalArgumentException("\"transitionId\" is required but got null");
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        if (workflowName == null) throw new IllegalArgumentException("\"workflowName\" is required but got null");
            

        return new UpdatePropertyRequestBuilder(value, transitionId, key, workflowName);
    }
}
