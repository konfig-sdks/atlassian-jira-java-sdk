/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PageBeanWorkflowTransitionRules;
import java.util.Set;
import com.konfigthis.client.model.WorkflowTransitionRules;
import com.konfigthis.client.model.WorkflowTransitionRulesDetails;
import com.konfigthis.client.model.WorkflowTransitionRulesUpdate;
import com.konfigthis.client.model.WorkflowTransitionRulesUpdateErrors;
import com.konfigthis.client.model.WorkflowsWithTransitionRulesDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowTransitionRulesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowTransitionRulesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowTransitionRulesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteTransitionConfigurationsCall(WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowsWithTransitionRulesDetails;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/rule/config/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransitionConfigurationsValidateBeforeCall(WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowsWithTransitionRulesDetails' is set
        if (workflowsWithTransitionRulesDetails == null) {
            throw new ApiException("Missing the required parameter 'workflowsWithTransitionRulesDetails' when calling deleteTransitionConfigurations(Async)");
        }

        return deleteTransitionConfigurationsCall(workflowsWithTransitionRulesDetails, _callback);

    }


    private ApiResponse<WorkflowTransitionRulesUpdateErrors> deleteTransitionConfigurationsWithHttpInfo(WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails) throws ApiException {
        okhttp3.Call localVarCall = deleteTransitionConfigurationsValidateBeforeCall(workflowsWithTransitionRulesDetails, null);
        Type localVarReturnType = new TypeToken<WorkflowTransitionRulesUpdateErrors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTransitionConfigurationsAsync(WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails, final ApiCallback<WorkflowTransitionRulesUpdateErrors> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransitionConfigurationsValidateBeforeCall(workflowsWithTransitionRulesDetails, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTransitionRulesUpdateErrors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTransitionConfigurationsRequestBuilder {
        private final List<WorkflowTransitionRulesDetails> workflows;

        private DeleteTransitionConfigurationsRequestBuilder(List<WorkflowTransitionRulesDetails> workflows) {
            this.workflows = workflows;
        }

        /**
         * Build call for deleteTransitionConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails = buildBodyParams();
            return deleteTransitionConfigurationsCall(workflowsWithTransitionRulesDetails, _callback);
        }

        private WorkflowsWithTransitionRulesDetails buildBodyParams() {
            WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails = new WorkflowsWithTransitionRulesDetails();
            workflowsWithTransitionRulesDetails.workflows(this.workflows);
            return workflowsWithTransitionRulesDetails;
        }

        /**
         * Execute deleteTransitionConfigurations request
         * @return WorkflowTransitionRulesUpdateErrors
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowTransitionRulesUpdateErrors execute() throws ApiException {
            WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails = buildBodyParams();
            ApiResponse<WorkflowTransitionRulesUpdateErrors> localVarResp = deleteTransitionConfigurationsWithHttpInfo(workflowsWithTransitionRulesDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTransitionConfigurations request with HTTP info returned
         * @return ApiResponse&lt;WorkflowTransitionRulesUpdateErrors&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowTransitionRulesUpdateErrors> executeWithHttpInfo() throws ApiException {
            WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails = buildBodyParams();
            return deleteTransitionConfigurationsWithHttpInfo(workflowsWithTransitionRulesDetails);
        }

        /**
         * Execute deleteTransitionConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowTransitionRulesUpdateErrors> _callback) throws ApiException {
            WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails = buildBodyParams();
            return deleteTransitionConfigurationsAsync(workflowsWithTransitionRulesDetails, _callback);
        }
    }

    /**
     * Delete workflow transition rule configurations
     * Deletes workflow transition rules from one or more workflows. These rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling Connect app can be deleted.  **[Permissions](https://dac-static.atlassian.com) required:** Only Connect apps can use this operation.
     * @param workflowsWithTransitionRulesDetails  (required)
     * @return DeleteTransitionConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTransitionConfigurationsRequestBuilder deleteTransitionConfigurations(List<WorkflowTransitionRulesDetails> workflows) throws IllegalArgumentException {
        if (workflows == null) throw new IllegalArgumentException("\"workflows\" is required but got null");
        return new DeleteTransitionConfigurationsRequestBuilder(workflows);
    }
    private okhttp3.Call getConfigurationsCall(Set<String> types, Long startAt, Integer maxResults, Set<String> keys, Set<String> workflowNames, Set<String> withTags, Boolean draft, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/rule/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        if (workflowNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "workflowNames", workflowNames));
        }

        if (withTags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "withTags", withTags));
        }

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationsValidateBeforeCall(Set<String> types, Long startAt, Integer maxResults, Set<String> keys, Set<String> workflowNames, Set<String> withTags, Boolean draft, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling getConfigurations(Async)");
        }

        return getConfigurationsCall(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand, _callback);

    }


    private ApiResponse<PageBeanWorkflowTransitionRules> getConfigurationsWithHttpInfo(Set<String> types, Long startAt, Integer maxResults, Set<String> keys, Set<String> workflowNames, Set<String> withTags, Boolean draft, String expand) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationsValidateBeforeCall(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand, null);
        Type localVarReturnType = new TypeToken<PageBeanWorkflowTransitionRules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationsAsync(Set<String> types, Long startAt, Integer maxResults, Set<String> keys, Set<String> workflowNames, Set<String> withTags, Boolean draft, String expand, final ApiCallback<PageBeanWorkflowTransitionRules> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationsValidateBeforeCall(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand, _callback);
        Type localVarReturnType = new TypeToken<PageBeanWorkflowTransitionRules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigurationsRequestBuilder {
        private final Set<String> types;
        private Long startAt;
        private Integer maxResults;
        private Set<String> keys;
        private Set<String> workflowNames;
        private Set<String> withTags;
        private Boolean draft;
        private String expand;

        private GetConfigurationsRequestBuilder(Set<String> types) {
            this.types = types;
        }

        /**
         * Set startAt
         * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder startAt(Long startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set maxResults
         * @param maxResults The maximum number of items to return per page. (optional, default to 10)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }
        
        /**
         * Set keys
         * @param keys The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return. (optional)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder keys(Set<String> keys) {
            this.keys = keys;
            return this;
        }
        
        /**
         * Set workflowNames
         * @param workflowNames The list of workflow names to filter by. (optional)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder workflowNames(Set<String> workflowNames) {
            this.workflowNames = workflowNames;
            return this;
        }
        
        /**
         * Set withTags
         * @param withTags The list of &#x60;tags&#x60; to filter by. (optional)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder withTags(Set<String> withTags) {
            this.withTags = withTags;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Whether draft or published workflows are returned. If not provided, both workflow types are returned. (optional)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Use [expand](https://dac-static.atlassian.com) to include additional information in the response. This parameter accepts &#x60;transition&#x60;, which, for each rule, returns information about the transition the rule is assigned to. (optional)
         * @return GetConfigurationsRequestBuilder
         */
        public GetConfigurationsRequestBuilder expand(String expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any transition rule type is not supported. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationsCall(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand, _callback);
        }


        /**
         * Execute getConfigurations request
         * @return PageBeanWorkflowTransitionRules
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any transition rule type is not supported. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public PageBeanWorkflowTransitionRules execute() throws ApiException {
            ApiResponse<PageBeanWorkflowTransitionRules> localVarResp = getConfigurationsWithHttpInfo(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfigurations request with HTTP info returned
         * @return ApiResponse&lt;PageBeanWorkflowTransitionRules&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any transition rule type is not supported. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBeanWorkflowTransitionRules> executeWithHttpInfo() throws ApiException {
            return getConfigurationsWithHttpInfo(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand);
        }

        /**
         * Execute getConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Returned if any transition rule type is not supported. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBeanWorkflowTransitionRules> _callback) throws ApiException {
            return getConfigurationsAsync(types, startAt, maxResults, keys, workflowNames, withTags, draft, expand, _callback);
        }
    }

    /**
     * Get workflow transition rule configurations
     * Returns a [paginated](https://dac-static.atlassian.com) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:   *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).  *  matching one or more transition rule keys.  Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.  Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     * @param types The types of the transition rules to return. (required)
     * @return GetConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if any transition rule type is not supported. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigurationsRequestBuilder getConfigurations(Set<String> types) throws IllegalArgumentException {
        if (types == null) throw new IllegalArgumentException("\"types\" is required but got null");
        return new GetConfigurationsRequestBuilder(types);
    }
    private okhttp3.Call updateTransitionRuleConfigurationsCall(WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowTransitionRulesUpdate;

        // create path and map variables
        String localVarPath = "/rest/api/3/workflow/rule/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransitionRuleConfigurationsValidateBeforeCall(WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowTransitionRulesUpdate' is set
        if (workflowTransitionRulesUpdate == null) {
            throw new ApiException("Missing the required parameter 'workflowTransitionRulesUpdate' when calling updateTransitionRuleConfigurations(Async)");
        }

        return updateTransitionRuleConfigurationsCall(workflowTransitionRulesUpdate, _callback);

    }


    private ApiResponse<WorkflowTransitionRulesUpdateErrors> updateTransitionRuleConfigurationsWithHttpInfo(WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateTransitionRuleConfigurationsValidateBeforeCall(workflowTransitionRulesUpdate, null);
        Type localVarReturnType = new TypeToken<WorkflowTransitionRulesUpdateErrors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTransitionRuleConfigurationsAsync(WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate, final ApiCallback<WorkflowTransitionRulesUpdateErrors> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransitionRuleConfigurationsValidateBeforeCall(workflowTransitionRulesUpdate, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTransitionRulesUpdateErrors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTransitionRuleConfigurationsRequestBuilder {
        private final List<WorkflowTransitionRules> workflows;

        private UpdateTransitionRuleConfigurationsRequestBuilder(List<WorkflowTransitionRules> workflows) {
            this.workflows = workflows;
        }

        /**
         * Build call for updateTransitionRuleConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate = buildBodyParams();
            return updateTransitionRuleConfigurationsCall(workflowTransitionRulesUpdate, _callback);
        }

        private WorkflowTransitionRulesUpdate buildBodyParams() {
            WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate = new WorkflowTransitionRulesUpdate();
            workflowTransitionRulesUpdate.workflows(this.workflows);
            return workflowTransitionRulesUpdate;
        }

        /**
         * Execute updateTransitionRuleConfigurations request
         * @return WorkflowTransitionRulesUpdateErrors
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowTransitionRulesUpdateErrors execute() throws ApiException {
            WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate = buildBodyParams();
            ApiResponse<WorkflowTransitionRulesUpdateErrors> localVarResp = updateTransitionRuleConfigurationsWithHttpInfo(workflowTransitionRulesUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTransitionRuleConfigurations request with HTTP info returned
         * @return ApiResponse&lt;WorkflowTransitionRulesUpdateErrors&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowTransitionRulesUpdateErrors> executeWithHttpInfo() throws ApiException {
            WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate = buildBodyParams();
            return updateTransitionRuleConfigurationsWithHttpInfo(workflowTransitionRulesUpdate);
        }

        /**
         * Execute updateTransitionRuleConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowTransitionRulesUpdateErrors> _callback) throws ApiException {
            WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate = buildBodyParams();
            return updateTransitionRuleConfigurationsAsync(workflowTransitionRulesUpdate, _callback);
        }
    }

    /**
     * Update workflow transition rule configurations
     * Updates configuration of workflow transition rules. The following rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.  To assist with app migration, this operation can be used to:   *  Disable a rule.  *  Add a &#x60;tag&#x60;. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).  Rules are enabled if the &#x60;disabled&#x60; parameter is not provided.  **[Permissions](https://dac-static.atlassian.com) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     * @param workflowTransitionRulesUpdate  (required)
     * @return UpdateTransitionRuleConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Returned if we encounter a problem while trying to access the required data. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTransitionRuleConfigurationsRequestBuilder updateTransitionRuleConfigurations(List<WorkflowTransitionRules> workflows) throws IllegalArgumentException {
        if (workflows == null) throw new IllegalArgumentException("\"workflows\" is required but got null");
        return new UpdateTransitionRuleConfigurationsRequestBuilder(workflows);
    }
}
