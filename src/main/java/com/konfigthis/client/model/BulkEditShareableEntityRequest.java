/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BulkChangeOwnerDetails;
import com.konfigthis.client.model.PermissionDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details of a request to bulk edit shareable entity.
 */
@ApiModel(description = "Details of a request to bulk edit shareable entity.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BulkEditShareableEntityRequest {
  /**
   * Allowed action for bulk edit shareable entity
   */
  @JsonAdapter(ActionEnum.Adapter.class)
 public enum ActionEnum {
    CHANGEOWNER("changeOwner"),
    
    CHANGEPERMISSION("changePermission"),
    
    ADDPERMISSION("addPermission"),
    
    REMOVEPERMISSION("removePermission");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CHANGE_OWNER_DETAILS = "changeOwnerDetails";
  @SerializedName(SERIALIZED_NAME_CHANGE_OWNER_DETAILS)
  private BulkChangeOwnerDetails changeOwnerDetails;

  public static final String SERIALIZED_NAME_ENTITY_IDS = "entityIds";
  @SerializedName(SERIALIZED_NAME_ENTITY_IDS)
  private Set<Long> entityIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_EXTEND_ADMIN_PERMISSIONS = "extendAdminPermissions";
  @SerializedName(SERIALIZED_NAME_EXTEND_ADMIN_PERMISSIONS)
  private Boolean extendAdminPermissions;

  public static final String SERIALIZED_NAME_PERMISSION_DETAILS = "permissionDetails";
  @SerializedName(SERIALIZED_NAME_PERMISSION_DETAILS)
  private PermissionDetails permissionDetails;

  public BulkEditShareableEntityRequest() {
  }

  public BulkEditShareableEntityRequest action(ActionEnum action) {
    
    
    
    
    this.action = action;
    return this;
  }

   /**
   * Allowed action for bulk edit shareable entity
   * @return action
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Allowed action for bulk edit shareable entity")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    
    
    
    this.action = action;
  }


  public BulkEditShareableEntityRequest changeOwnerDetails(BulkChangeOwnerDetails changeOwnerDetails) {
    
    
    
    
    this.changeOwnerDetails = changeOwnerDetails;
    return this;
  }

   /**
   * The details of change owner action.
   * @return changeOwnerDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of change owner action.")

  public BulkChangeOwnerDetails getChangeOwnerDetails() {
    return changeOwnerDetails;
  }


  public void setChangeOwnerDetails(BulkChangeOwnerDetails changeOwnerDetails) {
    
    
    
    this.changeOwnerDetails = changeOwnerDetails;
  }


  public BulkEditShareableEntityRequest entityIds(Set<Long> entityIds) {
    
    
    
    
    this.entityIds = entityIds;
    return this;
  }

  public BulkEditShareableEntityRequest addEntityIdsItem(Long entityIdsItem) {
    this.entityIds.add(entityIdsItem);
    return this;
  }

   /**
   * The id list of shareable entities to be changed.
   * @return entityIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id list of shareable entities to be changed.")

  public Set<Long> getEntityIds() {
    return entityIds;
  }


  public void setEntityIds(Set<Long> entityIds) {
    
    
    
    this.entityIds = entityIds;
  }


  public BulkEditShareableEntityRequest extendAdminPermissions(Boolean extendAdminPermissions) {
    
    
    
    
    this.extendAdminPermissions = extendAdminPermissions;
    return this;
  }

   /**
   * Whether the actions are executed by users with Administer Jira global permission.
   * @return extendAdminPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the actions are executed by users with Administer Jira global permission.")

  public Boolean getExtendAdminPermissions() {
    return extendAdminPermissions;
  }


  public void setExtendAdminPermissions(Boolean extendAdminPermissions) {
    
    
    
    this.extendAdminPermissions = extendAdminPermissions;
  }


  public BulkEditShareableEntityRequest permissionDetails(PermissionDetails permissionDetails) {
    
    
    
    
    this.permissionDetails = permissionDetails;
    return this;
  }

   /**
   * The permission details to be changed.
   * @return permissionDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The permission details to be changed.")

  public PermissionDetails getPermissionDetails() {
    return permissionDetails;
  }


  public void setPermissionDetails(PermissionDetails permissionDetails) {
    
    
    
    this.permissionDetails = permissionDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BulkEditShareableEntityRequest instance itself
   */
  public BulkEditShareableEntityRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkEditShareableEntityRequest bulkEditShareableEntityRequest = (BulkEditShareableEntityRequest) o;
    return Objects.equals(this.action, bulkEditShareableEntityRequest.action) &&
        Objects.equals(this.changeOwnerDetails, bulkEditShareableEntityRequest.changeOwnerDetails) &&
        Objects.equals(this.entityIds, bulkEditShareableEntityRequest.entityIds) &&
        Objects.equals(this.extendAdminPermissions, bulkEditShareableEntityRequest.extendAdminPermissions) &&
        Objects.equals(this.permissionDetails, bulkEditShareableEntityRequest.permissionDetails)&&
        Objects.equals(this.additionalProperties, bulkEditShareableEntityRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, changeOwnerDetails, entityIds, extendAdminPermissions, permissionDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkEditShareableEntityRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    changeOwnerDetails: ").append(toIndentedString(changeOwnerDetails)).append("\n");
    sb.append("    entityIds: ").append(toIndentedString(entityIds)).append("\n");
    sb.append("    extendAdminPermissions: ").append(toIndentedString(extendAdminPermissions)).append("\n");
    sb.append("    permissionDetails: ").append(toIndentedString(permissionDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("changeOwnerDetails");
    openapiFields.add("entityIds");
    openapiFields.add("extendAdminPermissions");
    openapiFields.add("permissionDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("entityIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BulkEditShareableEntityRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BulkEditShareableEntityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkEditShareableEntityRequest is not found in the empty JSON string", BulkEditShareableEntityRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkEditShareableEntityRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `changeOwnerDetails`
      if (jsonObj.get("changeOwnerDetails") != null && !jsonObj.get("changeOwnerDetails").isJsonNull()) {
        BulkChangeOwnerDetails.validateJsonObject(jsonObj.getAsJsonObject("changeOwnerDetails"));
      }
      // ensure the required json array is present
      if (jsonObj.get("entityIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("entityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityIds` to be an array in the JSON string but got `%s`", jsonObj.get("entityIds").toString()));
      }
      // validate the optional field `permissionDetails`
      if (jsonObj.get("permissionDetails") != null && !jsonObj.get("permissionDetails").isJsonNull()) {
        PermissionDetails.validateJsonObject(jsonObj.getAsJsonObject("permissionDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkEditShareableEntityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkEditShareableEntityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkEditShareableEntityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkEditShareableEntityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkEditShareableEntityRequest>() {
           @Override
           public void write(JsonWriter out, BulkEditShareableEntityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkEditShareableEntityRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BulkEditShareableEntityRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkEditShareableEntityRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkEditShareableEntityRequest
  * @throws IOException if the JSON string is invalid with respect to BulkEditShareableEntityRequest
  */
  public static BulkEditShareableEntityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkEditShareableEntityRequest.class);
  }

 /**
  * Convert an instance of BulkEditShareableEntityRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

