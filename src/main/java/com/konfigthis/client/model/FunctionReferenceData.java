/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details of functions that can be used in advanced searches.
 */
@ApiModel(description = "Details of functions that can be used in advanced searches.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FunctionReferenceData {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Whether the function can take a list of arguments.
   */
  @JsonAdapter(IsListEnum.Adapter.class)
 public enum IsListEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    IsListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsListEnum fromValue(String value) {
      for (IsListEnum b : IsListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_LIST = "isList";
  @SerializedName(SERIALIZED_NAME_IS_LIST)
  private IsListEnum isList;

  /**
   * Whether the function supports both single and list value operators.
   */
  @JsonAdapter(SupportsListAndSingleValueOperatorsEnum.Adapter.class)
 public enum SupportsListAndSingleValueOperatorsEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    SupportsListAndSingleValueOperatorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportsListAndSingleValueOperatorsEnum fromValue(String value) {
      for (SupportsListAndSingleValueOperatorsEnum b : SupportsListAndSingleValueOperatorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportsListAndSingleValueOperatorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportsListAndSingleValueOperatorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportsListAndSingleValueOperatorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportsListAndSingleValueOperatorsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTS_LIST_AND_SINGLE_VALUE_OPERATORS = "supportsListAndSingleValueOperators";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LIST_AND_SINGLE_VALUE_OPERATORS)
  private SupportsListAndSingleValueOperatorsEnum supportsListAndSingleValueOperators;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = null;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public FunctionReferenceData() {
  }

  public FunctionReferenceData displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the function.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name of the function.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public FunctionReferenceData isList(IsListEnum isList) {
    
    
    
    
    this.isList = isList;
    return this;
  }

   /**
   * Whether the function can take a list of arguments.
   * @return isList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the function can take a list of arguments.")

  public IsListEnum getIsList() {
    return isList;
  }


  public void setIsList(IsListEnum isList) {
    
    
    
    this.isList = isList;
  }


  public FunctionReferenceData supportsListAndSingleValueOperators(SupportsListAndSingleValueOperatorsEnum supportsListAndSingleValueOperators) {
    
    
    
    
    this.supportsListAndSingleValueOperators = supportsListAndSingleValueOperators;
    return this;
  }

   /**
   * Whether the function supports both single and list value operators.
   * @return supportsListAndSingleValueOperators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the function supports both single and list value operators.")

  public SupportsListAndSingleValueOperatorsEnum getSupportsListAndSingleValueOperators() {
    return supportsListAndSingleValueOperators;
  }


  public void setSupportsListAndSingleValueOperators(SupportsListAndSingleValueOperatorsEnum supportsListAndSingleValueOperators) {
    
    
    
    this.supportsListAndSingleValueOperators = supportsListAndSingleValueOperators;
  }


  public FunctionReferenceData types(List<String> types) {
    
    
    
    
    this.types = types;
    return this;
  }

  public FunctionReferenceData addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * The data types returned by the function.
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The data types returned by the function.")

  public List<String> getTypes() {
    return types;
  }


  public void setTypes(List<String> types) {
    
    
    
    this.types = types;
  }


  public FunctionReferenceData value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * The function identifier.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The function identifier.")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FunctionReferenceData instance itself
   */
  public FunctionReferenceData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionReferenceData functionReferenceData = (FunctionReferenceData) o;
    return Objects.equals(this.displayName, functionReferenceData.displayName) &&
        Objects.equals(this.isList, functionReferenceData.isList) &&
        Objects.equals(this.supportsListAndSingleValueOperators, functionReferenceData.supportsListAndSingleValueOperators) &&
        Objects.equals(this.types, functionReferenceData.types) &&
        Objects.equals(this.value, functionReferenceData.value)&&
        Objects.equals(this.additionalProperties, functionReferenceData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, isList, supportsListAndSingleValueOperators, types, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionReferenceData {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isList: ").append(toIndentedString(isList)).append("\n");
    sb.append("    supportsListAndSingleValueOperators: ").append(toIndentedString(supportsListAndSingleValueOperators)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("isList");
    openapiFields.add("supportsListAndSingleValueOperators");
    openapiFields.add("types");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FunctionReferenceData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FunctionReferenceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FunctionReferenceData is not found in the empty JSON string", FunctionReferenceData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("isList") != null && !jsonObj.get("isList").isJsonNull()) && !jsonObj.get("isList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isList").toString()));
      }
      if ((jsonObj.get("supportsListAndSingleValueOperators") != null && !jsonObj.get("supportsListAndSingleValueOperators").isJsonNull()) && !jsonObj.get("supportsListAndSingleValueOperators").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportsListAndSingleValueOperators` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportsListAndSingleValueOperators").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FunctionReferenceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FunctionReferenceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FunctionReferenceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FunctionReferenceData.class));

       return (TypeAdapter<T>) new TypeAdapter<FunctionReferenceData>() {
           @Override
           public void write(JsonWriter out, FunctionReferenceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FunctionReferenceData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FunctionReferenceData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FunctionReferenceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FunctionReferenceData
  * @throws IOException if the JSON string is invalid with respect to FunctionReferenceData
  */
  public static FunctionReferenceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FunctionReferenceData.class);
  }

 /**
  * Convert an instance of FunctionReferenceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

