/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.IncludedFields;
import com.konfigthis.client.model.IssueTransition;
import com.konfigthis.client.model.IssueUpdateMetadata;
import com.konfigthis.client.model.JsonTypeBean;
import com.konfigthis.client.model.Operations;
import com.konfigthis.client.model.PageOfChangelogs;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details about an issue.
 */
@ApiModel(description = "Details about an issue.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IssueBean {
  public static final String SERIALIZED_NAME_CHANGELOG = "changelog";
  @SerializedName(SERIALIZED_NAME_CHANGELOG)
  private PageOfChangelogs changelog;

  public static final String SERIALIZED_NAME_EDITMETA = "editmeta";
  @SerializedName(SERIALIZED_NAME_EDITMETA)
  private IssueUpdateMetadata editmeta;

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private String expand;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, Object> fields = null;

  public static final String SERIALIZED_NAME_FIELDS_TO_INCLUDE = "fieldsToInclude";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_INCLUDE)
  private IncludedFields fieldsToInclude;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private Map<String, String> names = null;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private Operations operations;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = null;

  public static final String SERIALIZED_NAME_RENDERED_FIELDS = "renderedFields";
  @SerializedName(SERIALIZED_NAME_RENDERED_FIELDS)
  private Map<String, Object> renderedFields = null;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private Map<String, JsonTypeBean> schema = null;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private URI self;

  public static final String SERIALIZED_NAME_TRANSITIONS = "transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  private List<IssueTransition> transitions = null;

  public static final String SERIALIZED_NAME_VERSIONED_REPRESENTATIONS = "versionedRepresentations";
  @SerializedName(SERIALIZED_NAME_VERSIONED_REPRESENTATIONS)
  private Map<String, Map<String, Object>> versionedRepresentations = null;

  public IssueBean() {
  }

  
  public IssueBean(
     String expand, 
     String id, 
     String key, 
     Map<String, String> names, 
     Map<String, Object> properties, 
     Map<String, Object> renderedFields, 
     Map<String, JsonTypeBean> schema, 
     URI self, 
     List<IssueTransition> transitions, 
     Map<String, Map<String, Object>> versionedRepresentations
  ) {
    this();
    this.expand = expand;
    this.id = id;
    this.key = key;
    this.names = names;
    this.properties = properties;
    this.renderedFields = renderedFields;
    this.schema = schema;
    this.self = self;
    this.transitions = transitions;
    this.versionedRepresentations = versionedRepresentations;
  }

  public IssueBean changelog(PageOfChangelogs changelog) {
    
    
    
    
    this.changelog = changelog;
    return this;
  }

   /**
   * Details of changelogs associated with the issue.
   * @return changelog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of changelogs associated with the issue.")

  public PageOfChangelogs getChangelog() {
    return changelog;
  }


  public void setChangelog(PageOfChangelogs changelog) {
    
    
    
    this.changelog = changelog;
  }


  public IssueBean editmeta(IssueUpdateMetadata editmeta) {
    
    
    
    
    this.editmeta = editmeta;
    return this;
  }

   /**
   * The metadata for the fields on the issue that can be amended.
   * @return editmeta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The metadata for the fields on the issue that can be amended.")

  public IssueUpdateMetadata getEditmeta() {
    return editmeta;
  }


  public void setEditmeta(IssueUpdateMetadata editmeta) {
    
    
    
    this.editmeta = editmeta;
  }


   /**
   * Expand options that include additional issue details in the response.
   * @return expand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expand options that include additional issue details in the response.")

  public String getExpand() {
    return expand;
  }




  public IssueBean fields(Map<String, Object> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public IssueBean putFieldsItem(String key, Object fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getFields() {
    return fields;
  }


  public void setFields(Map<String, Object> fields) {
    
    
    
    this.fields = fields;
  }


  public IssueBean fieldsToInclude(IncludedFields fieldsToInclude) {
    
    
    
    
    this.fieldsToInclude = fieldsToInclude;
    return this;
  }

   /**
   * Get fieldsToInclude
   * @return fieldsToInclude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IncludedFields getFieldsToInclude() {
    return fieldsToInclude;
  }


  public void setFieldsToInclude(IncludedFields fieldsToInclude) {
    
    
    
    this.fieldsToInclude = fieldsToInclude;
  }


   /**
   * The ID of the issue.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the issue.")

  public String getId() {
    return id;
  }




   /**
   * The key of the issue.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the issue.")

  public String getKey() {
    return key;
  }




   /**
   * The ID and name of each field present on the issue.
   * @return names
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID and name of each field present on the issue.")

  public Map<String, String> getNames() {
    return names;
  }




  public IssueBean operations(Operations operations) {
    
    
    
    
    this.operations = operations;
    return this;
  }

   /**
   * The operations that can be performed on the issue.
   * @return operations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The operations that can be performed on the issue.")

  public Operations getOperations() {
    return operations;
  }


  public void setOperations(Operations operations) {
    
    
    
    this.operations = operations;
  }


   /**
   * Details of the issue properties identified in the request.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the issue properties identified in the request.")

  public Map<String, Object> getProperties() {
    return properties;
  }




   /**
   * The rendered value of each field present on the issue.
   * @return renderedFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rendered value of each field present on the issue.")

  public Map<String, Object> getRenderedFields() {
    return renderedFields;
  }




   /**
   * The schema describing each field present on the issue.
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The schema describing each field present on the issue.")

  public Map<String, JsonTypeBean> getSchema() {
    return schema;
  }




   /**
   * The URL of the issue details.
   * @return self
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the issue details.")

  public URI getSelf() {
    return self;
  }




   /**
   * The transitions that can be performed on the issue.
   * @return transitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The transitions that can be performed on the issue.")

  public List<IssueTransition> getTransitions() {
    return transitions;
  }




   /**
   * The versions of each field on the issue.
   * @return versionedRepresentations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The versions of each field on the issue.")

  public Map<String, Map<String, Object>> getVersionedRepresentations() {
    return versionedRepresentations;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IssueBean instance itself
   */
  public IssueBean putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBean issueBean = (IssueBean) o;
    return Objects.equals(this.changelog, issueBean.changelog) &&
        Objects.equals(this.editmeta, issueBean.editmeta) &&
        Objects.equals(this.expand, issueBean.expand) &&
        Objects.equals(this.fields, issueBean.fields) &&
        Objects.equals(this.fieldsToInclude, issueBean.fieldsToInclude) &&
        Objects.equals(this.id, issueBean.id) &&
        Objects.equals(this.key, issueBean.key) &&
        Objects.equals(this.names, issueBean.names) &&
        Objects.equals(this.operations, issueBean.operations) &&
        Objects.equals(this.properties, issueBean.properties) &&
        Objects.equals(this.renderedFields, issueBean.renderedFields) &&
        Objects.equals(this.schema, issueBean.schema) &&
        Objects.equals(this.self, issueBean.self) &&
        Objects.equals(this.transitions, issueBean.transitions) &&
        Objects.equals(this.versionedRepresentations, issueBean.versionedRepresentations)&&
        Objects.equals(this.additionalProperties, issueBean.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changelog, editmeta, expand, fields, fieldsToInclude, id, key, names, operations, properties, renderedFields, schema, self, transitions, versionedRepresentations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBean {\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    editmeta: ").append(toIndentedString(editmeta)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    fieldsToInclude: ").append(toIndentedString(fieldsToInclude)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    renderedFields: ").append(toIndentedString(renderedFields)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    versionedRepresentations: ").append(toIndentedString(versionedRepresentations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changelog");
    openapiFields.add("editmeta");
    openapiFields.add("expand");
    openapiFields.add("fields");
    openapiFields.add("fieldsToInclude");
    openapiFields.add("id");
    openapiFields.add("key");
    openapiFields.add("names");
    openapiFields.add("operations");
    openapiFields.add("properties");
    openapiFields.add("renderedFields");
    openapiFields.add("schema");
    openapiFields.add("self");
    openapiFields.add("transitions");
    openapiFields.add("versionedRepresentations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IssueBean
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IssueBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueBean is not found in the empty JSON string", IssueBean.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `changelog`
      if (jsonObj.get("changelog") != null && !jsonObj.get("changelog").isJsonNull()) {
        PageOfChangelogs.validateJsonObject(jsonObj.getAsJsonObject("changelog"));
      }
      // validate the optional field `editmeta`
      if (jsonObj.get("editmeta") != null && !jsonObj.get("editmeta").isJsonNull()) {
        IssueUpdateMetadata.validateJsonObject(jsonObj.getAsJsonObject("editmeta"));
      }
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
      // validate the optional field `fieldsToInclude`
      if (jsonObj.get("fieldsToInclude") != null && !jsonObj.get("fieldsToInclude").isJsonNull()) {
        IncludedFields.validateJsonObject(jsonObj.getAsJsonObject("fieldsToInclude"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `operations`
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) {
        Operations.validateJsonObject(jsonObj.getAsJsonObject("operations"));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if (jsonObj.get("transitions") != null && !jsonObj.get("transitions").isJsonNull()) {
        JsonArray jsonArraytransitions = jsonObj.getAsJsonArray("transitions");
        if (jsonArraytransitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitions` to be an array in the JSON string but got `%s`", jsonObj.get("transitions").toString()));
          }

          // validate the optional field `transitions` (array)
          for (int i = 0; i < jsonArraytransitions.size(); i++) {
            IssueTransition.validateJsonObject(jsonArraytransitions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueBean.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueBean>() {
           @Override
           public void write(JsonWriter out, IssueBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueBean read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IssueBean instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IssueBean given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IssueBean
  * @throws IOException if the JSON string is invalid with respect to IssueBean
  */
  public static IssueBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueBean.class);
  }

 /**
  * Convert an instance of IssueBean to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

