/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Jql function precomputation.
 */
@ApiModel(description = "Jql function precomputation.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JqlFunctionPrecomputationBean {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FUNCTION_KEY = "functionKey";
  @SerializedName(SERIALIZED_NAME_FUNCTION_KEY)
  private String functionKey;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private OffsetDateTime used;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public JqlFunctionPrecomputationBean() {
  }

  
  public JqlFunctionPrecomputationBean(
     List<String> arguments, 
     OffsetDateTime created, 
     String error, 
     String field, 
     String functionKey, 
     String functionName, 
     String id, 
     String operator, 
     OffsetDateTime updated, 
     OffsetDateTime used, 
     String value
  ) {
    this();
    this.arguments = arguments;
    this.created = created;
    this.error = error;
    this.field = field;
    this.functionKey = functionKey;
    this.functionName = functionName;
    this.id = id;
    this.operator = operator;
    this.updated = updated;
    this.used = used;
    this.value = value;
  }

   /**
   * The list of arguments function was invoked with.
   * @return arguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of arguments function was invoked with.")

  public List<String> getArguments() {
    return arguments;
  }




   /**
   * The timestamp of the precomputation creation.
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of the precomputation creation.")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * The error message to be displayed to the user.
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The error message to be displayed to the user.")

  public String getError() {
    return error;
  }




   /**
   * The field the function was executed against.
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The field the function was executed against.")

  public String getField() {
    return field;
  }




   /**
   * The function key.
   * @return functionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The function key.")

  public String getFunctionKey() {
    return functionKey;
  }




   /**
   * The name of the function.
   * @return functionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the function.")

  public String getFunctionName() {
    return functionName;
  }




   /**
   * The id of the precomputation.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the precomputation.")

  public String getId() {
    return id;
  }




   /**
   * The operator in context of which function was executed.
   * @return operator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The operator in context of which function was executed.")

  public String getOperator() {
    return operator;
  }




   /**
   * The timestamp of the precomputation last update.
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of the precomputation last update.")

  public OffsetDateTime getUpdated() {
    return updated;
  }




   /**
   * The timestamp of the precomputation last usage.
   * @return used
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of the precomputation last usage.")

  public OffsetDateTime getUsed() {
    return used;
  }




   /**
   * The JQL fragment stored as the precomputation.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The JQL fragment stored as the precomputation.")

  public String getValue() {
    return value;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JqlFunctionPrecomputationBean instance itself
   */
  public JqlFunctionPrecomputationBean putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JqlFunctionPrecomputationBean jqlFunctionPrecomputationBean = (JqlFunctionPrecomputationBean) o;
    return Objects.equals(this.arguments, jqlFunctionPrecomputationBean.arguments) &&
        Objects.equals(this.created, jqlFunctionPrecomputationBean.created) &&
        Objects.equals(this.error, jqlFunctionPrecomputationBean.error) &&
        Objects.equals(this.field, jqlFunctionPrecomputationBean.field) &&
        Objects.equals(this.functionKey, jqlFunctionPrecomputationBean.functionKey) &&
        Objects.equals(this.functionName, jqlFunctionPrecomputationBean.functionName) &&
        Objects.equals(this.id, jqlFunctionPrecomputationBean.id) &&
        Objects.equals(this.operator, jqlFunctionPrecomputationBean.operator) &&
        Objects.equals(this.updated, jqlFunctionPrecomputationBean.updated) &&
        Objects.equals(this.used, jqlFunctionPrecomputationBean.used) &&
        Objects.equals(this.value, jqlFunctionPrecomputationBean.value)&&
        Objects.equals(this.additionalProperties, jqlFunctionPrecomputationBean.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, created, error, field, functionKey, functionName, id, operator, updated, used, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JqlFunctionPrecomputationBean {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    functionKey: ").append(toIndentedString(functionKey)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("created");
    openapiFields.add("error");
    openapiFields.add("field");
    openapiFields.add("functionKey");
    openapiFields.add("functionName");
    openapiFields.add("id");
    openapiFields.add("operator");
    openapiFields.add("updated");
    openapiFields.add("used");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JqlFunctionPrecomputationBean
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JqlFunctionPrecomputationBean.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JqlFunctionPrecomputationBean is not found in the empty JSON string", JqlFunctionPrecomputationBean.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("functionKey") != null && !jsonObj.get("functionKey").isJsonNull()) && !jsonObj.get("functionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionKey").toString()));
      }
      if ((jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) && !jsonObj.get("functionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JqlFunctionPrecomputationBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JqlFunctionPrecomputationBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JqlFunctionPrecomputationBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JqlFunctionPrecomputationBean.class));

       return (TypeAdapter<T>) new TypeAdapter<JqlFunctionPrecomputationBean>() {
           @Override
           public void write(JsonWriter out, JqlFunctionPrecomputationBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JqlFunctionPrecomputationBean read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JqlFunctionPrecomputationBean instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JqlFunctionPrecomputationBean given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JqlFunctionPrecomputationBean
  * @throws IOException if the JSON string is invalid with respect to JqlFunctionPrecomputationBean
  */
  public static JqlFunctionPrecomputationBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JqlFunctionPrecomputationBean.class);
  }

 /**
  * Convert an instance of JqlFunctionPrecomputationBean to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

