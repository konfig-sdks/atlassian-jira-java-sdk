/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WorkflowAssociationStatusMapping;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
 */
@ApiModel(description = "The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MappingsByWorkflow {
  public static final String SERIALIZED_NAME_NEW_WORKFLOW_ID = "newWorkflowId";
  @SerializedName(SERIALIZED_NAME_NEW_WORKFLOW_ID)
  private String newWorkflowId;

  public static final String SERIALIZED_NAME_OLD_WORKFLOW_ID = "oldWorkflowId";
  @SerializedName(SERIALIZED_NAME_OLD_WORKFLOW_ID)
  private String oldWorkflowId;

  public static final String SERIALIZED_NAME_STATUS_MAPPINGS = "statusMappings";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS)
  private List<WorkflowAssociationStatusMapping> statusMappings = new ArrayList<>();

  public MappingsByWorkflow() {
  }

  public MappingsByWorkflow newWorkflowId(String newWorkflowId) {
    
    
    
    
    this.newWorkflowId = newWorkflowId;
    return this;
  }

   /**
   * The ID of the new workflow.
   * @return newWorkflowId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the new workflow.")

  public String getNewWorkflowId() {
    return newWorkflowId;
  }


  public void setNewWorkflowId(String newWorkflowId) {
    
    
    
    this.newWorkflowId = newWorkflowId;
  }


  public MappingsByWorkflow oldWorkflowId(String oldWorkflowId) {
    
    
    
    
    this.oldWorkflowId = oldWorkflowId;
    return this;
  }

   /**
   * The ID of the old workflow.
   * @return oldWorkflowId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the old workflow.")

  public String getOldWorkflowId() {
    return oldWorkflowId;
  }


  public void setOldWorkflowId(String oldWorkflowId) {
    
    
    
    this.oldWorkflowId = oldWorkflowId;
  }


  public MappingsByWorkflow statusMappings(List<WorkflowAssociationStatusMapping> statusMappings) {
    
    
    
    
    this.statusMappings = statusMappings;
    return this;
  }

  public MappingsByWorkflow addStatusMappingsItem(WorkflowAssociationStatusMapping statusMappingsItem) {
    this.statusMappings.add(statusMappingsItem);
    return this;
  }

   /**
   * The list of status mappings.
   * @return statusMappings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of status mappings.")

  public List<WorkflowAssociationStatusMapping> getStatusMappings() {
    return statusMappings;
  }


  public void setStatusMappings(List<WorkflowAssociationStatusMapping> statusMappings) {
    
    
    
    this.statusMappings = statusMappings;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MappingsByWorkflow instance itself
   */
  public MappingsByWorkflow putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingsByWorkflow mappingsByWorkflow = (MappingsByWorkflow) o;
    return Objects.equals(this.newWorkflowId, mappingsByWorkflow.newWorkflowId) &&
        Objects.equals(this.oldWorkflowId, mappingsByWorkflow.oldWorkflowId) &&
        Objects.equals(this.statusMappings, mappingsByWorkflow.statusMappings)&&
        Objects.equals(this.additionalProperties, mappingsByWorkflow.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newWorkflowId, oldWorkflowId, statusMappings, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingsByWorkflow {\n");
    sb.append("    newWorkflowId: ").append(toIndentedString(newWorkflowId)).append("\n");
    sb.append("    oldWorkflowId: ").append(toIndentedString(oldWorkflowId)).append("\n");
    sb.append("    statusMappings: ").append(toIndentedString(statusMappings)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newWorkflowId");
    openapiFields.add("oldWorkflowId");
    openapiFields.add("statusMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("newWorkflowId");
    openapiRequiredFields.add("oldWorkflowId");
    openapiRequiredFields.add("statusMappings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MappingsByWorkflow
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MappingsByWorkflow.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingsByWorkflow is not found in the empty JSON string", MappingsByWorkflow.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MappingsByWorkflow.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("newWorkflowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newWorkflowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newWorkflowId").toString()));
      }
      if (!jsonObj.get("oldWorkflowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldWorkflowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldWorkflowId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("statusMappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMappings` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappings").toString()));
      }

      JsonArray jsonArraystatusMappings = jsonObj.getAsJsonArray("statusMappings");
      // validate the required field `statusMappings` (array)
      for (int i = 0; i < jsonArraystatusMappings.size(); i++) {
        WorkflowAssociationStatusMapping.validateJsonObject(jsonArraystatusMappings.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingsByWorkflow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingsByWorkflow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingsByWorkflow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingsByWorkflow.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingsByWorkflow>() {
           @Override
           public void write(JsonWriter out, MappingsByWorkflow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingsByWorkflow read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MappingsByWorkflow instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MappingsByWorkflow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MappingsByWorkflow
  * @throws IOException if the JSON string is invalid with respect to MappingsByWorkflow
  */
  public static MappingsByWorkflow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingsByWorkflow.class);
  }

 /**
  * Convert an instance of MappingsByWorkflow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

