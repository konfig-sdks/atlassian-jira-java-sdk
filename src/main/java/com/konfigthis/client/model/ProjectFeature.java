/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details of a project feature.
 */
@ApiModel(description = "Details of a project feature.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectFeature {
  public static final String SERIALIZED_NAME_FEATURE = "feature";
  @SerializedName(SERIALIZED_NAME_FEATURE)
  private String feature;

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  public static final String SERIALIZED_NAME_LOCALISED_DESCRIPTION = "localisedDescription";
  @SerializedName(SERIALIZED_NAME_LOCALISED_DESCRIPTION)
  private String localisedDescription;

  public static final String SERIALIZED_NAME_LOCALISED_NAME = "localisedName";
  @SerializedName(SERIALIZED_NAME_LOCALISED_NAME)
  private String localisedName;

  public static final String SERIALIZED_NAME_PREREQUISITES = "prerequisites";
  @SerializedName(SERIALIZED_NAME_PREREQUISITES)
  private List<String> prerequisites = null;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  /**
   * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
   */
  @JsonAdapter(StateEnum.Adapter.class)
 public enum StateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    COMING_SOON("COMING_SOON");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TOGGLE_LOCKED = "toggleLocked";
  @SerializedName(SERIALIZED_NAME_TOGGLE_LOCKED)
  private Boolean toggleLocked;

  public ProjectFeature() {
  }

  public ProjectFeature feature(String feature) {
    
    
    
    
    this.feature = feature;
    return this;
  }

   /**
   * The key of the feature.
   * @return feature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the feature.")

  public String getFeature() {
    return feature;
  }


  public void setFeature(String feature) {
    
    
    
    this.feature = feature;
  }


  public ProjectFeature imageUri(String imageUri) {
    
    
    
    
    this.imageUri = imageUri;
    return this;
  }

   /**
   * URI for the image representing the feature.
   * @return imageUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URI for the image representing the feature.")

  public String getImageUri() {
    return imageUri;
  }


  public void setImageUri(String imageUri) {
    
    
    
    this.imageUri = imageUri;
  }


  public ProjectFeature localisedDescription(String localisedDescription) {
    
    
    
    
    this.localisedDescription = localisedDescription;
    return this;
  }

   /**
   * Localized display description for the feature.
   * @return localisedDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Localized display description for the feature.")

  public String getLocalisedDescription() {
    return localisedDescription;
  }


  public void setLocalisedDescription(String localisedDescription) {
    
    
    
    this.localisedDescription = localisedDescription;
  }


  public ProjectFeature localisedName(String localisedName) {
    
    
    
    
    this.localisedName = localisedName;
    return this;
  }

   /**
   * Localized display name for the feature.
   * @return localisedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Localized display name for the feature.")

  public String getLocalisedName() {
    return localisedName;
  }


  public void setLocalisedName(String localisedName) {
    
    
    
    this.localisedName = localisedName;
  }


  public ProjectFeature prerequisites(List<String> prerequisites) {
    
    
    
    
    this.prerequisites = prerequisites;
    return this;
  }

  public ProjectFeature addPrerequisitesItem(String prerequisitesItem) {
    if (this.prerequisites == null) {
      this.prerequisites = new ArrayList<>();
    }
    this.prerequisites.add(prerequisitesItem);
    return this;
  }

   /**
   * List of keys of the features required to enable the feature.
   * @return prerequisites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of keys of the features required to enable the feature.")

  public List<String> getPrerequisites() {
    return prerequisites;
  }


  public void setPrerequisites(List<String> prerequisites) {
    
    
    
    this.prerequisites = prerequisites;
  }


  public ProjectFeature projectId(Long projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * The ID of the project.
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the project.")

  public Long getProjectId() {
    return projectId;
  }


  public void setProjectId(Long projectId) {
    
    
    
    this.projectId = projectId;
  }


  public ProjectFeature state(StateEnum state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    
    
    
    this.state = state;
  }


  public ProjectFeature toggleLocked(Boolean toggleLocked) {
    
    
    
    
    this.toggleLocked = toggleLocked;
    return this;
  }

   /**
   * Whether the state of the feature can be updated.
   * @return toggleLocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the state of the feature can be updated.")

  public Boolean getToggleLocked() {
    return toggleLocked;
  }


  public void setToggleLocked(Boolean toggleLocked) {
    
    
    
    this.toggleLocked = toggleLocked;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectFeature instance itself
   */
  public ProjectFeature putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeature projectFeature = (ProjectFeature) o;
    return Objects.equals(this.feature, projectFeature.feature) &&
        Objects.equals(this.imageUri, projectFeature.imageUri) &&
        Objects.equals(this.localisedDescription, projectFeature.localisedDescription) &&
        Objects.equals(this.localisedName, projectFeature.localisedName) &&
        Objects.equals(this.prerequisites, projectFeature.prerequisites) &&
        Objects.equals(this.projectId, projectFeature.projectId) &&
        Objects.equals(this.state, projectFeature.state) &&
        Objects.equals(this.toggleLocked, projectFeature.toggleLocked)&&
        Objects.equals(this.additionalProperties, projectFeature.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feature, imageUri, localisedDescription, localisedName, prerequisites, projectId, state, toggleLocked, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeature {\n");
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    localisedDescription: ").append(toIndentedString(localisedDescription)).append("\n");
    sb.append("    localisedName: ").append(toIndentedString(localisedName)).append("\n");
    sb.append("    prerequisites: ").append(toIndentedString(prerequisites)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    toggleLocked: ").append(toIndentedString(toggleLocked)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feature");
    openapiFields.add("imageUri");
    openapiFields.add("localisedDescription");
    openapiFields.add("localisedName");
    openapiFields.add("prerequisites");
    openapiFields.add("projectId");
    openapiFields.add("state");
    openapiFields.add("toggleLocked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectFeature
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectFeature.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectFeature is not found in the empty JSON string", ProjectFeature.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("feature") != null && !jsonObj.get("feature").isJsonNull()) && !jsonObj.get("feature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feature").toString()));
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      if ((jsonObj.get("localisedDescription") != null && !jsonObj.get("localisedDescription").isJsonNull()) && !jsonObj.get("localisedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedDescription").toString()));
      }
      if ((jsonObj.get("localisedName") != null && !jsonObj.get("localisedName").isJsonNull()) && !jsonObj.get("localisedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localisedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localisedName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prerequisites") != null && !jsonObj.get("prerequisites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prerequisites` to be an array in the JSON string but got `%s`", jsonObj.get("prerequisites").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectFeature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectFeature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectFeature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectFeature.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectFeature>() {
           @Override
           public void write(JsonWriter out, ProjectFeature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectFeature read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectFeature instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectFeature given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectFeature
  * @throws IOException if the JSON string is invalid with respect to ProjectFeature
  */
  public static ProjectFeature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectFeature.class);
  }

 /**
  * Convert an instance of ProjectFeature to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

