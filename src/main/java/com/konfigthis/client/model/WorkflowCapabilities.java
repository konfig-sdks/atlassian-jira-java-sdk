/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AvailableWorkflowConnectRule;
import com.konfigthis.client.model.AvailableWorkflowForgeRule;
import com.konfigthis.client.model.AvailableWorkflowSystemRule;
import com.konfigthis.client.model.AvailableWorkflowTriggers;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkflowCapabilities
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowCapabilities {
  public static final String SERIALIZED_NAME_CONNECT_RULES = "connectRules";
  @SerializedName(SERIALIZED_NAME_CONNECT_RULES)
  private List<AvailableWorkflowConnectRule> connectRules = null;

  /**
   * The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
   */
  @JsonAdapter(EditorScopeEnum.Adapter.class)
 public enum EditorScopeEnum {
    PROJECT("PROJECT"),
    
    GLOBAL("GLOBAL");

    private String value;

    EditorScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditorScopeEnum fromValue(String value) {
      for (EditorScopeEnum b : EditorScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditorScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditorScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditorScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditorScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EDITOR_SCOPE = "editorScope";
  @SerializedName(SERIALIZED_NAME_EDITOR_SCOPE)
  private EditorScopeEnum editorScope;

  public static final String SERIALIZED_NAME_FORGE_RULES = "forgeRules";
  @SerializedName(SERIALIZED_NAME_FORGE_RULES)
  private List<AvailableWorkflowForgeRule> forgeRules = null;

  /**
   * The types of projects that this capability set is available for.
   */
  @JsonAdapter(ProjectTypesEnum.Adapter.class)
 public enum ProjectTypesEnum {
    SOFTWARE("software"),
    
    SERVICE_DESK("service_desk"),
    
    PRODUCT_DISCOVERY("product_discovery"),
    
    BUSINESS("business"),
    
    UNKNOWN("unknown");

    private String value;

    ProjectTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectTypesEnum fromValue(String value) {
      for (ProjectTypesEnum b : ProjectTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_TYPES = "projectTypes";
  @SerializedName(SERIALIZED_NAME_PROJECT_TYPES)
  private ProjectTypesEnum projectTypes = null;

  public static final String SERIALIZED_NAME_SYSTEM_RULES = "systemRules";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RULES)
  private List<AvailableWorkflowSystemRule> systemRules = null;

  public static final String SERIALIZED_NAME_TRIGGER_RULES = "triggerRules";
  @SerializedName(SERIALIZED_NAME_TRIGGER_RULES)
  private List<AvailableWorkflowTriggers> triggerRules = null;

  public WorkflowCapabilities() {
  }

  public WorkflowCapabilities connectRules(List<AvailableWorkflowConnectRule> connectRules) {
    
    
    
    
    this.connectRules = connectRules;
    return this;
  }

  public WorkflowCapabilities addConnectRulesItem(AvailableWorkflowConnectRule connectRulesItem) {
    if (this.connectRules == null) {
      this.connectRules = new ArrayList<>();
    }
    this.connectRules.add(connectRulesItem);
    return this;
  }

   /**
   * The Connect provided ecosystem rules available.
   * @return connectRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Connect provided ecosystem rules available.")

  public List<AvailableWorkflowConnectRule> getConnectRules() {
    return connectRules;
  }


  public void setConnectRules(List<AvailableWorkflowConnectRule> connectRules) {
    
    
    
    this.connectRules = connectRules;
  }


  public WorkflowCapabilities editorScope(EditorScopeEnum editorScope) {
    
    
    
    
    this.editorScope = editorScope;
    return this;
  }

   /**
   * The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
   * @return editorScope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.")

  public EditorScopeEnum getEditorScope() {
    return editorScope;
  }


  public void setEditorScope(EditorScopeEnum editorScope) {
    
    
    
    this.editorScope = editorScope;
  }


  public WorkflowCapabilities forgeRules(List<AvailableWorkflowForgeRule> forgeRules) {
    
    
    
    
    this.forgeRules = forgeRules;
    return this;
  }

  public WorkflowCapabilities addForgeRulesItem(AvailableWorkflowForgeRule forgeRulesItem) {
    if (this.forgeRules == null) {
      this.forgeRules = new ArrayList<>();
    }
    this.forgeRules.add(forgeRulesItem);
    return this;
  }

   /**
   * The Forge provided ecosystem rules available.
   * @return forgeRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Forge provided ecosystem rules available.")

  public List<AvailableWorkflowForgeRule> getForgeRules() {
    return forgeRules;
  }


  public void setForgeRules(List<AvailableWorkflowForgeRule> forgeRules) {
    
    
    
    this.forgeRules = forgeRules;
  }


  public WorkflowCapabilities projectTypes(ProjectTypesEnum projectTypes) {
    
    
    
    
    this.projectTypes = projectTypes;
    return this;
  }

  public WorkflowCapabilities addProjectTypesItem(ProjectTypesEnum projectTypesItem) {
    if (this.projectTypes == null) {
      this.projectTypes = new ArrayList<>();
    }
    this.projectTypes.add(projectTypesItem);
    return this;
  }

   /**
   * The types of projects that this capability set is available for.
   * @return projectTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The types of projects that this capability set is available for.")

  public ProjectTypesEnum getProjectTypes() {
    return projectTypes;
  }


  public void setProjectTypes(ProjectTypesEnum projectTypes) {
    
    
    
    this.projectTypes = projectTypes;
  }


  public WorkflowCapabilities systemRules(List<AvailableWorkflowSystemRule> systemRules) {
    
    
    
    
    this.systemRules = systemRules;
    return this;
  }

  public WorkflowCapabilities addSystemRulesItem(AvailableWorkflowSystemRule systemRulesItem) {
    if (this.systemRules == null) {
      this.systemRules = new ArrayList<>();
    }
    this.systemRules.add(systemRulesItem);
    return this;
  }

   /**
   * The Atlassian provided system rules available.
   * @return systemRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Atlassian provided system rules available.")

  public List<AvailableWorkflowSystemRule> getSystemRules() {
    return systemRules;
  }


  public void setSystemRules(List<AvailableWorkflowSystemRule> systemRules) {
    
    
    
    this.systemRules = systemRules;
  }


  public WorkflowCapabilities triggerRules(List<AvailableWorkflowTriggers> triggerRules) {
    
    
    
    
    this.triggerRules = triggerRules;
    return this;
  }

  public WorkflowCapabilities addTriggerRulesItem(AvailableWorkflowTriggers triggerRulesItem) {
    if (this.triggerRules == null) {
      this.triggerRules = new ArrayList<>();
    }
    this.triggerRules.add(triggerRulesItem);
    return this;
  }

   /**
   * The trigger rules available.
   * @return triggerRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The trigger rules available.")

  public List<AvailableWorkflowTriggers> getTriggerRules() {
    return triggerRules;
  }


  public void setTriggerRules(List<AvailableWorkflowTriggers> triggerRules) {
    
    
    
    this.triggerRules = triggerRules;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowCapabilities instance itself
   */
  public WorkflowCapabilities putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowCapabilities workflowCapabilities = (WorkflowCapabilities) o;
    return Objects.equals(this.connectRules, workflowCapabilities.connectRules) &&
        Objects.equals(this.editorScope, workflowCapabilities.editorScope) &&
        Objects.equals(this.forgeRules, workflowCapabilities.forgeRules) &&
        Objects.equals(this.projectTypes, workflowCapabilities.projectTypes) &&
        Objects.equals(this.systemRules, workflowCapabilities.systemRules) &&
        Objects.equals(this.triggerRules, workflowCapabilities.triggerRules)&&
        Objects.equals(this.additionalProperties, workflowCapabilities.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectRules, editorScope, forgeRules, projectTypes, systemRules, triggerRules, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowCapabilities {\n");
    sb.append("    connectRules: ").append(toIndentedString(connectRules)).append("\n");
    sb.append("    editorScope: ").append(toIndentedString(editorScope)).append("\n");
    sb.append("    forgeRules: ").append(toIndentedString(forgeRules)).append("\n");
    sb.append("    projectTypes: ").append(toIndentedString(projectTypes)).append("\n");
    sb.append("    systemRules: ").append(toIndentedString(systemRules)).append("\n");
    sb.append("    triggerRules: ").append(toIndentedString(triggerRules)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectRules");
    openapiFields.add("editorScope");
    openapiFields.add("forgeRules");
    openapiFields.add("projectTypes");
    openapiFields.add("systemRules");
    openapiFields.add("triggerRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowCapabilities
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowCapabilities is not found in the empty JSON string", WorkflowCapabilities.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("connectRules") != null && !jsonObj.get("connectRules").isJsonNull()) {
        JsonArray jsonArrayconnectRules = jsonObj.getAsJsonArray("connectRules");
        if (jsonArrayconnectRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectRules` to be an array in the JSON string but got `%s`", jsonObj.get("connectRules").toString()));
          }

          // validate the optional field `connectRules` (array)
          for (int i = 0; i < jsonArrayconnectRules.size(); i++) {
            AvailableWorkflowConnectRule.validateJsonObject(jsonArrayconnectRules.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("editorScope") != null && !jsonObj.get("editorScope").isJsonNull()) && !jsonObj.get("editorScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorScope").toString()));
      }
      if (jsonObj.get("forgeRules") != null && !jsonObj.get("forgeRules").isJsonNull()) {
        JsonArray jsonArrayforgeRules = jsonObj.getAsJsonArray("forgeRules");
        if (jsonArrayforgeRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forgeRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forgeRules` to be an array in the JSON string but got `%s`", jsonObj.get("forgeRules").toString()));
          }

          // validate the optional field `forgeRules` (array)
          for (int i = 0; i < jsonArrayforgeRules.size(); i++) {
            AvailableWorkflowForgeRule.validateJsonObject(jsonArrayforgeRules.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectTypes") != null && !jsonObj.get("projectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("projectTypes").toString()));
      }
      if (jsonObj.get("systemRules") != null && !jsonObj.get("systemRules").isJsonNull()) {
        JsonArray jsonArraysystemRules = jsonObj.getAsJsonArray("systemRules");
        if (jsonArraysystemRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemRules` to be an array in the JSON string but got `%s`", jsonObj.get("systemRules").toString()));
          }

          // validate the optional field `systemRules` (array)
          for (int i = 0; i < jsonArraysystemRules.size(); i++) {
            AvailableWorkflowSystemRule.validateJsonObject(jsonArraysystemRules.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("triggerRules") != null && !jsonObj.get("triggerRules").isJsonNull()) {
        JsonArray jsonArraytriggerRules = jsonObj.getAsJsonArray("triggerRules");
        if (jsonArraytriggerRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerRules` to be an array in the JSON string but got `%s`", jsonObj.get("triggerRules").toString()));
          }

          // validate the optional field `triggerRules` (array)
          for (int i = 0; i < jsonArraytriggerRules.size(); i++) {
            AvailableWorkflowTriggers.validateJsonObject(jsonArraytriggerRules.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowCapabilities>() {
           @Override
           public void write(JsonWriter out, WorkflowCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowCapabilities read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowCapabilities instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowCapabilities given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowCapabilities
  * @throws IOException if the JSON string is invalid with respect to WorkflowCapabilities
  */
  public static WorkflowCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowCapabilities.class);
  }

 /**
  * Convert an instance of WorkflowCapabilities to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

