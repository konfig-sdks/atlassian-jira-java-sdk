/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DocumentVersion;
import com.konfigthis.client.model.WorkflowMetadataAndIssueTypeRestModel;
import com.konfigthis.client.model.WorkflowMetadataRestModel;
import com.konfigthis.client.model.WorkflowScope;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkflowSchemeReadResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowSchemeReadResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private DocumentVersion version;

  public static final String SERIALIZED_NAME_DEFAULT_WORKFLOW = "defaultWorkflow";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WORKFLOW)
  private WorkflowMetadataRestModel defaultWorkflow;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_IDS_USING_SCHEME = "projectIdsUsingScheme";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS_USING_SCHEME)
  private List<String> projectIdsUsingScheme = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private WorkflowScope scope;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_WORKFLOWS_FOR_ISSUE_TYPES = "workflowsForIssueTypes";
  @SerializedName(SERIALIZED_NAME_WORKFLOWS_FOR_ISSUE_TYPES)
  private List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes = new ArrayList<>();

  public WorkflowSchemeReadResponse() {
  }

  public WorkflowSchemeReadResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the workflow scheme.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the workflow scheme.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public WorkflowSchemeReadResponse version(DocumentVersion version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DocumentVersion getVersion() {
    return version;
  }


  public void setVersion(DocumentVersion version) {
    
    
    
    this.version = version;
  }


  public WorkflowSchemeReadResponse defaultWorkflow(WorkflowMetadataRestModel defaultWorkflow) {
    
    
    
    
    this.defaultWorkflow = defaultWorkflow;
    return this;
  }

   /**
   * Get defaultWorkflow
   * @return defaultWorkflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkflowMetadataRestModel getDefaultWorkflow() {
    return defaultWorkflow;
  }


  public void setDefaultWorkflow(WorkflowMetadataRestModel defaultWorkflow) {
    
    
    
    this.defaultWorkflow = defaultWorkflow;
  }


  public WorkflowSchemeReadResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the workflow scheme.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the workflow scheme.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public WorkflowSchemeReadResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the workflow scheme.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the workflow scheme.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public WorkflowSchemeReadResponse projectIdsUsingScheme(List<String> projectIdsUsingScheme) {
    
    
    
    
    this.projectIdsUsingScheme = projectIdsUsingScheme;
    return this;
  }

  public WorkflowSchemeReadResponse addProjectIdsUsingSchemeItem(String projectIdsUsingSchemeItem) {
    this.projectIdsUsingScheme.add(projectIdsUsingSchemeItem);
    return this;
  }

   /**
   * The IDs of projects using the workflow scheme.
   * @return projectIdsUsingScheme
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The IDs of projects using the workflow scheme.")

  public List<String> getProjectIdsUsingScheme() {
    return projectIdsUsingScheme;
  }


  public void setProjectIdsUsingScheme(List<String> projectIdsUsingScheme) {
    
    
    
    this.projectIdsUsingScheme = projectIdsUsingScheme;
  }


  public WorkflowSchemeReadResponse scope(WorkflowScope scope) {
    
    
    
    
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WorkflowScope getScope() {
    return scope;
  }


  public void setScope(WorkflowScope scope) {
    
    
    
    this.scope = scope;
  }


  public WorkflowSchemeReadResponse taskId(String taskId) {
    
    
    
    
    this.taskId = taskId;
    return this;
  }

   /**
   * Indicates if there&#39;s an [asynchronous task](https://dac-static.atlassian.com) for this workflow scheme.
   * @return taskId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if there's an [asynchronous task](https://dac-static.atlassian.com) for this workflow scheme.")

  public String getTaskId() {
    return taskId;
  }


  public void setTaskId(String taskId) {
    
    
    
    this.taskId = taskId;
  }


  public WorkflowSchemeReadResponse workflowsForIssueTypes(List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes) {
    
    
    
    
    this.workflowsForIssueTypes = workflowsForIssueTypes;
    return this;
  }

  public WorkflowSchemeReadResponse addWorkflowsForIssueTypesItem(WorkflowMetadataAndIssueTypeRestModel workflowsForIssueTypesItem) {
    this.workflowsForIssueTypes.add(workflowsForIssueTypesItem);
    return this;
  }

   /**
   * Mappings from workflows to issue types.
   * @return workflowsForIssueTypes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Mappings from workflows to issue types.")

  public List<WorkflowMetadataAndIssueTypeRestModel> getWorkflowsForIssueTypes() {
    return workflowsForIssueTypes;
  }


  public void setWorkflowsForIssueTypes(List<WorkflowMetadataAndIssueTypeRestModel> workflowsForIssueTypes) {
    
    
    
    this.workflowsForIssueTypes = workflowsForIssueTypes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowSchemeReadResponse instance itself
   */
  public WorkflowSchemeReadResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowSchemeReadResponse workflowSchemeReadResponse = (WorkflowSchemeReadResponse) o;
    return Objects.equals(this.description, workflowSchemeReadResponse.description) &&
        Objects.equals(this.version, workflowSchemeReadResponse.version) &&
        Objects.equals(this.defaultWorkflow, workflowSchemeReadResponse.defaultWorkflow) &&
        Objects.equals(this.id, workflowSchemeReadResponse.id) &&
        Objects.equals(this.name, workflowSchemeReadResponse.name) &&
        Objects.equals(this.projectIdsUsingScheme, workflowSchemeReadResponse.projectIdsUsingScheme) &&
        Objects.equals(this.scope, workflowSchemeReadResponse.scope) &&
        Objects.equals(this.taskId, workflowSchemeReadResponse.taskId) &&
        Objects.equals(this.workflowsForIssueTypes, workflowSchemeReadResponse.workflowsForIssueTypes)&&
        Objects.equals(this.additionalProperties, workflowSchemeReadResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, version, defaultWorkflow, id, name, projectIdsUsingScheme, scope, taskId, workflowsForIssueTypes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowSchemeReadResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    defaultWorkflow: ").append(toIndentedString(defaultWorkflow)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectIdsUsingScheme: ").append(toIndentedString(projectIdsUsingScheme)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    workflowsForIssueTypes: ").append(toIndentedString(workflowsForIssueTypes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("version");
    openapiFields.add("defaultWorkflow");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("projectIdsUsingScheme");
    openapiFields.add("scope");
    openapiFields.add("taskId");
    openapiFields.add("workflowsForIssueTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("projectIdsUsingScheme");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("workflowsForIssueTypes");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowSchemeReadResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowSchemeReadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowSchemeReadResponse is not found in the empty JSON string", WorkflowSchemeReadResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowSchemeReadResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `version`
      DocumentVersion.validateJsonObject(jsonObj.getAsJsonObject("version"));
      // validate the optional field `defaultWorkflow`
      if (jsonObj.get("defaultWorkflow") != null && !jsonObj.get("defaultWorkflow").isJsonNull()) {
        WorkflowMetadataRestModel.validateJsonObject(jsonObj.getAsJsonObject("defaultWorkflow"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("projectIdsUsingScheme") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("projectIdsUsingScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdsUsingScheme` to be an array in the JSON string but got `%s`", jsonObj.get("projectIdsUsingScheme").toString()));
      }
      // validate the required field `scope`
      WorkflowScope.validateJsonObject(jsonObj.getAsJsonObject("scope"));
      if (!jsonObj.get("taskId").isJsonNull() && (jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("workflowsForIssueTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowsForIssueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("workflowsForIssueTypes").toString()));
      }

      JsonArray jsonArrayworkflowsForIssueTypes = jsonObj.getAsJsonArray("workflowsForIssueTypes");
      // validate the required field `workflowsForIssueTypes` (array)
      for (int i = 0; i < jsonArrayworkflowsForIssueTypes.size(); i++) {
        WorkflowMetadataAndIssueTypeRestModel.validateJsonObject(jsonArrayworkflowsForIssueTypes.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowSchemeReadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowSchemeReadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowSchemeReadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowSchemeReadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowSchemeReadResponse>() {
           @Override
           public void write(JsonWriter out, WorkflowSchemeReadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowSchemeReadResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowSchemeReadResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowSchemeReadResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowSchemeReadResponse
  * @throws IOException if the JSON string is invalid with respect to WorkflowSchemeReadResponse
  */
  public static WorkflowSchemeReadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowSchemeReadResponse.class);
  }

 /**
  * Convert an instance of WorkflowSchemeReadResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

