/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RequiredMappingByIssueType;
import com.konfigthis.client.model.RequiredMappingByWorkflows;
import com.konfigthis.client.model.StatusMetadata;
import com.konfigthis.client.model.StatusesPerWorkflow;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkflowSchemeUpdateRequiredMappingsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowSchemeUpdateRequiredMappingsResponse {
  public static final String SERIALIZED_NAME_STATUS_MAPPINGS_BY_ISSUE_TYPES = "statusMappingsByIssueTypes";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS_BY_ISSUE_TYPES)
  private Set<RequiredMappingByIssueType> statusMappingsByIssueTypes = null;

  public static final String SERIALIZED_NAME_STATUS_MAPPINGS_BY_WORKFLOWS = "statusMappingsByWorkflows";
  @SerializedName(SERIALIZED_NAME_STATUS_MAPPINGS_BY_WORKFLOWS)
  private Set<RequiredMappingByWorkflows> statusMappingsByWorkflows = null;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private Set<StatusMetadata> statuses = null;

  public static final String SERIALIZED_NAME_STATUSES_PER_WORKFLOW = "statusesPerWorkflow";
  @SerializedName(SERIALIZED_NAME_STATUSES_PER_WORKFLOW)
  private Set<StatusesPerWorkflow> statusesPerWorkflow = null;

  public WorkflowSchemeUpdateRequiredMappingsResponse() {
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse statusMappingsByIssueTypes(Set<RequiredMappingByIssueType> statusMappingsByIssueTypes) {
    
    
    
    
    this.statusMappingsByIssueTypes = statusMappingsByIssueTypes;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusMappingsByIssueTypesItem(RequiredMappingByIssueType statusMappingsByIssueTypesItem) {
    if (this.statusMappingsByIssueTypes == null) {
      this.statusMappingsByIssueTypes = new LinkedHashSet<>();
    }
    this.statusMappingsByIssueTypes.add(statusMappingsByIssueTypesItem);
    return this;
  }

   /**
   * The list of required status mappings by issue type.
   * @return statusMappingsByIssueTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of required status mappings by issue type.")

  public Set<RequiredMappingByIssueType> getStatusMappingsByIssueTypes() {
    return statusMappingsByIssueTypes;
  }


  public void setStatusMappingsByIssueTypes(Set<RequiredMappingByIssueType> statusMappingsByIssueTypes) {
    
    
    
    this.statusMappingsByIssueTypes = statusMappingsByIssueTypes;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statusMappingsByWorkflows(Set<RequiredMappingByWorkflows> statusMappingsByWorkflows) {
    
    
    
    
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusMappingsByWorkflowsItem(RequiredMappingByWorkflows statusMappingsByWorkflowsItem) {
    if (this.statusMappingsByWorkflows == null) {
      this.statusMappingsByWorkflows = new LinkedHashSet<>();
    }
    this.statusMappingsByWorkflows.add(statusMappingsByWorkflowsItem);
    return this;
  }

   /**
   * The list of required status mappings by workflow.
   * @return statusMappingsByWorkflows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of required status mappings by workflow.")

  public Set<RequiredMappingByWorkflows> getStatusMappingsByWorkflows() {
    return statusMappingsByWorkflows;
  }


  public void setStatusMappingsByWorkflows(Set<RequiredMappingByWorkflows> statusMappingsByWorkflows) {
    
    
    
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statuses(Set<StatusMetadata> statuses) {
    
    
    
    
    this.statuses = statuses;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusesItem(StatusMetadata statusesItem) {
    if (this.statuses == null) {
      this.statuses = new LinkedHashSet<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * The details of the statuses in the associated workflows.
   * @return statuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of the statuses in the associated workflows.")

  public Set<StatusMetadata> getStatuses() {
    return statuses;
  }


  public void setStatuses(Set<StatusMetadata> statuses) {
    
    
    
    this.statuses = statuses;
  }


  public WorkflowSchemeUpdateRequiredMappingsResponse statusesPerWorkflow(Set<StatusesPerWorkflow> statusesPerWorkflow) {
    
    
    
    
    this.statusesPerWorkflow = statusesPerWorkflow;
    return this;
  }

  public WorkflowSchemeUpdateRequiredMappingsResponse addStatusesPerWorkflowItem(StatusesPerWorkflow statusesPerWorkflowItem) {
    if (this.statusesPerWorkflow == null) {
      this.statusesPerWorkflow = new LinkedHashSet<>();
    }
    this.statusesPerWorkflow.add(statusesPerWorkflowItem);
    return this;
  }

   /**
   * The statuses associated with each workflow.
   * @return statusesPerWorkflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The statuses associated with each workflow.")

  public Set<StatusesPerWorkflow> getStatusesPerWorkflow() {
    return statusesPerWorkflow;
  }


  public void setStatusesPerWorkflow(Set<StatusesPerWorkflow> statusesPerWorkflow) {
    
    
    
    this.statusesPerWorkflow = statusesPerWorkflow;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowSchemeUpdateRequiredMappingsResponse instance itself
   */
  public WorkflowSchemeUpdateRequiredMappingsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowSchemeUpdateRequiredMappingsResponse workflowSchemeUpdateRequiredMappingsResponse = (WorkflowSchemeUpdateRequiredMappingsResponse) o;
    return Objects.equals(this.statusMappingsByIssueTypes, workflowSchemeUpdateRequiredMappingsResponse.statusMappingsByIssueTypes) &&
        Objects.equals(this.statusMappingsByWorkflows, workflowSchemeUpdateRequiredMappingsResponse.statusMappingsByWorkflows) &&
        Objects.equals(this.statuses, workflowSchemeUpdateRequiredMappingsResponse.statuses) &&
        Objects.equals(this.statusesPerWorkflow, workflowSchemeUpdateRequiredMappingsResponse.statusesPerWorkflow)&&
        Objects.equals(this.additionalProperties, workflowSchemeUpdateRequiredMappingsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusMappingsByIssueTypes, statusMappingsByWorkflows, statuses, statusesPerWorkflow, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowSchemeUpdateRequiredMappingsResponse {\n");
    sb.append("    statusMappingsByIssueTypes: ").append(toIndentedString(statusMappingsByIssueTypes)).append("\n");
    sb.append("    statusMappingsByWorkflows: ").append(toIndentedString(statusMappingsByWorkflows)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    statusesPerWorkflow: ").append(toIndentedString(statusesPerWorkflow)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusMappingsByIssueTypes");
    openapiFields.add("statusMappingsByWorkflows");
    openapiFields.add("statuses");
    openapiFields.add("statusesPerWorkflow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowSchemeUpdateRequiredMappingsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowSchemeUpdateRequiredMappingsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowSchemeUpdateRequiredMappingsResponse is not found in the empty JSON string", WorkflowSchemeUpdateRequiredMappingsResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("statusMappingsByIssueTypes") != null && !jsonObj.get("statusMappingsByIssueTypes").isJsonNull()) {
        JsonArray jsonArraystatusMappingsByIssueTypes = jsonObj.getAsJsonArray("statusMappingsByIssueTypes");
        if (jsonArraystatusMappingsByIssueTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusMappingsByIssueTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusMappingsByIssueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappingsByIssueTypes").toString()));
          }

          // validate the optional field `statusMappingsByIssueTypes` (array)
          for (int i = 0; i < jsonArraystatusMappingsByIssueTypes.size(); i++) {
            RequiredMappingByIssueType.validateJsonObject(jsonArraystatusMappingsByIssueTypes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statusMappingsByWorkflows") != null && !jsonObj.get("statusMappingsByWorkflows").isJsonNull()) {
        JsonArray jsonArraystatusMappingsByWorkflows = jsonObj.getAsJsonArray("statusMappingsByWorkflows");
        if (jsonArraystatusMappingsByWorkflows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusMappingsByWorkflows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusMappingsByWorkflows` to be an array in the JSON string but got `%s`", jsonObj.get("statusMappingsByWorkflows").toString()));
          }

          // validate the optional field `statusMappingsByWorkflows` (array)
          for (int i = 0; i < jsonArraystatusMappingsByWorkflows.size(); i++) {
            RequiredMappingByWorkflows.validateJsonObject(jsonArraystatusMappingsByWorkflows.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            StatusMetadata.validateJsonObject(jsonArraystatuses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statusesPerWorkflow") != null && !jsonObj.get("statusesPerWorkflow").isJsonNull()) {
        JsonArray jsonArraystatusesPerWorkflow = jsonObj.getAsJsonArray("statusesPerWorkflow");
        if (jsonArraystatusesPerWorkflow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusesPerWorkflow").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusesPerWorkflow` to be an array in the JSON string but got `%s`", jsonObj.get("statusesPerWorkflow").toString()));
          }

          // validate the optional field `statusesPerWorkflow` (array)
          for (int i = 0; i < jsonArraystatusesPerWorkflow.size(); i++) {
            StatusesPerWorkflow.validateJsonObject(jsonArraystatusesPerWorkflow.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowSchemeUpdateRequiredMappingsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowSchemeUpdateRequiredMappingsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowSchemeUpdateRequiredMappingsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowSchemeUpdateRequiredMappingsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowSchemeUpdateRequiredMappingsResponse>() {
           @Override
           public void write(JsonWriter out, WorkflowSchemeUpdateRequiredMappingsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowSchemeUpdateRequiredMappingsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowSchemeUpdateRequiredMappingsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowSchemeUpdateRequiredMappingsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowSchemeUpdateRequiredMappingsResponse
  * @throws IOException if the JSON string is invalid with respect to WorkflowSchemeUpdateRequiredMappingsResponse
  */
  public static WorkflowSchemeUpdateRequiredMappingsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowSchemeUpdateRequiredMappingsResponse.class);
  }

 /**
  * Convert an instance of WorkflowSchemeUpdateRequiredMappingsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

