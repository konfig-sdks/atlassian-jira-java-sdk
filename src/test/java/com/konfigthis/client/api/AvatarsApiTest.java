/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Avatar;
import com.konfigthis.client.model.Avatars;
import com.konfigthis.client.model.SystemAvatars;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AvatarsApi
 */
@Disabled
public class AvatarsApiTest {

    private static AvatarsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AvatarsApi(apiClient);
    }

    /**
     * Delete avatar
     *
     * Deletes an avatar from a project or issue type.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAvatarTest() throws ApiException {
        String type = null;
        String owningObjectId = null;
        Long id = null;
        api.deleteAvatar(type, owningObjectId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get avatar image by ID
     *
     * Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvatarImageByIdTest() throws ApiException {
        String type = null;
        Long id = null;
        String size = null;
        String format = null;
        Object response = api.getAvatarImageById(type, id)
                .size(size)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get avatar image by owner
     *
     * Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvatarImageByOwnerTest() throws ApiException {
        String type = null;
        String entityId = null;
        String size = null;
        String format = null;
        Object response = api.getAvatarImageByOwner(type, entityId)
                .size(size)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get avatar image by type
     *
     * Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultAvatarImageByTypeTest() throws ApiException {
        String type = null;
        String size = null;
        String format = null;
        Object response = api.getDefaultAvatarImageByType(type)
                .size(size)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get avatars
     *
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemAndCustomAvatarsByTypeTest() throws ApiException {
        String type = null;
        String entityId = null;
        Avatars response = api.getSystemAndCustomAvatarsByType(type, entityId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get system avatars by type
     *
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemAvatarsByTypeTest() throws ApiException {
        String type = null;
        SystemAvatars response = api.getSystemAvatarsByType(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Load avatar
     *
     * Loads a custom avatar for a project or issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](https://dac-static.atlassian.com).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](https://dac-static.atlassian.com) to set it as the issue type&#39;s displayed avatar.  *  [Set project avatar](https://dac-static.atlassian.com) to set it as the project&#39;s displayed avatar.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadCustomAvatarForProjectOrIssueTypeTest() throws ApiException {
        String type = null;
        String entityId = null;
        Integer size = null;
        Integer x = null;
        Integer y = null;
        Avatar response = api.loadCustomAvatarForProjectOrIssueType(type, entityId, size)
                .x(x)
                .y(y)
                .execute();
        // TODO: test validations
    }

}
