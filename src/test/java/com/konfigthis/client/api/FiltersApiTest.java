/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChangeFilterOwner;
import com.konfigthis.client.model.ColumnItem;
import com.konfigthis.client.model.ColumnRequestBody;
import com.konfigthis.client.model.Filter;
import com.konfigthis.client.model.FilterSubscriptionsList;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageBeanFilterDetails;
import java.util.Set;
import com.konfigthis.client.model.SharePermission;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FiltersApi
 */
@Disabled
public class FiltersApiTest {

    private static FiltersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FiltersApi(apiClient);
    }

    /**
     * Add filter as favorite
     *
     * Add a filter as a favorite for the user.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, the user can only favorite:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAsFavoriteTest() throws ApiException {
        Long id = null;
        String expand = null;
        Filter response = api.addAsFavorite(id)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Change filter owner
     *
     * Changes the owner of the filter.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeFilterOwnerTest() throws ApiException {
        String accountId = null;
        Long id = null;
        Object response = api.changeFilterOwner(accountId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create filter
     *
     * Creates a filter. The filter is shared according to the [default share scope](https://dac-static.atlassian.com). The filter is not selected as a favorite.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFilterTest() throws ApiException {
        String name = null;
        String description = null;
        OffsetDateTime approximateLastUsed = null;
        List<SharePermission> editPermissions = null;
        Boolean favourite = null;
        Long favouritedCount = null;
        String id = null;
        String jql = null;
        User owner = null;
        URI searchUrl = null;
        URI self = null;
        List<SharePermission> sharePermissions = null;
        UserList sharedUsers = null;
        FilterSubscriptionsList subscriptions = null;
        URI viewUrl = null;
        String expand = null;
        Boolean overrideSharePermissions = null;
        Filter response = api.createFilter(name)
                .description(description)
                .approximateLastUsed(approximateLastUsed)
                .editPermissions(editPermissions)
                .favourite(favourite)
                .favouritedCount(favouritedCount)
                .id(id)
                .jql(jql)
                .owner(owner)
                .searchUrl(searchUrl)
                .self(self)
                .sharePermissions(sharePermissions)
                .sharedUsers(sharedUsers)
                .subscriptions(subscriptions)
                .viewUrl(viewUrl)
                .expand(expand)
                .overrideSharePermissions(overrideSharePermissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete filter
     *
     * Delete a filter.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilterByIdTest() throws ApiException {
        Long id = null;
        api.deleteFilterById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get filter
     *
     * Returns a filter.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, the filter is only returned where it is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long id = null;
        String expand = null;
        Boolean overrideSharePermissions = null;
        Filter response = api.getById(id)
                .expand(expand)
                .overrideSharePermissions(overrideSharePermissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get columns
     *
     * Returns the columns configured for a filter. The column configuration is used when the filter&#39;s results are viewed in *List View* with the *Columns* set to *Filter*.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, column details are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilterColumnsTest() throws ApiException {
        Long id = null;
        List<ColumnItem> response = api.getFilterColumns(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get my filters
     *
     * Returns the filters owned by the user. If &#x60;includeFavourites&#x60; is &#x60;true&#x60;, the user&#39;s visible favorite filters are also returned.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFiltersTest() throws ApiException {
        String expand = null;
        Boolean includeFavourites = null;
        List<Filter> response = api.getUserFilters()
                .expand(expand)
                .includeFavourites(includeFavourites)
                .execute();
        // TODO: test validations
    }

    /**
     * Get favorite filters
     *
     * Returns the visible favorite filters of the user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** A favorite filter is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFavoriteFiltersTest() throws ApiException {
        String expand = null;
        List<Filter> response = api.listFavoriteFilters()
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove filter as favorite
     *
     * Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user&#39;s favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFavoriteTest() throws ApiException {
        Long id = null;
        String expand = null;
        Filter response = api.removeFavorite(id)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Reset columns
     *
     * Reset the user&#39;s column configuration for the filter to the default.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, columns are only reset for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetColumnsTest() throws ApiException {
        Long id = null;
        api.resetColumns(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for filters
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of filters. Use this operation to get:   *  specific filters, by defining &#x60;id&#x60; only.  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, only the following filters that match the query parameters are returned:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String filterName = null;
        String accountId = null;
        String owner = null;
        String groupname = null;
        String groupId = null;
        Long projectId = null;
        Set<Long> id = null;
        String orderBy = null;
        Long startAt = null;
        Integer maxResults = null;
        String expand = null;
        Boolean overrideSharePermissions = null;
        PageBeanFilterDetails response = api.search()
                .filterName(filterName)
                .accountId(accountId)
                .owner(owner)
                .groupname(groupname)
                .groupId(groupId)
                .projectId(projectId)
                .id(id)
                .orderBy(orderBy)
                .startAt(startAt)
                .maxResults(maxResults)
                .expand(expand)
                .overrideSharePermissions(overrideSharePermissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Set columns
     *
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](https://dac-static.atlassian.com) to get the list fields in Jira. A navigable field has &#x60;navigable&#x60; set to &#x60;true&#x60;.  The parameters for this resource are expressed as HTML form data. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns&#x60;  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, columns are only set for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setColumnsTest() throws ApiException {
        Long id = null;
        List<String> columns = null;
        Object response = api.setColumns(id)
                .columns(columns)
                .execute();
        // TODO: test validations
    }

    /**
     * Update filter
     *
     * Updates a filter. Use this operation to update a filter&#39;s name, description, JQL, or sharing.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however the user must own the filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterByIdTest() throws ApiException {
        String name = null;
        Long id = null;
        String description = null;
        OffsetDateTime approximateLastUsed = null;
        List<SharePermission> editPermissions = null;
        Boolean favourite = null;
        Long favouritedCount = null;
        String id = null;
        String jql = null;
        User owner = null;
        URI searchUrl = null;
        URI self = null;
        List<SharePermission> sharePermissions = null;
        UserList sharedUsers = null;
        FilterSubscriptionsList subscriptions = null;
        URI viewUrl = null;
        String expand = null;
        Boolean overrideSharePermissions = null;
        Filter response = api.updateFilterById(name, id)
                .description(description)
                .approximateLastUsed(approximateLastUsed)
                .editPermissions(editPermissions)
                .favourite(favourite)
                .favouritedCount(favouritedCount)
                .id(id)
                .jql(jql)
                .owner(owner)
                .searchUrl(searchUrl)
                .self(self)
                .sharePermissions(sharePermissions)
                .sharedUsers(sharedUsers)
                .subscriptions(subscriptions)
                .viewUrl(viewUrl)
                .expand(expand)
                .overrideSharePermissions(overrideSharePermissions)
                .execute();
        // TODO: test validations
    }

}
