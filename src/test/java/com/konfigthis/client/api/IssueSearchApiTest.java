/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.IdSearchRequestBean;
import com.konfigthis.client.model.IdSearchResults;
import com.konfigthis.client.model.IssueMatches;
import com.konfigthis.client.model.IssuePickerSuggestions;
import com.konfigthis.client.model.IssuesAndJQLQueries;
import com.konfigthis.client.model.SearchRequestBean;
import com.konfigthis.client.model.SearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueSearchApi
 */
@Disabled
public class IssueSearchApiTest {

    private static IssueSearchApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IssueSearchApi(apiClient);
    }

    /**
     * Check issues against JQL
     *
     * Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](https://dac-static.atlassian.com) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkAgainstJqlTest() throws ApiException {
        Set<Long> issueIds = null;
        List<String> jqls = null;
        IssueMatches response = api.checkAgainstJql(issueIds, jqls)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for issues using JQL (GET)
     *
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](https://dac-static.atlassian.com) version of this resource.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jqlGetTest() throws ApiException {
        String jql = null;
        Integer startAt = null;
        Integer maxResults = null;
        String validateQuery = null;
        List<String> fields = null;
        String expand = null;
        List<String> properties = null;
        Boolean fieldsByKeys = null;
        SearchResults response = api.jqlGet()
                .jql(jql)
                .startAt(startAt)
                .maxResults(maxResults)
                .validateQuery(validateQuery)
                .fields(fields)
                .expand(expand)
                .properties(properties)
                .fieldsByKeys(fieldsByKeys)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue picker suggestions
     *
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  &#x60;History Search&#x60; which includes issues from the user&#39;s history of created, edited, or viewed issues that contain the string in the &#x60;query&#x60; parameter.  *  &#x60;Current Search&#x60; which includes issues that match the JQL expression in &#x60;currentJQL&#x60; and contain the string in the &#x60;query&#x60; parameter.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickerSuggestionsGetTest() throws ApiException {
        String query = null;
        String currentJQL = null;
        String currentIssueKey = null;
        String currentProjectId = null;
        Boolean showSubTasks = null;
        Boolean showSubTaskParent = null;
        IssuePickerSuggestions response = api.pickerSuggestionsGet()
                .query(query)
                .currentJQL(currentJQL)
                .currentIssueKey(currentIssueKey)
                .currentProjectId(currentProjectId)
                .showSubTasks(showSubTasks)
                .showSubTaskParent(showSubTaskParent)
                .execute();
        // TODO: test validations
    }

    /**
     * Search issue IDs using JQL
     *
     * Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  Use the [Search](https://dac-static.atlassian.com) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn&#39;t provide the total number of results for your query.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchIssueIdsUsingJqlPostTest() throws ApiException {
        String jql = null;
        Integer maxResults = null;
        String nextPageToken = null;
        IdSearchResults response = api.searchIssueIdsUsingJqlPost()
                .jql(jql)
                .maxResults(maxResults)
                .nextPageToken(nextPageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for issues using JQL (POST)
     *
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](https://dac-static.atlassian.com) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usingJqlPostTest() throws ApiException {
        List<String> expand = null;
        List<String> fields = null;
        Boolean fieldsByKeys = null;
        String jql = null;
        Integer maxResults = null;
        List<String> properties = null;
        Integer startAt = null;
        String validateQuery = null;
        SearchResults response = api.usingJqlPost()
                .expand(expand)
                .fields(fields)
                .fieldsByKeys(fieldsByKeys)
                .jql(jql)
                .maxResults(maxResults)
                .properties(properties)
                .startAt(startAt)
                .validateQuery(validateQuery)
                .execute();
        // TODO: test validations
    }

}
