/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddSecuritySchemeLevelsRequestBean;
import com.konfigthis.client.model.AssociateSecuritySchemeWithProjectDetails;
import com.konfigthis.client.model.CreateIssueSecuritySchemeDetails;
import com.konfigthis.client.model.DefaultLevelValue;
import com.konfigthis.client.model.OldToNewSecurityLevelMappingsBean;
import com.konfigthis.client.model.PageBeanIssueSecuritySchemeToProjectMapping;
import com.konfigthis.client.model.PageBeanSecurityLevel;
import com.konfigthis.client.model.PageBeanSecurityLevelMember;
import com.konfigthis.client.model.PageBeanSecuritySchemeWithProjects;
import com.konfigthis.client.model.SecurityScheme;
import com.konfigthis.client.model.SecuritySchemeId;
import com.konfigthis.client.model.SecuritySchemeLevelBean;
import com.konfigthis.client.model.SecuritySchemeLevelMemberBean;
import com.konfigthis.client.model.SecuritySchemeMembersRequest;
import com.konfigthis.client.model.SecuritySchemes;
import java.util.Set;
import com.konfigthis.client.model.SetDefaultLevelsRequest;
import com.konfigthis.client.model.UpdateIssueSecurityLevelDetails;
import com.konfigthis.client.model.UpdateIssueSecuritySchemeRequestBean;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueSecuritySchemesApi
 */
@Disabled
public class IssueSecuritySchemesApiTest {

    private static IssueSecuritySchemesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IssueSecuritySchemesApi(apiClient);
    }

    /**
     * Add issue security level members
     *
     * Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersToLevelTest() throws ApiException {
        String schemeId = null;
        String levelId = null;
        List<SecuritySchemeLevelMemberBean> members = null;
        Object response = api.addMembersToLevel(schemeId, levelId)
                .members(members)
                .execute();
        // TODO: test validations
    }

    /**
     * Add issue security levels
     *
     * Adds levels and levels&#39; members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSecurityLevelsTest() throws ApiException {
        String schemeId = null;
        List<SecuritySchemeLevelBean> levels = null;
        Object response = api.addSecurityLevels(schemeId)
                .levels(levels)
                .execute();
        // TODO: test validations
    }

    /**
     * Associate security scheme to project
     *
     * Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSchemeToProjectTest() throws ApiException {
        String projectId = null;
        String schemeId = null;
        List<OldToNewSecurityLevelMappingsBean> oldToNewSecurityLevelMappings = null;
        api.associateSchemeToProject(projectId, schemeId)
                .oldToNewSecurityLevelMappings(oldToNewSecurityLevelMappings)
                .execute();
        // TODO: test validations
    }

    /**
     * Create issue security scheme
     *
     * Creates a security scheme with security scheme levels and levels&#39; members. You can create up to 100 security scheme levels and security scheme levels&#39; members per request.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSecuritySchemeTest() throws ApiException {
        String name = null;
        String description = null;
        List<SecuritySchemeLevelBean> levels = null;
        SecuritySchemeId response = api.createSecurityScheme(name)
                .description(description)
                .levels(levels)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete issue security scheme
     *
     * Deletes an issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSecuritySchemeTest() throws ApiException {
        String schemeId = null;
        Object response = api.deleteSecurityScheme(schemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue security level members
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLevelMembersTest() throws ApiException {
        String startAt = null;
        String maxResults = null;
        Set<String> id = null;
        Set<String> schemeId = null;
        Set<String> levelId = null;
        String expand = null;
        PageBeanSecurityLevelMember response = api.getLevelMembers()
                .startAt(startAt)
                .maxResults(maxResults)
                .id(id)
                .schemeId(schemeId)
                .levelId(levelId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get projects using issue security schemes
     *
     * Returns a [paginated](https://dac-static.atlassian.com) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectSecuritySchemesTest() throws ApiException {
        String startAt = null;
        String maxResults = null;
        Set<String> issueSecuritySchemeId = null;
        Set<String> projectId = null;
        PageBeanIssueSecuritySchemeToProjectMapping response = api.getProjectSecuritySchemes()
                .startAt(startAt)
                .maxResults(maxResults)
                .issueSecuritySchemeId(issueSecuritySchemeId)
                .projectId(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue security scheme
     *
     * Returns an issue security scheme along with its security levels.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemeSecurityLevelsTest() throws ApiException {
        Long id = null;
        SecurityScheme response = api.getSchemeSecurityLevels(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue security levels
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecurityLevelsTest() throws ApiException {
        String startAt = null;
        String maxResults = null;
        Set<String> id = null;
        Set<String> schemeId = null;
        Boolean onlyDefault = null;
        PageBeanSecurityLevel response = api.getSecurityLevels()
                .startAt(startAt)
                .maxResults(maxResults)
                .id(id)
                .schemeId(schemeId)
                .onlyDefault(onlyDefault)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue security schemes
     *
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecuritySchemesTest() throws ApiException {
        SecuritySchemes response = api.getSecuritySchemes()
                .execute();
        // TODO: test validations
    }

    /**
     * Remove issue security level
     *
     * Deletes an issue security level.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain subsequent updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLevelTest() throws ApiException {
        String schemeId = null;
        String levelId = null;
        String replaceWith = null;
        api.removeLevel(schemeId, levelId)
                .replaceWith(replaceWith)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove member from issue security level
     *
     * Removes an issue security level member from an issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSecurityLevelMemberTest() throws ApiException {
        String schemeId = null;
        String levelId = null;
        String memberId = null;
        Object response = api.removeSecurityLevelMember(schemeId, levelId, memberId)
                .execute();
        // TODO: test validations
    }

    /**
     * Search issue security schemes
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSecuritySchemesTest() throws ApiException {
        String startAt = null;
        String maxResults = null;
        Set<String> id = null;
        Set<String> projectId = null;
        PageBeanSecuritySchemeWithProjects response = api.searchSecuritySchemes()
                .startAt(startAt)
                .maxResults(maxResults)
                .id(id)
                .projectId(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set default issue security levels
     *
     * Sets default issue security levels for schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultLevelsTest() throws ApiException {
        List<DefaultLevelValue> defaultValues = null;
        Object response = api.setDefaultLevels(defaultValues)
                .execute();
        // TODO: test validations
    }

    /**
     * Update issue security level
     *
     * Updates the issue security level.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecurityLevelTest() throws ApiException {
        String schemeId = null;
        String levelId = null;
        String description = null;
        String name = null;
        Object response = api.updateSecurityLevel(schemeId, levelId)
                .description(description)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update issue security scheme
     *
     * Updates the issue security scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecuritySchemeTest() throws ApiException {
        String id = null;
        String description = null;
        String name = null;
        Object response = api.updateSecurityScheme(id)
                .description(description)
                .name(name)
                .execute();
        // TODO: test validations
    }

}
