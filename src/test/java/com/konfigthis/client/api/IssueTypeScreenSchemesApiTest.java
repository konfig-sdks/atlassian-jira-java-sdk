/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.IssueTypeIds;
import com.konfigthis.client.model.IssueTypeScreenSchemeDetails;
import com.konfigthis.client.model.IssueTypeScreenSchemeId;
import com.konfigthis.client.model.IssueTypeScreenSchemeMapping;
import com.konfigthis.client.model.IssueTypeScreenSchemeMappingDetails;
import com.konfigthis.client.model.IssueTypeScreenSchemeProjectAssociation;
import com.konfigthis.client.model.IssueTypeScreenSchemeUpdateDetails;
import com.konfigthis.client.model.PageBeanIssueTypeScreenScheme;
import com.konfigthis.client.model.PageBeanIssueTypeScreenSchemeItem;
import com.konfigthis.client.model.PageBeanIssueTypeScreenSchemesProjects;
import com.konfigthis.client.model.PageBeanProjectDetails;
import java.util.Set;
import com.konfigthis.client.model.UpdateDefaultScreenScheme;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueTypeScreenSchemesApi
 */
@Disabled
public class IssueTypeScreenSchemesApiTest {

    private static IssueTypeScreenSchemesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IssueTypeScreenSchemesApi(apiClient);
    }

    /**
     * Append mappings to issue type screen scheme
     *
     * Appends issue type to screen scheme mappings to an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendMappingsToSchemeTest() throws ApiException {
        List<IssueTypeScreenSchemeMapping> issueTypeMappings = null;
        String issueTypeScreenSchemeId = null;
        Object response = api.appendMappingsToScheme(issueTypeMappings, issueTypeScreenSchemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign issue type screen scheme to project
     *
     * Assigns an issue type screen scheme to a project.  Issue type screen schemes can only be assigned to classic projects.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignSchemeToProjectTest() throws ApiException {
        String issueTypeScreenSchemeId = null;
        String projectId = null;
        Object response = api.assignSchemeToProject()
                .issueTypeScreenSchemeId(issueTypeScreenSchemeId)
                .projectId(projectId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create issue type screen scheme
     *
     * Creates an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemeTest() throws ApiException {
        List<IssueTypeScreenSchemeMapping> issueTypeMappings = null;
        String name = null;
        String description = null;
        IssueTypeScreenSchemeId response = api.createScheme(issueTypeMappings, name)
                .description(description)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete issue type screen scheme
     *
     * Deletes an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemeTest() throws ApiException {
        String issueTypeScreenSchemeId = null;
        Object response = api.deleteScheme(issueTypeScreenSchemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue type screen scheme projects
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of projects associated with an issue type screen scheme.  Only company-managed projects associated with an issue type screen scheme are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScreenSchemeProjectsTest() throws ApiException {
        Long issueTypeScreenSchemeId = null;
        Long startAt = null;
        Integer maxResults = null;
        String query = null;
        PageBeanProjectDetails response = api.getScreenSchemeProjects(issueTypeScreenSchemeId)
                .startAt(startAt)
                .maxResults(maxResults)
                .query(query)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue type screen schemes for projects
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScreenSchemesForProjectTest() throws ApiException {
        Set<Long> projectId = null;
        Long startAt = null;
        Integer maxResults = null;
        PageBeanIssueTypeScreenSchemesProjects response = api.getScreenSchemesForProject(projectId)
                .startAt(startAt)
                .maxResults(maxResults)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue type screen scheme items
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemeMappingsTest() throws ApiException {
        Long startAt = null;
        Integer maxResults = null;
        Set<Long> issueTypeScreenSchemeId = null;
        PageBeanIssueTypeScreenSchemeItem response = api.listSchemeMappings()
                .startAt(startAt)
                .maxResults(maxResults)
                .issueTypeScreenSchemeId(issueTypeScreenSchemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue type screen schemes
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of issue type screen schemes.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScreenSchemesTest() throws ApiException {
        Long startAt = null;
        Integer maxResults = null;
        Set<Long> id = null;
        String queryString = null;
        String orderBy = null;
        String expand = null;
        PageBeanIssueTypeScreenScheme response = api.listScreenSchemes()
                .startAt(startAt)
                .maxResults(maxResults)
                .id(id)
                .queryString(queryString)
                .orderBy(orderBy)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove mappings from issue type screen scheme
     *
     * Removes issue type to screen scheme mappings from an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMappingsTest() throws ApiException {
        List<String> issueTypeIds = null;
        String issueTypeScreenSchemeId = null;
        Object response = api.removeMappings(issueTypeIds, issueTypeScreenSchemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update issue type screen scheme default screen scheme
     *
     * Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultScreenSchemeTest() throws ApiException {
        String screenSchemeId = null;
        String issueTypeScreenSchemeId = null;
        Object response = api.updateDefaultScreenScheme(screenSchemeId, issueTypeScreenSchemeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update issue type screen scheme
     *
     * Updates an issue type screen scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScreenSchemeTest() throws ApiException {
        String issueTypeScreenSchemeId = null;
        String description = null;
        String name = null;
        Object response = api.updateScreenScheme(issueTypeScreenSchemeId)
                .description(description)
                .name(name)
                .execute();
        // TODO: test validations
    }

}
