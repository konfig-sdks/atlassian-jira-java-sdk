/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Avatar;
import com.konfigthis.client.model.IssueTypeCreateBean;
import com.konfigthis.client.model.IssueTypeDetails;
import com.konfigthis.client.model.IssueTypeUpdateBean;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueTypesApi
 */
@Disabled
public class IssueTypesApiTest {

    private static IssueTypesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IssueTypesApi(apiClient);
    }

    /**
     * Create issue type
     *
     * Creates an issue type and adds it to the default issue type scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIssueTypeTest() throws ApiException {
        String name = null;
        String description = null;
        Integer hierarchyLevel = null;
        String type = null;
        IssueTypeDetails response = api.createIssueType(name)
                .description(description)
                .hierarchyLevel(hierarchyLevel)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete issue type
     *
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (&#x60;alternativeIssueTypeId&#x60;). A list of alternative issue types are obtained from the [Get alternative issue types](https://dac-static.atlassian.com) resource.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String id = null;
        String alternativeIssueTypeId = null;
        api.deleteById(id)
                .alternativeIssueTypeId(alternativeIssueTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all issue types for user
     *
     * Returns all issue types.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Issue types are only returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForUserTest() throws ApiException {
        List<IssueTypeDetails> response = api.getAllForUser()
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue type
     *
     * Returns an issue type.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        IssueTypeDetails response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue types for project
     *
     * Returns issue types for a project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectIssueTypesTest() throws ApiException {
        Long projectId = null;
        Integer level = null;
        List<IssueTypeDetails> response = api.getProjectIssueTypes(projectId)
                .level(level)
                .execute();
        // TODO: test validations
    }

    /**
     * Get alternative issue types
     *
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlternativeIssueTypesTest() throws ApiException {
        String id = null;
        List<IssueTypeDetails> response = api.listAlternativeIssueTypes(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Load issue type avatar
     *
     * Loads an avatar for the issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](https://dac-static.atlassian.com).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST \\ --user email@example.com:&lt;api_token&gt; \\ --header &#39;X-Atlassian-Token: no-check&#39; \\ --header &#39;Content-Type: image/&lt; image_type&gt;&#39; \\ --data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; \\ --url &#39;https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}&#39;This&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [Update issue type](https://dac-static.atlassian.com) to set it as the issue type&#39;s displayed avatar.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadIssueTypeAvatarTest() throws ApiException {
        String id = null;
        Integer size = null;
        Integer x = null;
        Integer y = null;
        Avatar response = api.loadIssueTypeAvatar(id, size)
                .x(x)
                .y(y)
                .execute();
        // TODO: test validations
    }

    /**
     * Update issue type
     *
     * Updates the issue type.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIssueTypeTest() throws ApiException {
        String id = null;
        String description = null;
        Long avatarId = null;
        String name = null;
        IssueTypeDetails response = api.updateIssueType(id)
                .description(description)
                .avatarId(avatarId)
                .name(name)
                .execute();
        // TODO: test validations
    }

}
