/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChangedWorklogs;
import com.konfigthis.client.model.EntityProperty;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageOfWorklogs;
import java.net.URI;
import com.konfigthis.client.model.UserDetails;
import com.konfigthis.client.model.Visibility;
import com.konfigthis.client.model.Worklog;
import com.konfigthis.client.model.WorklogIdsRequestBean;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueWorklogsApi
 */
@Disabled
public class IssueWorklogsApiTest {

    private static IssueWorklogsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new IssueWorklogsApi(apiClient);
    }

    /**
     * Add worklog
     *
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorklogTest() throws ApiException {
        String issueIdOrKey = null;
        UserDetails author = null;
        Object comment = null;
        OffsetDateTime created = null;
        String id = null;
        String issueId = null;
        List<EntityProperty> properties = null;
        URI self = null;
        OffsetDateTime started = null;
        String timeSpent = null;
        Long timeSpentSeconds = null;
        UserDetails updateAuthor = null;
        OffsetDateTime updated = null;
        Visibility visibility = null;
        Boolean notifyUsers = null;
        String adjustEstimate = null;
        String newEstimate = null;
        String reduceBy = null;
        String expand = null;
        Boolean overrideEditableFlag = null;
        Worklog response = api.createWorklog(issueIdOrKey)
                .author(author)
                .comment(comment)
                .created(created)
                .id(id)
                .issueId(issueId)
                .properties(properties)
                .self(self)
                .started(started)
                .timeSpent(timeSpent)
                .timeSpentSeconds(timeSpentSeconds)
                .updateAuthor(updateAuthor)
                .updated(updated)
                .visibility(visibility)
                .notifyUsers(notifyUsers)
                .adjustEstimate(adjustEstimate)
                .newEstimate(newEstimate)
                .reduceBy(reduceBy)
                .expand(expand)
                .overrideEditableFlag(overrideEditableFlag)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete worklog
     *
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorklogByIdTest() throws ApiException {
        String issueIdOrKey = null;
        String id = null;
        Boolean notifyUsers = null;
        String adjustEstimate = null;
        String newEstimate = null;
        String increaseBy = null;
        Boolean overrideEditableFlag = null;
        api.deleteWorklogById(issueIdOrKey, id)
                .notifyUsers(notifyUsers)
                .adjustEstimate(adjustEstimate)
                .newEstimate(newEstimate)
                .increaseBy(increaseBy)
                .overrideEditableFlag(overrideEditableFlag)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue worklogs
     *
     * Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsForListTest() throws ApiException {
        String issueIdOrKey = null;
        Long startAt = null;
        Integer maxResults = null;
        Long startedAfter = null;
        Long startedBefore = null;
        String expand = null;
        PageOfWorklogs response = api.getDetailsForList(issueIdOrKey)
                .startAt(startAt)
                .maxResults(maxResults)
                .startedAfter(startedAfter)
                .startedBefore(startedBefore)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IDs of updated worklogs
     *
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, &#x60;until&#x60; indicates the timestamp of the youngest item on the page. Also, &#x60;nextPage&#x60; provides the URL for the next page of worklogs. The &#x60;lastPage&#x60; parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpdatedWorklogIdsTest() throws ApiException {
        Long since = null;
        String expand = null;
        ChangedWorklogs response = api.getUpdatedWorklogIds()
                .since(since)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get worklog
     *
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorklogDetailsTest() throws ApiException {
        String issueIdOrKey = null;
        String id = null;
        String expand = null;
        Worklog response = api.getWorklogDetails(issueIdOrKey, id)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get worklogs
     *
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorklogDetailsForListTest() throws ApiException {
        Set<Long> ids = null;
        String expand = null;
        List<Worklog> response = api.getWorklogDetailsForList(ids)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IDs of deleted worklogs
     *
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, &#x60;until&#x60; indicates the timestamp of the youngest item on the page. Also, &#x60;nextPage&#x60; provides the URL for the next page of worklogs. The &#x60;lastPage&#x60; parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeletedWorklogIdsTest() throws ApiException {
        Long since = null;
        ChangedWorklogs response = api.listDeletedWorklogIds()
                .since(since)
                .execute();
        // TODO: test validations
    }

    /**
     * Update worklog
     *
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorklogTest() throws ApiException {
        String issueIdOrKey = null;
        String id = null;
        UserDetails author = null;
        Object comment = null;
        OffsetDateTime created = null;
        String id = null;
        String issueId = null;
        List<EntityProperty> properties = null;
        URI self = null;
        OffsetDateTime started = null;
        String timeSpent = null;
        Long timeSpentSeconds = null;
        UserDetails updateAuthor = null;
        OffsetDateTime updated = null;
        Visibility visibility = null;
        Boolean notifyUsers = null;
        String adjustEstimate = null;
        String newEstimate = null;
        String expand = null;
        Boolean overrideEditableFlag = null;
        Worklog response = api.updateWorklog(issueIdOrKey, id)
                .author(author)
                .comment(comment)
                .created(created)
                .id(id)
                .issueId(issueId)
                .properties(properties)
                .self(self)
                .started(started)
                .timeSpent(timeSpent)
                .timeSpentSeconds(timeSpentSeconds)
                .updateAuthor(updateAuthor)
                .updated(updated)
                .visibility(visibility)
                .notifyUsers(notifyUsers)
                .adjustEstimate(adjustEstimate)
                .newEstimate(newEstimate)
                .expand(expand)
                .overrideEditableFlag(overrideEditableFlag)
                .execute();
        // TODO: test validations
    }

}
