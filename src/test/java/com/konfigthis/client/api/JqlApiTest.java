/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AutoCompleteSuggestions;
import com.konfigthis.client.model.ConvertedJQLQueries;
import com.konfigthis.client.model.JQLPersonalDataMigrationRequest;
import com.konfigthis.client.model.JQLReferenceData;
import com.konfigthis.client.model.JqlQueriesToParse;
import com.konfigthis.client.model.JqlQueriesToSanitize;
import com.konfigthis.client.model.JqlQueryToSanitize;
import com.konfigthis.client.model.ParsedJqlQueries;
import com.konfigthis.client.model.SanitizedJqlQueries;
import com.konfigthis.client.model.SearchAutoCompleteFilter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JqlApi
 */
@Disabled
public class JqlApiTest {

    private static JqlApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JqlApi(apiClient);
    }

    /**
     * Convert user identifiers to account IDs in JQL queries
     *
     * Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.  You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).  **[Permissions](https://dac-static.atlassian.com) required:** Permission to access Jira.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertUserIdentifiersToAccountIdsInJqlQueriesTest() throws ApiException {
        List<String> queryStrings = null;
        ConvertedJQLQueries response = api.convertUserIdentifiersToAccountIdsInJqlQueries()
                .queryStrings(queryStrings)
                .execute();
        // TODO: test validations
    }

    /**
     * Get field auto complete suggestions
     *
     * Returns the JQL search auto complete suggestions for a field.  Suggestions can be obtained by providing:   *  &#x60;fieldName&#x60; to get a list of all values for the field.  *  &#x60;fieldName&#x60; and &#x60;fieldValue&#x60; to get a list of values containing the text in &#x60;fieldValue&#x60;.  *  &#x60;fieldName&#x60; and &#x60;predicateName&#x60; to get a list of all predicate values for the field.  *  &#x60;fieldName&#x60;, &#x60;predicateName&#x60;, and &#x60;predicateValue&#x60; to get a list of predicate values containing the text in &#x60;predicateValue&#x60;.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldAutoCompleteForQueryStringTest() throws ApiException {
        String fieldName = null;
        String fieldValue = null;
        String predicateName = null;
        String predicateValue = null;
        AutoCompleteSuggestions response = api.getFieldAutoCompleteForQueryString()
                .fieldName(fieldName)
                .fieldValue(fieldValue)
                .predicateName(predicateName)
                .predicateValue(predicateValue)
                .execute();
        // TODO: test validations
    }

    /**
     * Get field reference data (GET)
     *
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](https://dac-static.atlassian.com) can be used.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldReferenceDataTest() throws ApiException {
        JQLReferenceData response = api.getFieldReferenceData()
                .execute();
        // TODO: test validations
    }

    /**
     * Get field reference data (POST)
     *
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  This operation can filter the custom fields returned by project. Invalid project IDs in &#x60;projectIds&#x60; are ignored. System fields are always returned.  It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field &#x60;Component - Component[Dropdown]&#x60; enables dropdown fields &#x60;Component - cf[10061]&#x60; and &#x60;Component - cf[10062]&#x60; to be searched simultaneously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldReferenceDataPostTest() throws ApiException {
        Boolean includeCollapsedFields = null;
        List<Long> projectIds = null;
        JQLReferenceData response = api.getFieldReferenceDataPost()
                .includeCollapsedFields(includeCollapsedFields)
                .projectIds(projectIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Parse JQL query
     *
     * Parses and validates JQL queries.  Validation is performed in context of the current user.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void parseAndValidateTest() throws ApiException {
        List<String> queries = null;
        String validation = null;
        ParsedJqlQueries response = api.parseAndValidate(queries, validation)
                .execute();
        // TODO: test validations
    }

    /**
     * Sanitize JQL queries
     *
     * Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn&#39;t have permission to view the entity.  For example, if the query contains the clause *project &#x3D; &#39;Secret project&#39;*, and a user does not have browse permission for the project \&quot;Secret project\&quot;, the sanitized query replaces the clause with *project &#x3D; 12345\&quot;* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.  Note that sanitization doesn&#39;t make the queries GDPR-compliant, because it doesn&#39;t remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).  Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sanitizeJqlQueriesTest() throws ApiException {
        List<JqlQueryToSanitize> queries = null;
        SanitizedJqlQueries response = api.sanitizeJqlQueries(queries)
                .execute();
        // TODO: test validations
    }

}
