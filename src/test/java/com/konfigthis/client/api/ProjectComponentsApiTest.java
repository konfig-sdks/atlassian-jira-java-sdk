/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ComponentIssuesCount;
import com.konfigthis.client.model.PageBean2ComponentJsonBean;
import com.konfigthis.client.model.PageBeanComponentWithIssueCount;
import com.konfigthis.client.model.ProjectComponent;
import java.net.URI;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectComponentsApi
 */
@Disabled
public class ProjectComponentsApiTest {

    private static ProjectComponentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectComponentsApi(apiClient);
    }

    /**
     * Create component
     *
     * Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createComponentTest() throws ApiException {
        String description = null;
        String ari = null;
        User assignee = null;
        String assigneeType = null;
        String id = null;
        Boolean isAssigneeTypeValid = null;
        User lead = null;
        String leadAccountId = null;
        String leadUserName = null;
        Map<String, String> metadata = null;
        String name = null;
        String project = null;
        Long projectId = null;
        User realAssignee = null;
        String realAssigneeType = null;
        URI self = null;
        ProjectComponent response = api.createComponent()
                .description(description)
                .ari(ari)
                .assignee(assignee)
                .assigneeType(assigneeType)
                .id(id)
                .isAssigneeTypeValid(isAssigneeTypeValid)
                .lead(lead)
                .leadAccountId(leadAccountId)
                .leadUserName(leadUserName)
                .metadata(metadata)
                .name(name)
                .project(project)
                .projectId(projectId)
                .realAssignee(realAssignee)
                .realAssigneeType(realAssigneeType)
                .self(self)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete component
     *
     * Deletes a component.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteComponentByIdTest() throws ApiException {
        String id = null;
        String moveIssuesTo = null;
        api.deleteComponentById(id)
                .moveIssuesTo(moveIssuesTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Find components for projects
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of all components in a project, including global (Compass) components when applicable.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findComponentsForProjectsTest() throws ApiException {
        List<String> projectIdsOrKeys = null;
        Long startAt = null;
        Integer maxResults = null;
        String orderBy = null;
        String query = null;
        PageBean2ComponentJsonBean response = api.findComponentsForProjects(projectIdsOrKeys)
                .startAt(startAt)
                .maxResults(maxResults)
                .orderBy(orderBy)
                .query(query)
                .execute();
        // TODO: test validations
    }

    /**
     * Get component
     *
     * Returns a component.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        ProjectComponent response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get component issues count
     *
     * Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.   *  **Classic**: &#x60;read:jira-work&#x60;  *  **Granular**: &#x60;read:field:jira&#x60;, &#x60;read:project.component:jira&#x60;  **[Permissions](https://dac-static.atlassian.com) required:** None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelatedIssueCountsTest() throws ApiException {
        String id = null;
        ComponentIssuesCount response = api.getRelatedIssueCounts(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project components
     *
     * Returns all components in a project. See the [Get project components paginated](https://dac-static.atlassian.com) resource if you want to get a full list of components with pagination.  If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listComponentsTest() throws ApiException {
        String projectIdOrKey = null;
        String componentSource = null;
        List<ProjectComponent> response = api.listComponents(projectIdOrKey)
                .componentSource(componentSource)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project components paginated
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of all components in a project. See the [Get project components](https://dac-static.atlassian.com) resource if you want to get a full list of versions without pagination.  If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaginatedTest() throws ApiException {
        String projectIdOrKey = null;
        Long startAt = null;
        Integer maxResults = null;
        String orderBy = null;
        String componentSource = null;
        String query = null;
        PageBeanComponentWithIssueCount response = api.listPaginated(projectIdOrKey)
                .startAt(startAt)
                .maxResults(maxResults)
                .orderBy(orderBy)
                .componentSource(componentSource)
                .query(query)
                .execute();
        // TODO: test validations
    }

    /**
     * Update component
     *
     * Updates a component. Any fields included in the request are overwritten. If &#x60;leadAccountId&#x60; is an empty string (\&quot;\&quot;) the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateComponentByIdTest() throws ApiException {
        String id = null;
        String description = null;
        String ari = null;
        User assignee = null;
        String assigneeType = null;
        String id = null;
        Boolean isAssigneeTypeValid = null;
        User lead = null;
        String leadAccountId = null;
        String leadUserName = null;
        Map<String, String> metadata = null;
        String name = null;
        String project = null;
        Long projectId = null;
        User realAssignee = null;
        String realAssigneeType = null;
        URI self = null;
        ProjectComponent response = api.updateComponentById(id)
                .description(description)
                .ari(ari)
                .assignee(assignee)
                .assigneeType(assigneeType)
                .id(id)
                .isAssigneeTypeValid(isAssigneeTypeValid)
                .lead(lead)
                .leadAccountId(leadAccountId)
                .leadUserName(leadUserName)
                .metadata(metadata)
                .name(name)
                .project(project)
                .projectId(projectId)
                .realAssignee(realAssignee)
                .realAssigneeType(realAssigneeType)
                .self(self)
                .execute();
        // TODO: test validations
    }

}
