/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DefaultWorkflow;
import com.konfigthis.client.model.IssueTypeDetails;
import com.konfigthis.client.model.IssueTypeWorkflowMapping;
import com.konfigthis.client.model.IssueTypesWorkflowMapping;
import com.konfigthis.client.model.PublishDraftWorkflowScheme;
import com.konfigthis.client.model.StatusMapping;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.WorkflowScheme;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowSchemeDraftsApi
 */
@Disabled
public class WorkflowSchemeDraftsApiTest {

    private static WorkflowSchemeDraftsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkflowSchemeDraftsApi(apiClient);
    }

    /**
     * Create draft workflow scheme
     *
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDraftWorkflowSchemeTest() throws ApiException {
        Long id = null;
        WorkflowScheme response = api.createDraftWorkflowScheme(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete workflow for issue type in draft workflow scheme
     *
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIssueTypeWorkflowMappingTest() throws ApiException {
        Long id = null;
        String issueType = null;
        WorkflowScheme response = api.deleteIssueTypeWorkflowMapping(id, issueType)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete issue types for workflow in draft workflow scheme
     *
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIssueTypesForWorkflowInSchemeTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        api.deleteIssueTypesForWorkflowInScheme(id, workflowName)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete draft workflow scheme
     *
     * Deletes a draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemeDraftTest() throws ApiException {
        Long id = null;
        api.deleteSchemeDraft(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get draft default workflow
     *
     * Returns the default workflow for a workflow scheme&#39;s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultWorkflowTest() throws ApiException {
        Long id = null;
        DefaultWorkflow response = api.getDefaultWorkflow(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get draft workflow scheme
     *
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDraftWorkflowSchemeTest() throws ApiException {
        Long id = null;
        WorkflowScheme response = api.getDraftWorkflowScheme(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue types for workflows in draft workflow scheme
     *
     * Returns the workflow-issue type mappings for a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIssueTypeMappingsForWorkflowInSchemeDraftTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        IssueTypesWorkflowMapping response = api.getIssueTypeMappingsForWorkflowInSchemeDraft(id)
                .workflowName(workflowName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflow for issue type in draft workflow scheme
     *
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIssueTypeWorkflowTest() throws ApiException {
        Long id = null;
        String issueType = null;
        IssueTypeWorkflowMapping response = api.getIssueTypeWorkflow(id, issueType)
                .execute();
        // TODO: test validations
    }

    /**
     * Publish draft workflow scheme
     *
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](https://dac-static.atlassian.com). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](https://dac-static.atlassian.com) to obtain updates.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishDraftWorkflowSchemeTest() throws ApiException {
        Long id = null;
        Set<StatusMapping> statusMappings = null;
        Boolean validateOnly = null;
        api.publishDraftWorkflowScheme(id)
                .statusMappings(statusMappings)
                .validateOnly(validateOnly)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete draft default workflow
     *
     * Resets the default workflow for a workflow scheme&#39;s draft. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDefaultWorkflowTest() throws ApiException {
        Long id = null;
        WorkflowScheme response = api.resetDefaultWorkflow(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Set workflow for issue type in draft workflow scheme
     *
     * Sets the workflow for an issue type in a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIssueTypeWorkflowTest() throws ApiException {
        Long id = null;
        String issueType = null;
        String issueType = null;
        Boolean updateDraftIfNeeded = null;
        String workflow = null;
        WorkflowScheme response = api.setIssueTypeWorkflow(id, issueType)
                .issueType(issueType)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .workflow(workflow)
                .execute();
        // TODO: test validations
    }

    /**
     * Set issue types for workflow in workflow scheme
     *
     * Sets the issue types for a workflow in a workflow scheme&#39;s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIssueTypesForWorkflowTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean defaultMapping = null;
        List<String> issueTypes = null;
        Boolean updateDraftIfNeeded = null;
        String workflow = null;
        WorkflowScheme response = api.setIssueTypesForWorkflow(id, workflowName)
                .defaultMapping(defaultMapping)
                .issueTypes(issueTypes)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .workflow(workflow)
                .execute();
        // TODO: test validations
    }

    /**
     * Update draft default workflow
     *
     * Sets the default workflow for a workflow scheme&#39;s draft.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultWorkflowSchemeTest() throws ApiException {
        String workflow = null;
        Long id = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.updateDefaultWorkflowScheme(workflow, id)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Update draft workflow scheme
     *
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDraftWorkflowSchemeTest() throws ApiException {
        Long id = null;
        String description = null;
        String defaultWorkflow = null;
        Boolean draft = null;
        Long id = null;
        Map<String, String> issueTypeMappings = null;
        Map<String, IssueTypeDetails> issueTypes = null;
        String lastModified = null;
        User lastModifiedUser = null;
        String name = null;
        String originalDefaultWorkflow = null;
        Map<String, String> originalIssueTypeMappings = null;
        URI self = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.updateDraftWorkflowScheme(id)
                .description(description)
                .defaultWorkflow(defaultWorkflow)
                .draft(draft)
                .id(id)
                .issueTypeMappings(issueTypeMappings)
                .issueTypes(issueTypes)
                .lastModified(lastModified)
                .lastModifiedUser(lastModifiedUser)
                .name(name)
                .originalDefaultWorkflow(originalDefaultWorkflow)
                .originalIssueTypeMappings(originalIssueTypeMappings)
                .self(self)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

}
