/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DefaultWorkflow;
import com.konfigthis.client.model.DocumentVersion;
import com.konfigthis.client.model.IssueTypeDetails;
import com.konfigthis.client.model.IssueTypeWorkflowMapping;
import com.konfigthis.client.model.IssueTypesWorkflowMapping;
import com.konfigthis.client.model.MappingsByIssueTypeOverride;
import com.konfigthis.client.model.MappingsByWorkflow;
import com.konfigthis.client.model.PageBeanWorkflowScheme;
import java.net.URI;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.WorkflowScheme;
import com.konfigthis.client.model.WorkflowSchemeAssociation;
import com.konfigthis.client.model.WorkflowSchemeReadRequest;
import com.konfigthis.client.model.WorkflowSchemeReadResponse;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequest;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequiredMappingsRequest;
import com.konfigthis.client.model.WorkflowSchemeUpdateRequiredMappingsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowSchemesApi
 */
@Disabled
public class WorkflowSchemesApiTest {

    private static WorkflowSchemesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkflowSchemesApi(apiClient);
    }

    /**
     * Bulk get workflow schemes
     *
     * Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes  *  *Administer projects* project permissions to access project-scoped workflow schemes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkGetWorkflowSchemesTest() throws ApiException {
        List<String> projectIds = null;
        List<String> workflowSchemeIds = null;
        String expand = null;
        List<WorkflowSchemeReadResponse> response = api.bulkGetWorkflowSchemes()
                .projectIds(projectIds)
                .workflowSchemeIds(workflowSchemeIds)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     * Create workflow scheme
     *
     * Creates a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemeTest() throws ApiException {
        String description = null;
        String defaultWorkflow = null;
        Boolean draft = null;
        Long id = null;
        Map<String, String> issueTypeMappings = null;
        Map<String, IssueTypeDetails> issueTypes = null;
        String lastModified = null;
        User lastModifiedUser = null;
        String name = null;
        String originalDefaultWorkflow = null;
        Map<String, String> originalIssueTypeMappings = null;
        URI self = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.createScheme()
                .description(description)
                .defaultWorkflow(defaultWorkflow)
                .draft(draft)
                .id(id)
                .issueTypeMappings(issueTypeMappings)
                .issueTypes(issueTypes)
                .lastModified(lastModified)
                .lastModifiedUser(lastModifiedUser)
                .name(name)
                .originalDefaultWorkflow(originalDefaultWorkflow)
                .originalIssueTypeMappings(originalIssueTypeMappings)
                .self(self)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete workflow for issue type in workflow scheme
     *
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIssueTypeWorkflowMappingTest() throws ApiException {
        Long id = null;
        String issueType = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.deleteIssueTypeWorkflowMapping(id, issueType)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete issue types for workflow in workflow scheme
     *
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIssueTypesForWorkflowInSchemeTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean updateDraftIfNeeded = null;
        api.deleteIssueTypesForWorkflowInScheme(id, workflowName)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete workflow scheme
     *
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemeTest() throws ApiException {
        Long id = null;
        Object response = api.deleteScheme(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all workflow schemes
     *
     * Returns a [paginated](https://dac-static.atlassian.com) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        Long startAt = null;
        Integer maxResults = null;
        PageBeanWorkflowScheme response = api.getAll()
                .startAt(startAt)
                .maxResults(maxResults)
                .execute();
        // TODO: test validations
    }

    /**
     * Get default workflow
     *
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultWorkflowTest() throws ApiException {
        Long id = null;
        Boolean returnDraftIfExists = null;
        DefaultWorkflow response = api.getDefaultWorkflow(id)
                .returnDraftIfExists(returnDraftIfExists)
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflow for issue type in workflow scheme
     *
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIssueTypeWorkflowTest() throws ApiException {
        Long id = null;
        String issueType = null;
        Boolean returnDraftIfExists = null;
        IssueTypeWorkflowMapping response = api.getIssueTypeWorkflow(id, issueType)
                .returnDraftIfExists(returnDraftIfExists)
                .execute();
        // TODO: test validations
    }

    /**
     * Get issue types for workflows in workflow scheme
     *
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIssueTypesForWorkflowsInSchemeTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean returnDraftIfExists = null;
        IssueTypesWorkflowMapping response = api.getIssueTypesForWorkflowsInScheme(id)
                .workflowName(workflowName)
                .returnDraftIfExists(returnDraftIfExists)
                .execute();
        // TODO: test validations
    }

    /**
     * Get required status mappings for workflow scheme update
     *
     * Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRequiredStatusMappingsTest() throws ApiException {
        String id = null;
        List<WorkflowSchemeAssociation> workflowsForIssueTypes = null;
        String defaultWorkflowId = null;
        WorkflowSchemeUpdateRequiredMappingsResponse response = api.getRequiredStatusMappings(id, workflowsForIssueTypes)
                .defaultWorkflowId(defaultWorkflowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get workflow scheme
     *
     * Returns a workflow scheme.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemeByIdTest() throws ApiException {
        Long id = null;
        Boolean returnDraftIfExists = null;
        WorkflowScheme response = api.getSchemeById(id)
                .returnDraftIfExists(returnDraftIfExists)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete default workflow
     *
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDefaultWorkflowTest() throws ApiException {
        Long id = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.resetDefaultWorkflow(id)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Set workflow for issue type in workflow scheme
     *
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIssueTypeWorkflowTest() throws ApiException {
        Long id = null;
        String issueType = null;
        String issueType = null;
        Boolean updateDraftIfNeeded = null;
        String workflow = null;
        WorkflowScheme response = api.setIssueTypeWorkflow(id, issueType)
                .issueType(issueType)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .workflow(workflow)
                .execute();
        // TODO: test validations
    }

    /**
     * Set issue types for workflow in workflow scheme
     *
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIssueTypesForWorkflowInSchemeTest() throws ApiException {
        Long id = null;
        String workflowName = null;
        Boolean defaultMapping = null;
        List<String> issueTypes = null;
        Boolean updateDraftIfNeeded = null;
        String workflow = null;
        WorkflowScheme response = api.setIssueTypesForWorkflowInScheme(id, workflowName)
                .defaultMapping(defaultMapping)
                .issueTypes(issueTypes)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .workflow(workflow)
                .execute();
        // TODO: test validations
    }

    /**
     * Update default workflow
     *
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultWorkflowTest() throws ApiException {
        String workflow = null;
        Long id = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.updateDefaultWorkflow(workflow, id)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

    /**
     * Update workflow scheme
     *
     * Updates company-managed and team-managed project workflow schemes. This API doesn&#39;t have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](https://dac-static.atlassian.com) migrates the issues as defined in the provided mappings.  **[Permissions](https://dac-static.atlassian.com) required:**   *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.  *  *Administer projects* project permission to update project-scoped workflow schemes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemeTest() throws ApiException {
        String description = null;
        DocumentVersion version = null;
        String id = null;
        String name = null;
        String defaultWorkflowId = null;
        List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride = null;
        List<MappingsByWorkflow> statusMappingsByWorkflows = null;
        List<WorkflowSchemeAssociation> workflowsForIssueTypes = null;
        Object response = api.updateScheme(description, version, id, name)
                .defaultWorkflowId(defaultWorkflowId)
                .statusMappingsByIssueTypeOverride(statusMappingsByIssueTypeOverride)
                .statusMappingsByWorkflows(statusMappingsByWorkflows)
                .workflowsForIssueTypes(workflowsForIssueTypes)
                .execute();
        // TODO: test validations
    }

    /**
     * Classic update workflow scheme
     *
     * Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](https://dac-static.atlassian.com) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScheme_0Test() throws ApiException {
        Long id = null;
        String description = null;
        String defaultWorkflow = null;
        Boolean draft = null;
        Long id = null;
        Map<String, String> issueTypeMappings = null;
        Map<String, IssueTypeDetails> issueTypes = null;
        String lastModified = null;
        User lastModifiedUser = null;
        String name = null;
        String originalDefaultWorkflow = null;
        Map<String, String> originalIssueTypeMappings = null;
        URI self = null;
        Boolean updateDraftIfNeeded = null;
        WorkflowScheme response = api.updateScheme_0(id)
                .description(description)
                .defaultWorkflow(defaultWorkflow)
                .draft(draft)
                .id(id)
                .issueTypeMappings(issueTypeMappings)
                .issueTypes(issueTypes)
                .lastModified(lastModified)
                .lastModifiedUser(lastModifiedUser)
                .name(name)
                .originalDefaultWorkflow(originalDefaultWorkflow)
                .originalIssueTypeMappings(originalIssueTypeMappings)
                .self(self)
                .updateDraftIfNeeded(updateDraftIfNeeded)
                .execute();
        // TODO: test validations
    }

}
